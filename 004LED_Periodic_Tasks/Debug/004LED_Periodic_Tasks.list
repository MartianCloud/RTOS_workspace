
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a80c  2000001c  08005dd4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a828  08005dd4  0002a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011721  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f5  00000000  00000000  0003176d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00034168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227d0  00000000  00000000  000361e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011742  00000000  00000000  000589b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d41ea  00000000  00000000  0006a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  0013e32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c10 	.word	0x08005c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005c10 	.word	0x08005c10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019254 	.word	0x20019254

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb8d 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(250000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f003 f9b8 	bl	80038f0 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f002 ffda 	bl	8003544 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 fe05 	bl	80021b0 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 fdeb 	bl	80021b0 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fdd2 	bl	80021b0 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f001 ffa7 	bl	800257c <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0003d090 	.word	0x0003d090
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08005c28 	.word	0x08005c28
 800063c:	080009e5 	.word	0x080009e5
 8000640:	08005c38 	.word	0x08005c38
 8000644:	08000a55 	.word	0x08000a55
 8000648:	08005c48 	.word	0x08005c48
 800064c:	08000a1d 	.word	0x08000a1d

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 face 	bl	8005c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdcd 	bl	8001274 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9e6 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f824 	bl	8001750 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9cf 	bl	8000ab0 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba1      	ldr	r3, [pc, #644]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa0      	ldr	r2, [pc, #640]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9e      	ldr	r3, [pc, #632]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9a      	ldr	r3, [pc, #616]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a99      	ldr	r2, [pc, #612]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b97      	ldr	r3, [pc, #604]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b93      	ldr	r3, [pc, #588]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a92      	ldr	r2, [pc, #584]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b90      	ldr	r3, [pc, #576]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8b      	ldr	r2, [pc, #556]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b85      	ldr	r3, [pc, #532]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a84      	ldr	r2, [pc, #528]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b82      	ldr	r3, [pc, #520]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7e      	ldr	r3, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7d      	ldr	r2, [pc, #500]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <MX_GPIO_Init+0x2a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4878      	ldr	r0, [pc, #480]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007e8:	f000 fd10 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4876      	ldr	r0, [pc, #472]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007f2:	f000 fd0b 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4874      	ldr	r0, [pc, #464]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007fe:	f000 fd05 	bl	800120c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486b      	ldr	r0, [pc, #428]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800081a:	f000 fb5b 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4865      	ldr	r0, [pc, #404]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000836:	f000 fb4d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485d      	ldr	r0, [pc, #372]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000856:	f000 fb3d 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 800086e:	f000 fb31 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000872:	2310      	movs	r3, #16
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000882:	2306      	movs	r3, #6
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 800088e:	f000 fb21 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000892:	23e0      	movs	r3, #224	; 0xe0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008ae:	f000 fb11 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b2:	2304      	movs	r3, #4
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c6:	f000 fb05 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008dc:	2305      	movs	r3, #5
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	483d      	ldr	r0, [pc, #244]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008e8:	f000 faf4 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008ec:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4832      	ldr	r0, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000906:	f000 fae5 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091c:	2306      	movs	r3, #6
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4829      	ldr	r0, [pc, #164]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000928:	f000 fad4 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000942:	f000 fac7 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000946:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000958:	230a      	movs	r3, #10
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000964:	f000 fab6 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800097c:	f000 faaa 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000980:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 800099e:	f000 fa99 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_GPIO_Init+0x2bc>)
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80009b6:	f000 fa8d 	bl	8000ed4 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	10110000 	.word	0x10110000
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	10120000 	.word	0x10120000

080009e4 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009ec:	f001 fed0 	bl	8002790 <xTaskGetTickCount>
 80009f0:	4603      	mov	r3, r0
 80009f2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <led_green_handler+0x30>)
 80009f6:	f005 f823 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <led_green_handler+0x34>)
 8000a00:	f000 fc1d 	bl	800123e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fd33 	bl	8002478 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a12:	e7ef      	b.n	80009f4 <led_green_handler+0x10>
 8000a14:	08005c58 	.word	0x08005c58
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a24:	f001 feb4 	bl	8002790 <xTaskGetTickCount>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <led_orange_handler+0x30>)
 8000a2e:	f005 f807 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <led_orange_handler+0x34>)
 8000a38:	f000 fc01 	bl	800123e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fd17 	bl	8002478 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a4a:	e7ef      	b.n	8000a2c <led_orange_handler+0x10>
 8000a4c:	08005c6c 	.word	0x08005c6c
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a5c:	f001 fe98 	bl	8002790 <xTaskGetTickCount>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <led_red_handler+0x30>)
 8000a66:	f004 ffeb 	bl	8005a40 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <led_red_handler+0x34>)
 8000a70:	f000 fbe5 	bl	800123e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(400));
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fcfb 	bl	8002478 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a82:	e7ef      	b.n	8000a64 <led_red_handler+0x10>
 8000a84:	08005c80 	.word	0x08005c80
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 f917 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001000 	.word	0x40001000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2036      	movs	r0, #54	; 0x36
 8000b26:	f000 f9ab 	bl	8000e80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f000 f9c4 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f806 	bl	8001b68 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b5c:	f000 fff0 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0xac>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0xb0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_InitTick+0xac>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0xac>)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_InitTick+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_InitTick+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_InitTick+0xac>)
 8000b96:	f001 f819 	bl	8001bcc <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_InitTick+0xac>)
 8000ba2:	f001 f848 	bl	8001c36 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	20000038 	.word	0x20000038
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM6_DAC_IRQHandler+0x10>)
 8000bfe:	f001 f83e 	bl	8001c7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000038 	.word	0x20000038

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <SystemInit+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <SystemInit+0x28>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SystemInit+0x28>)
 8000c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c26:	609a      	str	r2, [r3, #8]
#endif
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr  r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd3 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 ff89 	bl	8005b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc7d 	bl	8000568 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c74:	08005db8 	.word	0x08005db8
  ldr  r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c7c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000c80:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000c84:	2001a828 	.word	0x2001a828

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8d8 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff28 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fefe 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000078 	.word	0x20000078

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000078 	.word	0x20000078

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e16b      	b.n	80011c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 815a 	bne.w	80011c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d00b      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f22:	2b11      	cmp	r3, #17
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0xfc>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80b4 	beq.w	80011c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <HAL_GPIO_Init+0x310>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x330>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x310>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x334>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x334>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae90 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	401a      	ands	r2, r3
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	429a      	cmp	r2, r3
 8001256:	d104      	bne.n	8001262 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001260:	e002      	b.n	8001268 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e25e      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e239      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6c      	ldr	r2, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a68      	ldr	r2, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fce4 	bl	8000cf8 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce0 	bl	8000cf8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1fe      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fcd0 	bl	8000cf8 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fccc 	bl	8000cf8 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1ea      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1be      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4937      	ldr	r1, [pc, #220]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc85 	bl	8000cf8 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc81 	bl	8000cf8 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e19f      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4925      	ldr	r1, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc64 	bl	8000cf8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc60 	bl	8000cf8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e17e      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d036      	beq.n	80014cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d016      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fc44 	bl	8000cf8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc40 	bl	8000cf8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e15e      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
 8001492:	e01b      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fc2d 	bl	8000cf8 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e00e      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc29 	bl	8000cf8 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d907      	bls.n	80014c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e147      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	42470000 	.word	0x42470000
 80014bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ea      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8097 	beq.w	8001608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d118      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff fbe9 	bl	8000cf8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152a:	f7ff fbe5 	bl	8000cf8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e103      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x2ea>
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x30c>
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a5e      	ldr	r2, [pc, #376]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0304 	bic.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d015      	beq.n	80015cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fbaa 	bl	8000cf8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fba6 	bl	8000cf8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0c2      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0ee      	beq.n	80015a8 <HAL_RCC_OscConfig+0x334>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fb94 	bl	8000cf8 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fb90 	bl	8000cf8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0ac      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8098 	beq.w	8001742 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d05c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d141      	bne.n	80016aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb64 	bl	8000cf8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb60 	bl	8000cf8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e07e      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	491b      	ldr	r1, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb39 	bl	8000cf8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb35 	bl	8000cf8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e053      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x416>
 80016a8:	e04b      	b.n	8001742 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb22 	bl	8000cf8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb1e 	bl	8000cf8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e03c      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
 80016d6:	e034      	b.n	8001742 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e02f      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_RCC_OscConfig+0x4d8>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	d11c      	bne.n	800173e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d115      	bne.n	800173e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	4293      	cmp	r3, r2
 8001720:	d10d      	bne.n	800173e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa5a 	bl	8000cf8 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa56 	bl	8000cf8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f90a 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08005d68 	.word	0x08005d68
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b094      	sub	sp, #80	; 0x50
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80e1 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e0db      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001954:	e0db      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195a:	e0d8      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
 800197c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800198e:	4622      	mov	r2, r4
 8001990:	462b      	mov	r3, r5
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0159      	lsls	r1, r3, #5
 800199c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a0:	0150      	lsls	r0, r2, #5
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4621      	mov	r1, r4
 80019a8:	1a51      	subs	r1, r2, r1
 80019aa:	6139      	str	r1, [r7, #16]
 80019ac:	4629      	mov	r1, r5
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c0:	4659      	mov	r1, fp
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	4651      	mov	r1, sl
 80019c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ca:	4651      	mov	r1, sl
 80019cc:	018a      	lsls	r2, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	ebb2 0801 	subs.w	r8, r2, r1
 80019d4:	4659      	mov	r1, fp
 80019d6:	eb63 0901 	sbc.w	r9, r3, r1
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	eb18 0303 	adds.w	r3, r8, r3
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	462b      	mov	r3, r5
 80019fc:	eb49 0303 	adc.w	r3, r9, r3
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a0e:	4629      	mov	r1, r5
 8001a10:	024b      	lsls	r3, r1, #9
 8001a12:	4621      	mov	r1, r4
 8001a14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a18:	4621      	mov	r1, r4
 8001a1a:	024a      	lsls	r2, r1, #9
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	2200      	movs	r2, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a2c:	f7fe fc1a 	bl	8000264 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a38:	e058      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	2200      	movs	r2, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	4611      	mov	r1, r2
 8001a46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a54:	4642      	mov	r2, r8
 8001a56:	464b      	mov	r3, r9
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0159      	lsls	r1, r3, #5
 8001a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a66:	0150      	lsls	r0, r2, #5
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a72:	4649      	mov	r1, r9
 8001a74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a90:	eb63 050b 	sbc.w	r5, r3, fp
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	00eb      	lsls	r3, r5, #3
 8001a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa2:	00e2      	lsls	r2, r4, #3
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	18e3      	adds	r3, r4, r3
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	464b      	mov	r3, r9
 8001ab0:	eb45 0303 	adc.w	r3, r5, r3
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	028b      	lsls	r3, r1, #10
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001acc:	4621      	mov	r1, r4
 8001ace:	028a      	lsls	r2, r1, #10
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae0:	f7fe fbc0 	bl	8000264 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3750      	adds	r7, #80	; 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005d78 	.word	0x08005d78

08001b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	220f      	movs	r2, #15
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_RCC_GetClockConfig+0x60>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e01d      	b.n	8001c1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f815 	bl	8001c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f968 	bl	8001ee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d007      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d122      	bne.n	8001cda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11b      	bne.n	8001cda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0202 	mvn.w	r2, #2
 8001caa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8ee 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001cc6:	e005      	b.n	8001cd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f8e0 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8f1 	bl	8001eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d122      	bne.n	8001d2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d11b      	bne.n	8001d2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0204 	mvn.w	r2, #4
 8001cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8c4 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001d1a:	e005      	b.n	8001d28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8b6 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8c7 	bl	8001eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d122      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11b      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0208 	mvn.w	r2, #8
 8001d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2204      	movs	r2, #4
 8001d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f89a 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001d6e:	e005      	b.n	8001d7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f88c 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f89d 	bl	8001eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d122      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0210 	mvn.w	r2, #16
 8001da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2208      	movs	r2, #8
 8001dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f870 	bl	8001ea2 <HAL_TIM_IC_CaptureCallback>
 8001dc2:	e005      	b.n	8001dd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f862 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f873 	bl	8001eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10e      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0201 	mvn.w	r2, #1
 8001dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fe45 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f903 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e46:	2b40      	cmp	r3, #64	; 0x40
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f838 	bl	8001eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d10e      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0220 	mvn.w	r2, #32
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8cd 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <TIM_Base_SetConfig+0x114>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efe:	d00f      	beq.n	8001f20 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <TIM_Base_SetConfig+0x118>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00b      	beq.n	8001f20 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3c      	ldr	r2, [pc, #240]	; (8001ffc <TIM_Base_SetConfig+0x11c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <TIM_Base_SetConfig+0x120>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d003      	beq.n	8001f20 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <TIM_Base_SetConfig+0x124>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d108      	bne.n	8001f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <TIM_Base_SetConfig+0x114>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d02b      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d027      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <TIM_Base_SetConfig+0x118>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d023      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <TIM_Base_SetConfig+0x11c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <TIM_Base_SetConfig+0x120>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01b      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a29      	ldr	r2, [pc, #164]	; (8002004 <TIM_Base_SetConfig+0x124>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d017      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a28      	ldr	r2, [pc, #160]	; (8002008 <TIM_Base_SetConfig+0x128>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <TIM_Base_SetConfig+0x12c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00f      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <TIM_Base_SetConfig+0x130>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <TIM_Base_SetConfig+0x134>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <TIM_Base_SetConfig+0x138>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <TIM_Base_SetConfig+0x13c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0xf8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <TIM_Base_SetConfig+0x124>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d103      	bne.n	8001fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	615a      	str	r2, [r3, #20]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00
 8002004:	40010400 	.word	0x40010400
 8002008:	40014000 	.word	0x40014000
 800200c:	40014400 	.word	0x40014400
 8002010:	40014800 	.word	0x40014800
 8002014:	40001800 	.word	0x40001800
 8002018:	40001c00 	.word	0x40001c00
 800201c:	40002000 	.word	0x40002000

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 0208 	add.w	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f103 0208 	add.w	r2, r3, #8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 0208 	add.w	r2, r3, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d103      	bne.n	800210a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e00c      	b.n	8002124 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3308      	adds	r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e002      	b.n	8002118 <vListInsert+0x2e>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	d2f6      	bcs.n	8002112 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6892      	ldr	r2, [r2, #8]
 8002172:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6852      	ldr	r2, [r2, #4]
 800217c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d103      	bne.n	8002190 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 ffb1 	bl	800312c <pvPortMalloc>
 80021ca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00e      	beq.n	80021f0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021d2:	2058      	movs	r0, #88	; 0x58
 80021d4:	f000 ffaa 	bl	800312c <pvPortMalloc>
 80021d8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
 80021e6:	e005      	b.n	80021f4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f001 f87f 	bl	80032ec <vPortFree>
 80021ee:	e001      	b.n	80021f4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d013      	beq.n	8002222 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	2300      	movs	r3, #0
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f80e 	bl	8002232 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002216:	69f8      	ldr	r0, [r7, #28]
 8002218:	f000 f8a2 	bl	8002360 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e002      	b.n	8002228 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002228:	69bb      	ldr	r3, [r7, #24]
    }
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b088      	sub	sp, #32
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	21a5      	movs	r1, #165	; 0xa5
 800224c:	f003 fcd8 	bl	8005c00 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800225a:	3b01      	subs	r3, #1
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f023 0307 	bic.w	r3, r3, #7
 8002268:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	617b      	str	r3, [r7, #20]
    }
 8002286:	bf00      	nop
 8002288:	e7fe      	b.n	8002288 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01f      	beq.n	80022d0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	e012      	b.n	80022bc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	7819      	ldrb	r1, [r3, #0]
 800229e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	3334      	adds	r3, #52	; 0x34
 80022a6:	460a      	mov	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d9e9      	bls.n	8002296 <prvInitialiseNewTask+0x64>
 80022c2:	e000      	b.n	80022c6 <prvInitialiseNewTask+0x94>
            {
                break;
 80022c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022ce:	e003      	b.n	80022d8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d901      	bls.n	80022e2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022de:	2304      	movs	r3, #4
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	2200      	movs	r2, #0
 80022f2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	3304      	adds	r3, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fec5 	bl	8002088 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	3318      	adds	r3, #24
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fec0 	bl	8002088 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	f1c3 0205 	rsb	r2, r3, #5
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	3350      	adds	r3, #80	; 0x50
 8002322:	2204      	movs	r2, #4
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fc6a 	bl	8005c00 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	3354      	adds	r3, #84	; 0x54
 8002330:	2201      	movs	r2, #1
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fc63 	bl	8005c00 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	69b8      	ldr	r0, [r7, #24]
 8002340:	f000 fc98 	bl	8002c74 <pxPortInitialiseStack>
 8002344:	4602      	mov	r2, r0
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002354:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002368:	f000 fdb6 	bl	8002ed8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002374:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800237e:	4a38      	ldr	r2, [pc, #224]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d110      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800238c:	f000 fb60 	bl	8002a50 <prvInitialiseTaskLists>
 8002390:	e00d      	b.n	80023ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d802      	bhi.n	80023ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <prvAddNewTaskToReadyList+0x94>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f937 	bl	800563c <SEGGER_SYSVIEW_OnTaskCreate>
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	461d      	mov	r5, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461c      	mov	r4, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1ae3      	subs	r3, r4, r3
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	462b      	mov	r3, r5
 80023f0:	f001 f94a 	bl	8003688 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 f9a4 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <prvAddNewTaskToReadyList+0x110>)
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff fe3c 	bl	80020a2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800242a:	f000 fd85 	bl	8002f38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvAddNewTaskToReadyList+0x114>)
 8002446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}
 800245c:	20000154 	.word	0x20000154
 8002460:	2000007c 	.word	0x2000007c
 8002464:	20000160 	.word	0x20000160
 8002468:	20000170 	.word	0x20000170
 800246c:	2000015c 	.word	0x2000015c
 8002470:	20000080 	.word	0x20000080
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xTaskDelayUntil+0x2a>
        __asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	617b      	str	r3, [r7, #20]
    }
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <xTaskDelayUntil+0x46>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	613b      	str	r3, [r7, #16]
    }
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <xTaskDelayUntil+0xf8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <xTaskDelayUntil+0x64>
        __asm volatile
 80024c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ca:	f383 8811 	msr	BASEPRI, r3
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	60fb      	str	r3, [r7, #12]
    }
 80024d8:	bf00      	nop
 80024da:	e7fe      	b.n	80024da <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80024dc:	f000 f8aa 	bl	8002634 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <xTaskDelayUntil+0xfc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d20b      	bcs.n	8002512 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	429a      	cmp	r2, r3
 8002502:	d211      	bcs.n	8002528 <xTaskDelayUntil+0xb0>
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d90d      	bls.n	8002528 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800250c:	2301      	movs	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	e00a      	b.n	8002528 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	d303      	bcc.n	8002524 <xTaskDelayUntil+0xac>
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d901      	bls.n	8002528 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002534:	2024      	movs	r0, #36	; 0x24
 8002536:	f002 fc6d 	bl	8004e14 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fb1e 	bl	8002b84 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002548:	f000 f882 	bl	8002650 <xTaskResumeAll>
 800254c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <xTaskDelayUntil+0x100>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002566:	4618      	mov	r0, r3
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000017c 	.word	0x2000017c
 8002574:	20000158 	.word	0x20000158
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <vTaskStartScheduler+0x98>)
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	2282      	movs	r2, #130	; 0x82
 800258e:	4922      	ldr	r1, [pc, #136]	; (8002618 <vTaskStartScheduler+0x9c>)
 8002590:	4822      	ldr	r0, [pc, #136]	; (800261c <vTaskStartScheduler+0xa0>)
 8002592:	f7ff fe0d 	bl	80021b0 <xTaskCreate>
 8002596:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d124      	bne.n	80025e8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	60bb      	str	r3, [r7, #8]
    }
 80025b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <vTaskStartScheduler+0xa4>)
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <vTaskStartScheduler+0xa8>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <vTaskStartScheduler+0xac>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <vTaskStartScheduler+0xb0>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <vTaskStartScheduler+0x98>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d102      	bne.n	80025d8 <vTaskStartScheduler+0x5c>
 80025d2:	f003 f817 	bl	8005604 <SEGGER_SYSVIEW_OnIdle>
 80025d6:	e004      	b.n	80025e2 <vTaskStartScheduler+0x66>
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <vTaskStartScheduler+0xb0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f86f 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025e2:	f000 fbd7 	bl	8002d94 <xPortStartScheduler>
 80025e6:	e00e      	b.n	8002606 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d10a      	bne.n	8002606 <vTaskStartScheduler+0x8a>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	607b      	str	r3, [r7, #4]
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <vTaskStartScheduler+0xb4>)
 8002608:	681b      	ldr	r3, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000178 	.word	0x20000178
 8002618:	08005c94 	.word	0x08005c94
 800261c:	08002a21 	.word	0x08002a21
 8002620:	20000174 	.word	0x20000174
 8002624:	20000160 	.word	0x20000160
 8002628:	20000158 	.word	0x20000158
 800262c:	2000007c 	.word	0x2000007c
 8002630:	2000000c 	.word	0x2000000c

08002634 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <vTaskSuspendAll+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	4a03      	ldr	r2, [pc, #12]	; (800264c <vTaskSuspendAll+0x18>)
 8002640:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	2000017c 	.word	0x2000017c

08002650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800265e:	4b43      	ldr	r3, [pc, #268]	; (800276c <xTaskResumeAll+0x11c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <xTaskResumeAll+0x2c>
        __asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	603b      	str	r3, [r7, #0]
    }
 8002678:	bf00      	nop
 800267a:	e7fe      	b.n	800267a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800267c:	f000 fc2c 	bl	8002ed8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <xTaskResumeAll+0x11c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	4a39      	ldr	r2, [pc, #228]	; (800276c <xTaskResumeAll+0x11c>)
 8002688:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <xTaskResumeAll+0x11c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d165      	bne.n	800275e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <xTaskResumeAll+0x120>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d061      	beq.n	800275e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800269a:	e032      	b.n	8002702 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <xTaskResumeAll+0x124>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3318      	adds	r3, #24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fd57 	bl	800215c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fd52 	bl	800215c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f842 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <xTaskResumeAll+0x128>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <xTaskResumeAll+0x128>)
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <xTaskResumeAll+0x12c>)
 80026e0:	441a      	add	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3304      	adds	r3, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f7ff fcda 	bl	80020a2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <xTaskResumeAll+0x130>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d302      	bcc.n	8002702 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <xTaskResumeAll+0x134>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <xTaskResumeAll+0x124>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1c8      	bne.n	800269c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002710:	f000 fa1c 	bl	8002b4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <xTaskResumeAll+0x138>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002720:	f000 f858 	bl	80027d4 <xTaskIncrementTick>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <xTaskResumeAll+0x134>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f1      	bne.n	8002720 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <xTaskResumeAll+0x138>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <xTaskResumeAll+0x134>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800274a:	2301      	movs	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <xTaskResumeAll+0x13c>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800275e:	f000 fbeb 	bl	8002f38 <vPortExitCritical>

    return xAlreadyYielded;
 8002762:	68bb      	ldr	r3, [r7, #8]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000017c 	.word	0x2000017c
 8002770:	20000154 	.word	0x20000154
 8002774:	20000114 	.word	0x20000114
 8002778:	2000015c 	.word	0x2000015c
 800277c:	20000080 	.word	0x20000080
 8002780:	2000007c 	.word	0x2000007c
 8002784:	20000168 	.word	0x20000168
 8002788:	20000164 	.word	0x20000164
 800278c:	e000ed04 	.word	0xe000ed04

08002790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <xTaskGetTickCount+0x1c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000158 	.word	0x20000158

080027b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b6:	f000 fc79 	bl	80030ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <xTaskGetTickCountFromISR+0x20>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027c4:	683b      	ldr	r3, [r7, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000158 	.word	0x20000158

080027d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027de:	4b50      	ldr	r3, [pc, #320]	; (8002920 <xTaskIncrementTick+0x14c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8092 	bne.w	800290c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027e8:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <xTaskIncrementTick+0x150>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027f0:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <xTaskIncrementTick+0x150>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d120      	bne.n	800283e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027fc:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <xTaskIncrementTick+0x154>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <xTaskIncrementTick+0x48>
        __asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	603b      	str	r3, [r7, #0]
    }
 8002818:	bf00      	nop
 800281a:	e7fe      	b.n	800281a <xTaskIncrementTick+0x46>
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <xTaskIncrementTick+0x154>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b42      	ldr	r3, [pc, #264]	; (800292c <xTaskIncrementTick+0x158>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <xTaskIncrementTick+0x154>)
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <xTaskIncrementTick+0x158>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <xTaskIncrementTick+0x15c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a3e      	ldr	r2, [pc, #248]	; (8002930 <xTaskIncrementTick+0x15c>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	f000 f987 	bl	8002b4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <xTaskIncrementTick+0x160>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d34c      	bcc.n	80028e2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <xTaskIncrementTick+0x154>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <xTaskIncrementTick+0x160>)
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	601a      	str	r2, [r3, #0]
                    break;
 800285a:	e042      	b.n	80028e2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <xTaskIncrementTick+0x154>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d203      	bcs.n	800287c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002874:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <xTaskIncrementTick+0x160>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800287a:	e032      	b.n	80028e2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3304      	adds	r3, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc6b 	bl	800215c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3318      	adds	r3, #24
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc62 	bl	800215c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 ff52 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <xTaskIncrementTick+0x164>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <xTaskIncrementTick+0x164>)
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <xTaskIncrementTick+0x168>)
 80028c0:	441a      	add	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7ff fbea 	bl	80020a2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <xTaskIncrementTick+0x16c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3b5      	bcc.n	8002848 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e0:	e7b2      	b.n	8002848 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <xTaskIncrementTick+0x16c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	4914      	ldr	r1, [pc, #80]	; (800293c <xTaskIncrementTick+0x168>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d901      	bls.n	80028fe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <xTaskIncrementTick+0x170>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002906:	2301      	movs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e004      	b.n	8002916 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <xTaskIncrementTick+0x174>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <xTaskIncrementTick+0x174>)
 8002914:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002916:	697b      	ldr	r3, [r7, #20]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	2000017c 	.word	0x2000017c
 8002924:	20000158 	.word	0x20000158
 8002928:	2000010c 	.word	0x2000010c
 800292c:	20000110 	.word	0x20000110
 8002930:	2000016c 	.word	0x2000016c
 8002934:	20000174 	.word	0x20000174
 8002938:	2000015c 	.word	0x2000015c
 800293c:	20000080 	.word	0x20000080
 8002940:	2000007c 	.word	0x2000007c
 8002944:	20000168 	.word	0x20000168
 8002948:	20000164 	.word	0x20000164

0800294c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <vTaskSwitchContext+0xbc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <vTaskSwitchContext+0xc0>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002960:	e04d      	b.n	80029fe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <vTaskSwitchContext+0xc0>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <vTaskSwitchContext+0xc4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f1c3 031f 	rsb	r3, r3, #31
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	4925      	ldr	r1, [pc, #148]	; (8002a14 <vTaskSwitchContext+0xc8>)
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	607b      	str	r3, [r7, #4]
    }
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <vTaskSwitchContext+0x5a>
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <vTaskSwitchContext+0xc8>)
 80029b4:	4413      	add	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	3308      	adds	r3, #8
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d104      	bne.n	80029d8 <vTaskSwitchContext+0x8c>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <vTaskSwitchContext+0xcc>)
 80029e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <vTaskSwitchContext+0xcc>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <vTaskSwitchContext+0xd0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d102      	bne.n	80029f4 <vTaskSwitchContext+0xa8>
 80029ee:	f002 fe09 	bl	8005604 <SEGGER_SYSVIEW_OnIdle>
}
 80029f2:	e004      	b.n	80029fe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <vTaskSwitchContext+0xcc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fe61 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000017c 	.word	0x2000017c
 8002a0c:	20000168 	.word	0x20000168
 8002a10:	2000015c 	.word	0x2000015c
 8002a14:	20000080 	.word	0x20000080
 8002a18:	2000007c 	.word	0x2000007c
 8002a1c:	20000178 	.word	0x20000178

08002a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a28:	f000 f852 	bl	8002ad0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <prvIdleTask+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d9f9      	bls.n	8002a28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <prvIdleTask+0x2c>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a44:	e7f0      	b.n	8002a28 <prvIdleTask+0x8>
 8002a46:	bf00      	nop
 8002a48:	20000080 	.word	0x20000080
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	e00c      	b.n	8002a76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <prvInitialiseTaskLists+0x60>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff faec 	bl	8002048 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d9ef      	bls.n	8002a5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <prvInitialiseTaskLists+0x64>)
 8002a7e:	f7ff fae3 	bl	8002048 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a82:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <prvInitialiseTaskLists+0x68>)
 8002a84:	f7ff fae0 	bl	8002048 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <prvInitialiseTaskLists+0x6c>)
 8002a8a:	f7ff fadd 	bl	8002048 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a8e:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <prvInitialiseTaskLists+0x70>)
 8002a90:	f7ff fada 	bl	8002048 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a94:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <prvInitialiseTaskLists+0x74>)
 8002a96:	f7ff fad7 	bl	8002048 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <prvInitialiseTaskLists+0x78>)
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <prvInitialiseTaskLists+0x64>)
 8002a9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <prvInitialiseTaskLists+0x7c>)
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <prvInitialiseTaskLists+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000080 	.word	0x20000080
 8002ab4:	200000e4 	.word	0x200000e4
 8002ab8:	200000f8 	.word	0x200000f8
 8002abc:	20000114 	.word	0x20000114
 8002ac0:	20000128 	.word	0x20000128
 8002ac4:	20000140 	.word	0x20000140
 8002ac8:	2000010c 	.word	0x2000010c
 8002acc:	20000110 	.word	0x20000110

08002ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ad6:	e019      	b.n	8002b0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ad8:	f000 f9fe 	bl	8002ed8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <prvCheckTasksWaitingTermination+0x50>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fb37 	bl	800215c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <prvCheckTasksWaitingTermination+0x54>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <prvCheckTasksWaitingTermination+0x54>)
 8002af6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <prvCheckTasksWaitingTermination+0x58>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <prvCheckTasksWaitingTermination+0x58>)
 8002b00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b02:	f000 fa19 	bl	8002f38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f810 	bl	8002b2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <prvCheckTasksWaitingTermination+0x58>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e1      	bne.n	8002ad8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000128 	.word	0x20000128
 8002b24:	20000154 	.word	0x20000154
 8002b28:	2000013c 	.word	0x2000013c

08002b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fbd7 	bl	80032ec <vPortFree>
                vPortFree( pxTCB );
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fbd4 	bl	80032ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <prvResetNextTaskUnblockTime+0x30>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <prvResetNextTaskUnblockTime+0x34>)
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b62:	e005      	b.n	8002b70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <prvResetNextTaskUnblockTime+0x30>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <prvResetNextTaskUnblockTime+0x34>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	2000010c 	.word	0x2000010c
 8002b80:	20000174 	.word	0x20000174

08002b84 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b8e:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fade 	bl	800215c <uxListRemove>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2201      	movs	r2, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002bbc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d110      	bne.n	8002be8 <prvAddCurrentTaskToDelayedList+0x64>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	211b      	movs	r1, #27
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fdf8 	bl	80057c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4820      	ldr	r0, [pc, #128]	; (8002c64 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002be2:	f7ff fa5e 	bl	80020a2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002be6:	e032      	b.n	8002c4e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d20f      	bcs.n	8002c20 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2104      	movs	r1, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 fdde 	bl	80057c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3304      	adds	r3, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f7ff fa66 	bl	80020ea <vListInsert>
}
 8002c1e:	e016      	b.n	8002c4e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2104      	movs	r1, #4
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fdce 	bl	80057c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f7ff fa56 	bl	80020ea <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d202      	bcs.n	8002c4e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <prvAddCurrentTaskToDelayedList+0xec>)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000158 	.word	0x20000158
 8002c5c:	2000007c 	.word	0x2000007c
 8002c60:	2000015c 	.word	0x2000015c
 8002c64:	20000140 	.word	0x20000140
 8002c68:	20000110 	.word	0x20000110
 8002c6c:	2000010c 	.word	0x2000010c
 8002c70:	20000174 	.word	0x20000174

08002c74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b04      	subs	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3b04      	subs	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <pxPortInitialiseStack+0x64>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3b14      	subs	r3, #20
 8002cae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b04      	subs	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f06f 0202 	mvn.w	r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b20      	subs	r3, #32
 8002cc8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	08002cdd 	.word	0x08002cdd

08002cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <prvTaskExitError+0x54>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d00a      	beq.n	8002d06 <prvTaskExitError+0x2a>
        __asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	60fb      	str	r3, [r7, #12]
    }
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <prvTaskExitError+0x28>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	60bb      	str	r3, [r7, #8]
    }
 8002d18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d1a:	bf00      	nop
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0fc      	beq.n	8002d1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	20000010 	.word	0x20000010
	...

08002d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <pxCurrentTCBConst2>)
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	6808      	ldr	r0, [r1, #0]
 8002d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4a:	f380 8809 	msr	PSP, r0
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f380 8811 	msr	BASEPRI, r0
 8002d5a:	4770      	bx	lr
 8002d5c:	f3af 8000 	nop.w

08002d60 <pxCurrentTCBConst2>:
 8002d60:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop

08002d68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d68:	4808      	ldr	r0, [pc, #32]	; (8002d8c <prvPortStartFirstTask+0x24>)
 8002d6a:	6800      	ldr	r0, [r0, #0]
 8002d6c:	6800      	ldr	r0, [r0, #0]
 8002d6e:	f380 8808 	msr	MSP, r0
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f380 8814 	msr	CONTROL, r0
 8002d7a:	b662      	cpsie	i
 8002d7c:	b661      	cpsie	f
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	df00      	svc	0
 8002d88:	bf00      	nop
 8002d8a:	0000      	.short	0x0000
 8002d8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop

08002d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <xPortStartScheduler+0x120>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a46      	ldr	r2, [pc, #280]	; (8002eb8 <xPortStartScheduler+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10a      	bne.n	8002dba <xPortStartScheduler+0x26>
        __asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	613b      	str	r3, [r7, #16]
    }
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dba:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <xPortStartScheduler+0x120>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <xPortStartScheduler+0x128>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10a      	bne.n	8002dda <xPortStartScheduler+0x46>
        __asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	60fb      	str	r3, [r7, #12]
    }
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <xPortStartScheduler+0x12c>)
 8002ddc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <xPortStartScheduler+0x130>)
 8002e00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e08:	e009      	b.n	8002e1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	4a2d      	ldr	r2, [pc, #180]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d0ef      	beq.n	8002e0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d00a      	beq.n	8002e4c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	60bb      	str	r3, [r7, #8]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <xPortStartScheduler+0x134>)
 8002e60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <xPortStartScheduler+0x138>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <xPortStartScheduler+0x138>)
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <xPortStartScheduler+0x138>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <xPortStartScheduler+0x138>)
 8002e7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e82:	f000 f8e3 	bl	800304c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <xPortStartScheduler+0x13c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e8c:	f000 f902 	bl	8003094 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <xPortStartScheduler+0x140>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <xPortStartScheduler+0x140>)
 8002e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e9c:	f7ff ff64 	bl	8002d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ea0:	f7ff fd54 	bl	800294c <vTaskSwitchContext>
    prvTaskExitError();
 8002ea4:	f7ff ff1a 	bl	8002cdc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00
 8002eb8:	410fc271 	.word	0x410fc271
 8002ebc:	410fc270 	.word	0x410fc270
 8002ec0:	e000e400 	.word	0xe000e400
 8002ec4:	20000180 	.word	0x20000180
 8002ec8:	20000184 	.word	0x20000184
 8002ecc:	e000ed20 	.word	0xe000ed20
 8002ed0:	20000010 	.word	0x20000010
 8002ed4:	e000ef34 	.word	0xe000ef34

08002ed8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	607b      	str	r3, [r7, #4]
    }
 8002ef0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <vPortEnterCritical+0x58>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <vPortEnterCritical+0x58>)
 8002efa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <vPortEnterCritical+0x58>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10f      	bne.n	8002f24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <vPortEnterCritical+0x5c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	603b      	str	r3, [r7, #0]
    }
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vPortEnterCritical+0x4a>
    }
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000010 	.word	0x20000010
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <vPortExitCritical+0x50>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <vPortExitCritical+0x24>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	607b      	str	r3, [r7, #4]
    }
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <vPortExitCritical+0x50>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <vPortExitCritical+0x50>)
 8002f64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <vPortExitCritical+0x50>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <vPortExitCritical+0x42>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000010 	.word	0x20000010
 8002f8c:	00000000 	.word	0x00000000

08002f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f90:	f3ef 8009 	mrs	r0, PSP
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <pxCurrentTCBConst>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f01e 0f10 	tst.w	lr, #16
 8002fa0:	bf08      	it	eq
 8002fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	6010      	str	r0, [r2, #0]
 8002fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fb4:	f380 8811 	msr	BASEPRI, r0
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f7ff fcc4 	bl	800294c <vTaskSwitchContext>
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f380 8811 	msr	BASEPRI, r0
 8002fcc:	bc09      	pop	{r0, r3}
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	6808      	ldr	r0, [r1, #0]
 8002fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd6:	f01e 0f10 	tst.w	lr, #16
 8002fda:	bf08      	it	eq
 8002fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fe0:	f380 8809 	msr	PSP, r0
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w

08002ff0 <pxCurrentTCBConst>:
 8002ff0:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop

08002ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
    }
 8003010:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003012:	f002 fa7d 	bl	8005510 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003016:	f7ff fbdd 	bl	80027d4 <xTaskIncrementTick>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003020:	f002 fad4 	bl	80055cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <SysTick_Handler+0x50>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e001      	b.n	8003032 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800302e:	f002 fab1 	bl	8005594 <SEGGER_SYSVIEW_RecordExitISR>
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f383 8811 	msr	BASEPRI, r3
    }
 800303c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <vPortSetupTimerInterrupt+0x38>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <vPortSetupTimerInterrupt+0x3c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <vPortSetupTimerInterrupt+0x40>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <vPortSetupTimerInterrupt+0x44>)
 800306a:	3b01      	subs	r3, #1
 800306c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <vPortSetupTimerInterrupt+0x34>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010
 8003084:	e000e018 	.word	0xe000e018
 8003088:	20000000 	.word	0x20000000
 800308c:	10624dd3 	.word	0x10624dd3
 8003090:	e000e014 	.word	0xe000e014

08003094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030a4 <vPortEnableVFP+0x10>
 8003098:	6801      	ldr	r1, [r0, #0]
 800309a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800309e:	6001      	str	r1, [r0, #0]
 80030a0:	4770      	bx	lr
 80030a2:	0000      	.short	0x0000
 80030a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop

080030ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80030b2:	f3ef 8305 	mrs	r3, IPSR
 80030b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d914      	bls.n	80030e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <vPortValidateInterruptPriority+0x70>)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <vPortValidateInterruptPriority+0x74>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	7afa      	ldrb	r2, [r7, #11]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d20a      	bcs.n	80030e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	607b      	str	r3, [r7, #4]
    }
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <vPortValidateInterruptPriority+0x78>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <vPortValidateInterruptPriority+0x7c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d90a      	bls.n	800310e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	603b      	str	r3, [r7, #0]
    }
 800310a:	bf00      	nop
 800310c:	e7fe      	b.n	800310c <vPortValidateInterruptPriority+0x60>
    }
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000e3f0 	.word	0xe000e3f0
 8003120:	20000180 	.word	0x20000180
 8003124:	e000ed0c 	.word	0xe000ed0c
 8003128:	20000184 	.word	0x20000184

0800312c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003138:	f7ff fa7c 	bl	8002634 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800313c:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <pvPortMalloc+0x1a8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003144:	f000 f934 	bl	80033b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <pvPortMalloc+0x1ac>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 80a7 	bne.w	80032a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02d      	beq.n	80031b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800315c:	2208      	movs	r2, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d227      	bcs.n	80031b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003168:	2208      	movs	r2, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f023 0307 	bic.w	r3, r3, #7
 8003180:	3308      	adds	r3, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d214      	bcs.n	80031b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	3308      	adds	r3, #8
 8003190:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <pvPortMalloc+0x92>
        __asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	617b      	str	r3, [r7, #20]
    }
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031b6:	e002      	b.n	80031be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	e000      	b.n	80031c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06e      	beq.n	80032a4 <pvPortMalloc+0x178>
 80031c6:	4b45      	ldr	r3, [pc, #276]	; (80032dc <pvPortMalloc+0x1b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d869      	bhi.n	80032a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <pvPortMalloc+0x1b4>)
 80031d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <pvPortMalloc+0x1b4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031da:	e004      	b.n	80031e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d903      	bls.n	80031f8 <pvPortMalloc+0xcc>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f1      	bne.n	80031dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <pvPortMalloc+0x1a8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	429a      	cmp	r2, r3
 8003200:	d050      	beq.n	80032a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	4413      	add	r3, r2
 800320a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	2308      	movs	r3, #8
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	429a      	cmp	r2, r3
 8003222:	d91f      	bls.n	8003264 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <pvPortMalloc+0x120>
        __asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	613b      	str	r3, [r7, #16]
    }
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad2      	subs	r2, r2, r3
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800325e:	69b8      	ldr	r0, [r7, #24]
 8003260:	f000 f908 	bl	8003474 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <pvPortMalloc+0x1b0>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <pvPortMalloc+0x1b0>)
 8003270:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <pvPortMalloc+0x1b0>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <pvPortMalloc+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d203      	bcs.n	8003286 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <pvPortMalloc+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <pvPortMalloc+0x1b8>)
 8003284:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <pvPortMalloc+0x1ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	431a      	orrs	r2, r3
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <pvPortMalloc+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <pvPortMalloc+0x1bc>)
 80032a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80032a4:	f7ff f9d4 	bl	8002650 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <pvPortMalloc+0x19c>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	60fb      	str	r3, [r7, #12]
    }
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80032c8:	69fb      	ldr	r3, [r7, #28]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3728      	adds	r7, #40	; 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20019190 	.word	0x20019190
 80032d8:	200191a4 	.word	0x200191a4
 80032dc:	20019194 	.word	0x20019194
 80032e0:	20019188 	.word	0x20019188
 80032e4:	20019198 	.word	0x20019198
 80032e8:	2001919c 	.word	0x2001919c

080032ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04d      	beq.n	800339a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032fe:	2308      	movs	r3, #8
 8003300:	425b      	negs	r3, r3
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4413      	add	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <vPortFree+0xb8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <vPortFree+0x44>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60fb      	str	r3, [r7, #12]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <vPortFree+0x62>
        __asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60bb      	str	r3, [r7, #8]
    }
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <vPortFree+0xb8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01e      	beq.n	800339a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11a      	bne.n	800339a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <vPortFree+0xb8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003374:	f7ff f95e 	bl	8002634 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <vPortFree+0xbc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4413      	add	r3, r2
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <vPortFree+0xbc>)
 8003384:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003386:	6938      	ldr	r0, [r7, #16]
 8003388:	f000 f874 	bl	8003474 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <vPortFree+0xc0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <vPortFree+0xc0>)
 8003394:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003396:	f7ff f95b 	bl	8002650 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200191a4 	.word	0x200191a4
 80033a8:	20019194 	.word	0x20019194
 80033ac:	200191a0 	.word	0x200191a0

080033b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033b6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80033ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <prvHeapInit+0xac>)
 80033be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3307      	adds	r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0307 	bic.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <prvHeapInit+0xac>)
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <prvHeapInit+0xb0>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <prvHeapInit+0xb0>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	4413      	add	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033fc:	2208      	movs	r2, #8
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a15      	ldr	r2, [pc, #84]	; (8003464 <prvHeapInit+0xb4>)
 8003410:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <prvHeapInit+0xb4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <prvHeapInit+0xb4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <prvHeapInit+0xb4>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <prvHeapInit+0xb8>)
 800343e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a09      	ldr	r2, [pc, #36]	; (800346c <prvHeapInit+0xbc>)
 8003446:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <prvHeapInit+0xc0>)
 800344a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800344e:	601a      	str	r2, [r3, #0]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	20000188 	.word	0x20000188
 8003460:	20019188 	.word	0x20019188
 8003464:	20019190 	.word	0x20019190
 8003468:	20019198 	.word	0x20019198
 800346c:	20019194 	.word	0x20019194
 8003470:	200191a4 	.word	0x200191a4

08003474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <prvInsertBlockIntoFreeList+0xac>)
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e002      	b.n	8003488 <prvInsertBlockIntoFreeList+0x14>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d8f7      	bhi.n	8003482 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4413      	add	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d108      	bne.n	80034b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	441a      	add	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d118      	bne.n	80034fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <prvInsertBlockIntoFreeList+0xb0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d00d      	beq.n	80034f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e008      	b.n	8003504 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <prvInsertBlockIntoFreeList+0xb0>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e003      	b.n	8003504 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d002      	beq.n	8003512 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20019188 	.word	0x20019188
 8003524:	20019190 	.word	0x20019190

08003528 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800352c:	4803      	ldr	r0, [pc, #12]	; (800353c <_cbSendSystemDesc+0x14>)
 800352e:	f001 ff99 	bl	8005464 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003532:	4803      	ldr	r0, [pc, #12]	; (8003540 <_cbSendSystemDesc+0x18>)
 8003534:	f001 ff96 	bl	8005464 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	08005c9c 	.word	0x08005c9c
 8003540:	08005ce0 	.word	0x08005ce0

08003544 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <SEGGER_SYSVIEW_Conf+0x20>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <SEGGER_SYSVIEW_Conf+0x20>)
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SEGGER_SYSVIEW_Conf+0x24>)
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <SEGGER_SYSVIEW_Conf+0x28>)
 8003554:	f001 fc0a 	bl	8004d6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003558:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800355c:	f001 fc4a 	bl	8004df4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000000 	.word	0x20000000
 8003568:	08003529 	.word	0x08003529
 800356c:	08005d80 	.word	0x08005d80

08003570 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b085      	sub	sp, #20
 8003574:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	e033      	b.n	80035e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800357c:	491e      	ldr	r1, [pc, #120]	; (80035f8 <_cbSendTaskList+0x88>)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	491a      	ldr	r1, [pc, #104]	; (80035f8 <_cbSendTaskList+0x88>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3304      	adds	r3, #4
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	4c16      	ldr	r4, [pc, #88]	; (80035f8 <_cbSendTaskList+0x88>)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4423      	add	r3, r4
 80035ac:	3308      	adds	r3, #8
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	4d11      	ldr	r5, [pc, #68]	; (80035f8 <_cbSendTaskList+0x88>)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	442b      	add	r3, r5
 80035be:	330c      	adds	r3, #12
 80035c0:	681d      	ldr	r5, [r3, #0]
 80035c2:	4e0d      	ldr	r6, [pc, #52]	; (80035f8 <_cbSendTaskList+0x88>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4433      	add	r3, r6
 80035d0:	3310      	adds	r3, #16
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	462b      	mov	r3, r5
 80035d8:	4622      	mov	r2, r4
 80035da:	f000 f8bd 	bl	8003758 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3301      	adds	r3, #1
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <_cbSendTaskList+0x8c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3c6      	bcc.n	800357c <_cbSendTaskList+0xc>
  }
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f8:	200191a8 	.word	0x200191a8
 80035fc:	20019248 	.word	0x20019248

08003600 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003608:	f7ff f8d2 	bl	80027b0 <xTaskGetTickCountFromISR>
 800360c:	4603      	mov	r3, r0
 800360e:	2200      	movs	r2, #0
 8003610:	469a      	mov	sl, r3
 8003612:	4693      	mov	fp, r2
 8003614:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	f04f 0a00 	mov.w	sl, #0
 8003624:	f04f 0b00 	mov.w	fp, #0
 8003628:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800362c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003630:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003634:	4652      	mov	r2, sl
 8003636:	465b      	mov	r3, fp
 8003638:	1a14      	subs	r4, r2, r0
 800363a:	eb63 0501 	sbc.w	r5, r3, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	00ab      	lsls	r3, r5, #2
 8003648:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800364c:	00a2      	lsls	r2, r4, #2
 800364e:	4614      	mov	r4, r2
 8003650:	461d      	mov	r5, r3
 8003652:	eb14 0800 	adds.w	r8, r4, r0
 8003656:	eb45 0901 	adc.w	r9, r5, r1
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366e:	4690      	mov	r8, r2
 8003670:	4699      	mov	r9, r3
 8003672:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003676:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003688 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003696:	2205      	movs	r2, #5
 8003698:	492b      	ldr	r1, [pc, #172]	; (8003748 <SYSVIEW_AddTask+0xc0>)
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f002 fa92 	bl	8005bc4 <memcmp>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04b      	beq.n	800373e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <SYSVIEW_AddTask+0xc4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b07      	cmp	r3, #7
 80036ac:	d903      	bls.n	80036b6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80036ae:	4828      	ldr	r0, [pc, #160]	; (8003750 <SYSVIEW_AddTask+0xc8>)
 80036b0:	f002 f9da 	bl	8005a68 <SEGGER_SYSVIEW_Warn>
    return;
 80036b4:	e044      	b.n	8003740 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <SYSVIEW_AddTask+0xc4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4926      	ldr	r1, [pc, #152]	; (8003754 <SYSVIEW_AddTask+0xcc>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <SYSVIEW_AddTask+0xc4>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4921      	ldr	r1, [pc, #132]	; (8003754 <SYSVIEW_AddTask+0xcc>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3304      	adds	r3, #4
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <SYSVIEW_AddTask+0xc4>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	491b      	ldr	r1, [pc, #108]	; (8003754 <SYSVIEW_AddTask+0xcc>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3308      	adds	r3, #8
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <SYSVIEW_AddTask+0xc4>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4916      	ldr	r1, [pc, #88]	; (8003754 <SYSVIEW_AddTask+0xcc>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	330c      	adds	r3, #12
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <SYSVIEW_AddTask+0xc4>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4910      	ldr	r1, [pc, #64]	; (8003754 <SYSVIEW_AddTask+0xcc>)
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3310      	adds	r3, #16
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <SYSVIEW_AddTask+0xc4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a08      	ldr	r2, [pc, #32]	; (800374c <SYSVIEW_AddTask+0xc4>)
 800372a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f80e 	bl	8003758 <SYSVIEW_SendTaskInfo>
 800373c:	e000      	b.n	8003740 <SYSVIEW_AddTask+0xb8>
    return;
 800373e:	bf00      	nop

}
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08005cf0 	.word	0x08005cf0
 800374c:	20019248 	.word	0x20019248
 8003750:	08005cf8 	.word	0x08005cf8
 8003754:	200191a8 	.word	0x200191a8

08003758 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	2214      	movs	r2, #20
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f002 fa46 	bl	8005c00 <memset>
  TaskInfo.TaskID     = TaskID;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fd71 	bl	8005274 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003792:	bf00      	nop
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <__NVIC_EnableIRQ>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db0b      	blt.n	80037c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4907      	ldr	r1, [pc, #28]	; (80037d4 <__NVIC_EnableIRQ+0x38>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2001      	movs	r0, #1
 80037be:	fa00 f202 	lsl.w	r2, r0, r2
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e100 	.word	0xe000e100

080037d8 <__NVIC_SetPriority>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	db0a      	blt.n	8003802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	490c      	ldr	r1, [pc, #48]	; (8003824 <__NVIC_SetPriority+0x4c>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003800:	e00a      	b.n	8003818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4908      	ldr	r1, [pc, #32]	; (8003828 <__NVIC_SetPriority+0x50>)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3b04      	subs	r3, #4
 8003810:	0112      	lsls	r2, r2, #4
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	440b      	add	r3, r1
 8003816:	761a      	strb	r2, [r3, #24]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003832:	f002 f975 	bl	8005b20 <SEGGER_SYSVIEW_IsStarted>
 8003836:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800383e:	f001 fb9d 	bl	8004f7c <SEGGER_SYSVIEW_Start>
  }
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <_cbOnUARTRx+0x3c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d806      	bhi.n	800386c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <_cbOnUARTRx+0x3c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <_cbOnUARTRx+0x3c>)
 8003868:	701a      	strb	r2, [r3, #0]
    goto Done;
 800386a:	e009      	b.n	8003880 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800386c:	f7ff ffde 	bl	800382c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <_cbOnUARTRx+0x3c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	2201      	movs	r2, #1
 800387a:	4619      	mov	r1, r3
 800387c:	f000 fb9a 	bl	8003fb4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003880:	bf00      	nop
}
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000014 	.word	0x20000014

0800388c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <_cbOnUARTTx+0x5c>)
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d80f      	bhi.n	80038bc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <_cbOnUARTTx+0x5c>)
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <_cbOnUARTTx+0x60>)
 80038a4:	5c9a      	ldrb	r2, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <_cbOnUARTTx+0x5c>)
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	3301      	adds	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <_cbOnUARTTx+0x5c>)
 80038b4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80038ba:	e00f      	b.n	80038dc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <_cbOnUARTTx+0x5c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fa19 	bl	8003cfc <SEGGER_RTT_ReadUpBufferNoLock>
 80038ca:	4603      	mov	r3, r0
 80038cc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da02      	bge.n	80038da <_cbOnUARTTx+0x4e>
    r = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e000      	b.n	80038dc <_cbOnUARTTx+0x50>
  }
Done:
 80038da:	bf00      	nop
  return r;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000014 	.word	0x20000014
 80038ec:	08005d88 	.word	0x08005d88

080038f0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <SEGGER_UART_init+0x1c>)
 80038fa:	4905      	ldr	r1, [pc, #20]	; (8003910 <SEGGER_UART_init+0x20>)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f863 	bl	80039c8 <HIF_UART_Init>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	0800384d 	.word	0x0800384d
 8003910:	0800388d 	.word	0x0800388d

08003914 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <USART2_IRQHandler+0x80>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d011      	beq.n	800394e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <USART2_IRQHandler+0x84>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 030b 	and.w	r3, r3, #11
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <USART2_IRQHandler+0x88>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <USART2_IRQHandler+0x88>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	79fa      	ldrb	r2, [r7, #7]
 800394a:	4610      	mov	r0, r2
 800394c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <USART2_IRQHandler+0x8c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <USART2_IRQHandler+0x8c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1dfa      	adds	r2, r7, #7
 8003966:	4610      	mov	r0, r2
 8003968:	4798      	blx	r3
 800396a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <USART2_IRQHandler+0x90>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <USART2_IRQHandler+0x90>)
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e006      	b.n	800398e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <USART2_IRQHandler+0x80>)
 8003982:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <USART2_IRQHandler+0x84>)
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e000      	b.n	800398e <USART2_IRQHandler+0x7a>
      return;
 800398c:	bf00      	nop
    }
  }
}
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40004400 	.word	0x40004400
 8003998:	40004404 	.word	0x40004404
 800399c:	2001924c 	.word	0x2001924c
 80039a0:	20019250 	.word	0x20019250
 80039a4:	4000440c 	.word	0x4000440c

080039a8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	4000440c 	.word	0x4000440c

080039c8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80039d4:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HIF_UART_Init+0xc8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <HIF_UART_Init+0xc8>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80039e0:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <HIF_UART_Init+0xcc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <HIF_UART_Init+0xcc>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HIF_UART_Init+0xd0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003a00:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <HIF_UART_Init+0xd0>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HIF_UART_Init+0xd4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a14:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003a1c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HIF_UART_Init+0xd4>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003a24:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HIF_UART_Init+0xd8>)
 8003a26:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003a2a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HIF_UART_Init+0xdc>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HIF_UART_Init+0xe0>)
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HIF_UART_Init+0xe4>)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d302      	bcc.n	8003a5e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a5c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HIF_UART_Init+0xe8>)
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <HIF_UART_Init+0xec>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a74:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <HIF_UART_Init+0xf0>)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a7a:	2106      	movs	r1, #6
 8003a7c:	2026      	movs	r0, #38	; 0x26
 8003a7e:	f7ff feab 	bl	80037d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a82:	2026      	movs	r0, #38	; 0x26
 8003a84:	f7ff fe8a 	bl	800379c <__NVIC_EnableIRQ>
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023840 	.word	0x40023840
 8003a94:	40023830 	.word	0x40023830
 8003a98:	40020020 	.word	0x40020020
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	4000440c 	.word	0x4000440c
 8003aa4:	40004410 	.word	0x40004410
 8003aa8:	40004414 	.word	0x40004414
 8003aac:	0501bd00 	.word	0x0501bd00
 8003ab0:	40004408 	.word	0x40004408
 8003ab4:	2001924c 	.word	0x2001924c
 8003ab8:	20019250 	.word	0x20019250

08003abc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <_DoInit+0x98>)
 8003ac4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <_DoInit+0x9c>)
 8003ad6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <_DoInit+0xa0>)
 8003adc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ae4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <_DoInit+0x9c>)
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <_DoInit+0xa4>)
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2210      	movs	r2, #16
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3307      	adds	r3, #7
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <_DoInit+0xa8>)
 8003b22:	6810      	ldr	r0, [r2, #0]
 8003b24:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b26:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <_DoInit+0xac>)
 8003b2e:	6810      	ldr	r0, [r2, #0]
 8003b30:	6018      	str	r0, [r3, #0]
 8003b32:	8891      	ldrh	r1, [r2, #4]
 8003b34:	7992      	ldrb	r2, [r2, #6]
 8003b36:	8099      	strh	r1, [r3, #4]
 8003b38:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b3a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b44:	f3bf 8f5f 	dmb	sy
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	20019254 	.word	0x20019254
 8003b58:	08005d48 	.word	0x08005d48
 8003b5c:	200192fc 	.word	0x200192fc
 8003b60:	200196fc 	.word	0x200196fc
 8003b64:	08005d54 	.word	0x08005d54
 8003b68:	08005d58 	.word	0x08005d58

08003b6c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d905      	bls.n	8003b9c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e007      	b.n	8003bac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	1acb      	subs	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	bf28      	it	cs
 8003bba:	4613      	movcs	r3, r2
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	bf28      	it	cs
 8003bc6:	4613      	movcs	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	6978      	ldr	r0, [r7, #20]
 8003bda:	f002 f803 	bl	8005be4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	4413      	add	r3, r2
 8003be4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	4413      	add	r3, r2
 8003bec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	4413      	add	r3, r2
 8003bfc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d101      	bne.n	8003c0c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c0c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1b2      	bne.n	8003b82 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d911      	bls.n	8003c6e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	6938      	ldr	r0, [r7, #16]
 8003c5a:	f001 ffc3 	bl	8005be4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c5e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	441a      	add	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c6c:	e01f      	b.n	8003cae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	6938      	ldr	r0, [r7, #16]
 8003c82:	f001 ffaf 	bl	8005be4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4413      	add	r3, r2
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6938      	ldr	r0, [r7, #16]
 8003ca0:	f001 ffa0 	bl	8005be4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ca4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	60da      	str	r2, [r3, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d808      	bhi.n	8003ce4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad2      	subs	r2, r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e004      	b.n	8003cee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003d16:	f7ff fed1 	bl	8003abc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4a37      	ldr	r2, [pc, #220]	; (8003e04 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d28:	4413      	add	r3, r2
 8003d2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d92b      	bls.n	8003da0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4293      	cmp	r3, r2
 8003d58:	bf28      	it	cs
 8003d5a:	4613      	movcs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	4413      	add	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	6939      	ldr	r1, [r7, #16]
 8003d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d6e:	f001 ff39 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4413      	add	r3, r2
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4413      	add	r3, r2
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d101      	bne.n	8003da0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bf28      	it	cs
 8003db0:	4613      	movcs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	4413      	add	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dca:	f001 ff0b 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	4413      	add	r3, r2
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4413      	add	r3, r2
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3730      	adds	r7, #48	; 0x30
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20019254 	.word	0x20019254

08003e08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003e14:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <SEGGER_RTT_ReadNoLock+0x1e>
 8003e22:	f7ff fe4b 	bl	8003abc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	3360      	adds	r3, #96	; 0x60
 8003e32:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e34:	4413      	add	r3, r2
 8003e36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d92b      	bls.n	8003eac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bf28      	it	cs
 8003e66:	4613      	movcs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	4413      	add	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	6939      	ldr	r1, [r7, #16]
 8003e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e7a:	f001 feb3 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4413      	add	r3, r2
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d101      	bne.n	8003eac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bf28      	it	cs
 8003ebc:	4613      	movcs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d019      	beq.n	8003efa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	4413      	add	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed6:	f001 fe85 	bl	8005be4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f04:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3730      	adds	r7, #48	; 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20019254 	.word	0x20019254

08003f14 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	3360      	adds	r3, #96	; 0x60
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d029      	beq.n	8003f92 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d82e      	bhi.n	8003fa0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d013      	beq.n	8003f72 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f4a:	e029      	b.n	8003fa0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f4c:	6978      	ldr	r0, [r7, #20]
 8003f4e:	f7ff feb2 	bl	8003cb6 <_GetAvailWriteSpace>
 8003f52:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d202      	bcs.n	8003f62 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f60:	e021      	b.n	8003fa6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7ff fe5b 	bl	8003c26 <_WriteNoCheck>
    break;
 8003f70:	e019      	b.n	8003fa6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff fe9f 	bl	8003cb6 <_GetAvailWriteSpace>
 8003f78:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bf28      	it	cs
 8003f82:	4613      	movcs	r3, r2
 8003f84:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff fe4b 	bl	8003c26 <_WriteNoCheck>
    break;
 8003f90:	e009      	b.n	8003fa6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff fde8 	bl	8003b6c <_WriteBlocking>
 8003f9c:	61f8      	str	r0, [r7, #28]
    break;
 8003f9e:	e002      	b.n	8003fa6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
    break;
 8003fa4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20019254 	.word	0x20019254

08003fb4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003fce:	f7ff fd75 	bl	8003abc <_DoInit>
  SEGGER_RTT_LOCK();
 8003fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd6:	f04f 0120 	mov.w	r1, #32
 8003fda:	f381 8811 	msr	BASEPRI, r1
 8003fde:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff95 	bl	8003f14 <SEGGER_RTT_WriteDownBufferNoLock>
 8003fea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20019254 	.word	0x20019254

08004000 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <SEGGER_RTT_AllocUpBuffer+0x20>
 800401c:	f7ff fd4e 	bl	8003abc <_DoInit>
  SEGGER_RTT_LOCK();
 8004020:	f3ef 8311 	mrs	r3, BASEPRI
 8004024:	f04f 0120 	mov.w	r1, #32
 8004028:	f381 8811 	msr	BASEPRI, r1
 800402c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800402e:	4b35      	ldr	r3, [pc, #212]	; (8004104 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004030:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004036:	6939      	ldr	r1, [r7, #16]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3304      	adds	r3, #4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	429a      	cmp	r2, r3
 800405c:	dbeb      	blt.n	8004036 <SEGGER_RTT_AllocUpBuffer+0x36>
 800405e:	e000      	b.n	8004062 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004060:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	429a      	cmp	r2, r3
 800406a:	da3f      	bge.n	80040ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800406c:	6939      	ldr	r1, [r7, #16]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	3304      	adds	r3, #4
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	3320      	adds	r3, #32
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040aa:	6939      	ldr	r1, [r7, #16]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3324      	adds	r3, #36	; 0x24
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80040d2:	6939      	ldr	r1, [r7, #16]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	332c      	adds	r3, #44	; 0x2c
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040e6:	f3bf 8f5f 	dmb	sy
 80040ea:	e002      	b.n	80040f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295
 80040f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040f8:	69fb      	ldr	r3, [r7, #28]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20019254 	.word	0x20019254

08004108 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004124:	f7ff fcca 	bl	8003abc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800412a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	461a      	mov	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4293      	cmp	r3, r2
 8004136:	d24d      	bcs.n	80041d4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004138:	f3ef 8311 	mrs	r3, BASEPRI
 800413c:	f04f 0120 	mov.w	r1, #32
 8004140:	f381 8811 	msr	BASEPRI, r1
 8004144:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d031      	beq.n	80041b0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004160:	6979      	ldr	r1, [r7, #20]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	3364      	adds	r3, #100	; 0x64
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	3368      	adds	r3, #104	; 0x68
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	3370      	adds	r3, #112	; 0x70
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	440b      	add	r3, r1
 80041aa:	336c      	adds	r3, #108	; 0x6c
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	3374      	adds	r3, #116	; 0x74
 80041c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041c4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e002      	b.n	80041da <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80041da:	69fb      	ldr	r3, [r7, #28]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20019254 	.word	0x20019254

080041e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80041f8:	e002      	b.n	8004200 <_EncodeStr+0x18>
    Len++;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3301      	adds	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f6      	bne.n	80041fa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d901      	bls.n	8004218 <_EncodeStr+0x30>
    Len = Limit;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2bfe      	cmp	r3, #254	; 0xfe
 800421c:	d806      	bhi.n	800422c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	60fa      	str	r2, [r7, #12]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e011      	b.n	8004250 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	60fa      	str	r2, [r7, #12]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	60fa      	str	r2, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	0a19      	lsrs	r1, r3, #8
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	60fa      	str	r2, [r7, #12]
 800424c:	b2ca      	uxtb	r2, r1
 800424e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004254:	e00a      	b.n	800426c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	1c53      	adds	r3, r2, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	60f9      	str	r1, [r7, #12]
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	701a      	strb	r2, [r3, #0]
    n++;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3301      	adds	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d3f0      	bcc.n	8004256 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	4618      	mov	r0, r3
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <_HandleIncomingPacket+0xe0>)
 80042a4:	7e1b      	ldrb	r3, [r3, #24]
 80042a6:	4618      	mov	r0, r3
 80042a8:	1cfb      	adds	r3, r7, #3
 80042aa:	2201      	movs	r2, #1
 80042ac:	4619      	mov	r1, r3
 80042ae:	f7ff fdab 	bl	8003e08 <SEGGER_RTT_ReadNoLock>
 80042b2:	4603      	mov	r3, r0
 80042b4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dd54      	ble.n	8004366 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d032      	beq.n	8004328 <_HandleIncomingPacket+0x8c>
 80042c2:	2b80      	cmp	r3, #128	; 0x80
 80042c4:	dc42      	bgt.n	800434c <_HandleIncomingPacket+0xb0>
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	dc16      	bgt.n	80042f8 <_HandleIncomingPacket+0x5c>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	dd3e      	ble.n	800434c <_HandleIncomingPacket+0xb0>
 80042ce:	3b01      	subs	r3, #1
 80042d0:	2b06      	cmp	r3, #6
 80042d2:	d83b      	bhi.n	800434c <_HandleIncomingPacket+0xb0>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <_HandleIncomingPacket+0x40>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042ff 	.word	0x080042ff
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430b 	.word	0x0800430b
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004317 	.word	0x08004317
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	08004323 	.word	0x08004323
 80042f8:	2b7f      	cmp	r3, #127	; 0x7f
 80042fa:	d036      	beq.n	800436a <_HandleIncomingPacket+0xce>
 80042fc:	e026      	b.n	800434c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042fe:	f000 fe3d 	bl	8004f7c <SEGGER_SYSVIEW_Start>
      break;
 8004302:	e037      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004304:	f000 fef6 	bl	80050f4 <SEGGER_SYSVIEW_Stop>
      break;
 8004308:	e034      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800430a:	f001 f8cf 	bl	80054ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 800430e:	e031      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004310:	f001 f894 	bl	800543c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004314:	e02e      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004316:	f000 ff13 	bl	8005140 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800431a:	e02b      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800431c:	f001 fb52 	bl	80059c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004320:	e028      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004322:	f001 fb31 	bl	8005988 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004326:	e025      	b.n	8004374 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <_HandleIncomingPacket+0xe0>)
 800432a:	7e1b      	ldrb	r3, [r3, #24]
 800432c:	4618      	mov	r0, r3
 800432e:	1cfb      	adds	r3, r7, #3
 8004330:	2201      	movs	r2, #1
 8004332:	4619      	mov	r1, r3
 8004334:	f7ff fd68 	bl	8003e08 <SEGGER_RTT_ReadNoLock>
 8004338:	4603      	mov	r3, r0
 800433a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	dd15      	ble.n	800436e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fa9f 	bl	8005888 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800434a:	e010      	b.n	800436e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	b25b      	sxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0e      	bge.n	8004372 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <_HandleIncomingPacket+0xe0>)
 8004356:	7e1b      	ldrb	r3, [r3, #24]
 8004358:	4618      	mov	r0, r3
 800435a:	1cfb      	adds	r3, r7, #3
 800435c:	2201      	movs	r2, #1
 800435e:	4619      	mov	r1, r3
 8004360:	f7ff fd52 	bl	8003e08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004364:	e005      	b.n	8004372 <_HandleIncomingPacket+0xd6>
    }
  }
 8004366:	bf00      	nop
 8004368:	e004      	b.n	8004374 <_HandleIncomingPacket+0xd8>
      break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <_HandleIncomingPacket+0xd8>
      break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <_HandleIncomingPacket+0xd8>
      break;
 8004372:	bf00      	nop
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	2001a714 	.word	0x2001a714

08004380 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004386:	2301      	movs	r3, #1
 8004388:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	e00b      	b.n	80043b4 <_TrySendOverflowPacket+0x34>
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	09db      	lsrs	r3, r3, #7
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b7f      	cmp	r3, #127	; 0x7f
 80043b8:	d8f0      	bhi.n	800439c <_TrySendOverflowPacket+0x1c>
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <_TrySendOverflowPacket+0xe4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	e00b      	b.n	80043fc <_TrySendOverflowPacket+0x7c>
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1c59      	adds	r1, r3, #1
 80043ec:	6279      	str	r1, [r7, #36]	; 0x24
 80043ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	09db      	lsrs	r3, r3, #7
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004400:	d8f0      	bhi.n	80043e4 <_TrySendOverflowPacket+0x64>
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	627a      	str	r2, [r7, #36]	; 0x24
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	4618      	mov	r0, r3
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	461a      	mov	r2, r3
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	4619      	mov	r1, r3
 8004424:	f7fb fed4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004428:	4603      	mov	r3, r0
 800442a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800442c:	f7ff fabc 	bl	80039a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e004      	b.n	8004454 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	3301      	adds	r3, #1
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <_TrySendOverflowPacket+0xe0>)
 8004452:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004454:	693b      	ldr	r3, [r7, #16]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3730      	adds	r7, #48	; 0x30
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2001a714 	.word	0x2001a714
 8004464:	e0001004 	.word	0xe0001004

08004468 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004474:	4b6d      	ldr	r3, [pc, #436]	; (800462c <_SendPacket+0x1c4>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d010      	beq.n	800449e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800447c:	4b6b      	ldr	r3, [pc, #428]	; (800462c <_SendPacket+0x1c4>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a5 	beq.w	80045d0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004486:	4b69      	ldr	r3, [pc, #420]	; (800462c <_SendPacket+0x1c4>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d109      	bne.n	80044a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800448e:	f7ff ff77 	bl	8004380 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004492:	4b66      	ldr	r3, [pc, #408]	; (800462c <_SendPacket+0x1c4>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 809c 	bne.w	80045d4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800449c:	e001      	b.n	80044a2 <_SendPacket+0x3a>
    goto Send;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <_SendPacket+0x3c>
Send:
 80044a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b1f      	cmp	r3, #31
 80044a8:	d809      	bhi.n	80044be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80044aa:	4b60      	ldr	r3, [pc, #384]	; (800462c <_SendPacket+0x1c4>)
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 808d 	bne.w	80045d8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b17      	cmp	r3, #23
 80044c2:	d807      	bhi.n	80044d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e03d      	b.n	8004550 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b7f      	cmp	r3, #127	; 0x7f
 80044e0:	d912      	bls.n	8004508 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	09da      	lsrs	r2, r3, #7
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	3a01      	subs	r2, #1
 80044fa:	60fa      	str	r2, [r7, #12]
 80044fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e006      	b.n	8004516 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b7f      	cmp	r3, #127	; 0x7f
 800451a:	d912      	bls.n	8004542 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	09da      	lsrs	r2, r3, #7
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	3a01      	subs	r2, #1
 8004534:	60fa      	str	r2, [r7, #12]
 8004536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e006      	b.n	8004550 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b01      	subs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004550:	4b37      	ldr	r3, [pc, #220]	; (8004630 <_SendPacket+0x1c8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004556:	4b35      	ldr	r3, [pc, #212]	; (800462c <_SendPacket+0x1c4>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	e00b      	b.n	8004582 <_SendPacket+0x11a>
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1c59      	adds	r1, r3, #1
 8004572:	6279      	str	r1, [r7, #36]	; 0x24
 8004574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	09db      	lsrs	r3, r3, #7
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2b7f      	cmp	r3, #127	; 0x7f
 8004586:	d8f0      	bhi.n	800456a <_SendPacket+0x102>
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	627a      	str	r2, [r7, #36]	; 0x24
 800458e:	6a3a      	ldr	r2, [r7, #32]
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <_SendPacket+0x1c4>)
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	4618      	mov	r0, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f7fb fe12 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045ac:	4603      	mov	r3, r0
 80045ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80045b0:	f7ff f9fa 	bl	80039a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045ba:	4a1c      	ldr	r2, [pc, #112]	; (800462c <_SendPacket+0x1c4>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e00b      	b.n	80045da <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <_SendPacket+0x1c4>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <_SendPacket+0x1c4>)
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e004      	b.n	80045da <_SendPacket+0x172>
    goto SendDone;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <_SendPacket+0x172>
      goto SendDone;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <_SendPacket+0x172>
      goto SendDone;
 80045d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <_SendPacket+0x1c4>)
 80045dc:	7e1b      	ldrb	r3, [r3, #24]
 80045de:	4619      	mov	r1, r3
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <_SendPacket+0x1cc>)
 80045e2:	460b      	mov	r3, r1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	440b      	add	r3, r1
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	336c      	adds	r3, #108	; 0x6c
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <_SendPacket+0x1c4>)
 80045f2:	7e1b      	ldrb	r3, [r3, #24]
 80045f4:	4618      	mov	r0, r3
 80045f6:	490f      	ldr	r1, [pc, #60]	; (8004634 <_SendPacket+0x1cc>)
 80045f8:	4603      	mov	r3, r0
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4403      	add	r3, r0
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	3370      	adds	r3, #112	; 0x70
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d00b      	beq.n	8004622 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <_SendPacket+0x1c4>)
 800460c:	789b      	ldrb	r3, [r3, #2]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <_SendPacket+0x1c4>)
 8004614:	2201      	movs	r2, #1
 8004616:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004618:	f7ff fe40 	bl	800429c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <_SendPacket+0x1c4>)
 800461e:	2200      	movs	r2, #0
 8004620:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004622:	bf00      	nop
 8004624:	3728      	adds	r7, #40	; 0x28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2001a714 	.word	0x2001a714
 8004630:	e0001004 	.word	0xe0001004
 8004634:	20019254 	.word	0x20019254

08004638 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	3301      	adds	r3, #1
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d80a      	bhi.n	8004668 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	1c59      	adds	r1, r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6051      	str	r1, [r2, #4]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b80      	cmp	r3, #128	; 0x80
 800466e:	d15a      	bne.n	8004726 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	e00b      	b.n	80046aa <_StoreChar+0x72>
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	6279      	str	r1, [r7, #36]	; 0x24
 800469c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	09db      	lsrs	r3, r3, #7
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2b7f      	cmp	r3, #127	; 0x7f
 80046ae:	d8f0      	bhi.n	8004692 <_StoreChar+0x5a>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	627a      	str	r2, [r7, #36]	; 0x24
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e00b      	b.n	80046e2 <_StoreChar+0xaa>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	61f9      	str	r1, [r7, #28]
 80046d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	09db      	lsrs	r3, r3, #7
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	d8f0      	bhi.n	80046ca <_StoreChar+0x92>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	221a      	movs	r2, #26
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff feb1 	bl	8004468 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fdb9 	bl	8004282 <_PreparePacket>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
  }
}
 8004726:	bf00      	nop
 8004728:	3728      	adds	r7, #40	; 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004742:	2301      	movs	r3, #1
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004746:	2301      	movs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800474a:	e007      	b.n	800475c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	623b      	str	r3, [r7, #32]
    Width++;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3301      	adds	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f3      	bcs.n	800474c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d901      	bls.n	8004770 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11f      	bne.n	80047ba <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01c      	beq.n	80047ba <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <_PrintUnsigned+0x66>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <_PrintUnsigned+0x66>
        c = '0';
 8004790:	2330      	movs	r3, #48	; 0x30
 8004792:	76fb      	strb	r3, [r7, #27]
 8004794:	e001      	b.n	800479a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004796:	2320      	movs	r3, #32
 8004798:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800479a:	e007      	b.n	80047ac <_PrintUnsigned+0x7c>
        FieldWidth--;
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	3b01      	subs	r3, #1
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	4619      	mov	r1, r3
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ff46 	bl	8004638 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <_PrintUnsigned+0x8a>
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d3f0      	bcc.n	800479c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d903      	bls.n	80047c8 <_PrintUnsigned+0x98>
      NumDigits--;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	e009      	b.n	80047dc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d200      	bcs.n	80047dc <_PrintUnsigned+0xac>
        break;
 80047da:	e005      	b.n	80047e8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047e6:	e7e8      	b.n	80047ba <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <_PrintUnsigned+0x128>)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff14 	bl	8004638 <_StoreChar>
    Digit /= Base;
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e3      	bne.n	80047e8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004830:	e006      	b.n	8004840 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	3b01      	subs	r3, #1
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004838:	2120      	movs	r1, #32
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fefc 	bl	8004638 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <_PrintUnsigned+0x11e>
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	429a      	cmp	r2, r3
 800484c:	d3f1      	bcc.n	8004832 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800484e:	bf00      	nop
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	08005d98 	.word	0x08005d98

0800485c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	bfb8      	it	lt
 8004870:	425b      	neglt	r3, r3
 8004872:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004878:	e007      	b.n	800488a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004882:	613b      	str	r3, [r7, #16]
    Width++;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3301      	adds	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	daf3      	bge.n	800487a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	429a      	cmp	r2, r3
 8004898:	d901      	bls.n	800489e <_PrintInt+0x42>
    Width = NumDigits;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <_PrintInt+0x5e>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	db04      	blt.n	80048b4 <_PrintInt+0x58>
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <_PrintInt+0x5e>
    FieldWidth--;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <_PrintInt+0x6e>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <_PrintInt+0x9c>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048da:	e006      	b.n	80048ea <_PrintInt+0x8e>
        FieldWidth--;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	3b01      	subs	r3, #1
 80048e0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80048e2:	2120      	movs	r1, #32
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fea7 	bl	8004638 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <_PrintInt+0x9c>
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3f1      	bcc.n	80048dc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da07      	bge.n	800490e <_PrintInt+0xb2>
    v = -v;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	425b      	negs	r3, r3
 8004902:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004904:	212d      	movs	r1, #45	; 0x2d
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff fe96 	bl	8004638 <_StoreChar>
 800490c:	e008      	b.n	8004920 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004918:	212b      	movs	r1, #43	; 0x2b
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fe8c 	bl	8004638 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d019      	beq.n	800495e <_PrintInt+0x102>
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d114      	bne.n	800495e <_PrintInt+0x102>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d111      	bne.n	800495e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004940:	e006      	b.n	8004950 <_PrintInt+0xf4>
        FieldWidth--;
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	3b01      	subs	r3, #1
 8004946:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004948:	2130      	movs	r1, #48	; 0x30
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff fe74 	bl	8004638 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <_PrintInt+0x102>
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	429a      	cmp	r2, r3
 800495c:	d3f1      	bcc.n	8004942 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fedf 	bl	8004730 <_PrintUnsigned>
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b098      	sub	sp, #96	; 0x60
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004988:	f3ef 8311 	mrs	r3, BASEPRI
 800498c:	f04f 0120 	mov.w	r1, #32
 8004990:	f381 8811 	msr	BASEPRI, r1
 8004994:	633b      	str	r3, [r7, #48]	; 0x30
 8004996:	48b7      	ldr	r0, [pc, #732]	; (8004c74 <_VPrintTarget+0x2f8>)
 8004998:	f7ff fc73 	bl	8004282 <_PreparePacket>
 800499c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800499e:	4bb5      	ldr	r3, [pc, #724]	; (8004c74 <_VPrintTarget+0x2f8>)
 80049a0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80049c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8183 	beq.w	8004cd2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80049cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049d0:	2b25      	cmp	r3, #37	; 0x25
 80049d2:	f040 8170 	bne.w	8004cb6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80049d6:	2300      	movs	r3, #0
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80049e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049ea:	3b23      	subs	r3, #35	; 0x23
 80049ec:	2b0d      	cmp	r3, #13
 80049ee:	d83f      	bhi.n	8004a70 <_VPrintTarget+0xf4>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <_VPrintTarget+0x7c>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a61 	.word	0x08004a61
 80049fc:	08004a71 	.word	0x08004a71
 8004a00:	08004a71 	.word	0x08004a71
 8004a04:	08004a71 	.word	0x08004a71
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	08004a71 	.word	0x08004a71
 8004a10:	08004a71 	.word	0x08004a71
 8004a14:	08004a71 	.word	0x08004a71
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a71 	.word	0x08004a71
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a41 	.word	0x08004a41
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e01a      	b.n	8004a76 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e012      	b.n	8004a76 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e00a      	b.n	8004a76 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a62:	f043 0308 	orr.w	r3, r3, #8
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e002      	b.n	8004a76 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004a70:	2300      	movs	r3, #0
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
 8004a74:	bf00      	nop
        }
      } while (v);
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1b0      	bne.n	80049de <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a8c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a8e:	d912      	bls.n	8004ab6 <_VPrintTarget+0x13a>
 8004a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a94:	2b39      	cmp	r3, #57	; 0x39
 8004a96:	d80e      	bhi.n	8004ab6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aae:	4413      	add	r3, r2
 8004ab0:	3b30      	subs	r3, #48	; 0x30
 8004ab2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004ab4:	e7e4      	b.n	8004a80 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac8:	d11d      	bne.n	8004b06 <_VPrintTarget+0x18a>
        sFormat++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004adc:	2b2f      	cmp	r3, #47	; 0x2f
 8004ade:	d912      	bls.n	8004b06 <_VPrintTarget+0x18a>
 8004ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ae4:	2b39      	cmp	r3, #57	; 0x39
 8004ae6:	d80e      	bhi.n	8004b06 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004aee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	461a      	mov	r2, r3
 8004afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004afe:	4413      	add	r3, r2
 8004b00:	3b30      	subs	r3, #48	; 0x30
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004b04:	e7e4      	b.n	8004ad0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b12:	2b6c      	cmp	r3, #108	; 0x6c
 8004b14:	d003      	beq.n	8004b1e <_VPrintTarget+0x1a2>
 8004b16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b1a:	2b68      	cmp	r3, #104	; 0x68
 8004b1c:	d107      	bne.n	8004b2e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004b2c:	e7ef      	b.n	8004b0e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b32:	2b25      	cmp	r3, #37	; 0x25
 8004b34:	f000 80b3 	beq.w	8004c9e <_VPrintTarget+0x322>
 8004b38:	2b25      	cmp	r3, #37	; 0x25
 8004b3a:	f2c0 80b7 	blt.w	8004cac <_VPrintTarget+0x330>
 8004b3e:	2b78      	cmp	r3, #120	; 0x78
 8004b40:	f300 80b4 	bgt.w	8004cac <_VPrintTarget+0x330>
 8004b44:	2b58      	cmp	r3, #88	; 0x58
 8004b46:	f2c0 80b1 	blt.w	8004cac <_VPrintTarget+0x330>
 8004b4a:	3b58      	subs	r3, #88	; 0x58
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	f200 80ad 	bhi.w	8004cac <_VPrintTarget+0x330>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <_VPrintTarget+0x1dc>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004c4f 	.word	0x08004c4f
 8004b5c:	08004cad 	.word	0x08004cad
 8004b60:	08004cad 	.word	0x08004cad
 8004b64:	08004cad 	.word	0x08004cad
 8004b68:	08004cad 	.word	0x08004cad
 8004b6c:	08004cad 	.word	0x08004cad
 8004b70:	08004cad 	.word	0x08004cad
 8004b74:	08004cad 	.word	0x08004cad
 8004b78:	08004cad 	.word	0x08004cad
 8004b7c:	08004cad 	.word	0x08004cad
 8004b80:	08004cad 	.word	0x08004cad
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004c03 	.word	0x08004c03
 8004b8c:	08004cad 	.word	0x08004cad
 8004b90:	08004cad 	.word	0x08004cad
 8004b94:	08004cad 	.word	0x08004cad
 8004b98:	08004cad 	.word	0x08004cad
 8004b9c:	08004cad 	.word	0x08004cad
 8004ba0:	08004cad 	.word	0x08004cad
 8004ba4:	08004cad 	.word	0x08004cad
 8004ba8:	08004cad 	.word	0x08004cad
 8004bac:	08004cad 	.word	0x08004cad
 8004bb0:	08004cad 	.word	0x08004cad
 8004bb4:	08004cad 	.word	0x08004cad
 8004bb8:	08004c79 	.word	0x08004c79
 8004bbc:	08004cad 	.word	0x08004cad
 8004bc0:	08004cad 	.word	0x08004cad
 8004bc4:	08004cad 	.word	0x08004cad
 8004bc8:	08004cad 	.word	0x08004cad
 8004bcc:	08004c29 	.word	0x08004c29
 8004bd0:	08004cad 	.word	0x08004cad
 8004bd4:	08004cad 	.word	0x08004cad
 8004bd8:	08004c4f 	.word	0x08004c4f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	1d19      	adds	r1, r3, #4
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004bf0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fd1c 	bl	8004638 <_StoreChar>
        break;
 8004c00:	e055      	b.n	8004cae <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1d19      	adds	r1, r3, #4
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6011      	str	r1, [r2, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c10:	f107 0014 	add.w	r0, r7, #20
 8004c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	220a      	movs	r2, #10
 8004c20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c22:	f7ff fe1b 	bl	800485c <_PrintInt>
        break;
 8004c26:	e042      	b.n	8004cae <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	1d19      	adds	r1, r3, #4
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c38:	f107 0014 	add.w	r0, r7, #20
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	220a      	movs	r2, #10
 8004c48:	f7ff fd72 	bl	8004730 <_PrintUnsigned>
        break;
 8004c4c:	e02f      	b.n	8004cae <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1d19      	adds	r1, r3, #4
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6011      	str	r1, [r2, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004c5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c5e:	f107 0014 	add.w	r0, r7, #20
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	f7ff fd5f 	bl	8004730 <_PrintUnsigned>
        break;
 8004c72:	e01c      	b.n	8004cae <_VPrintTarget+0x332>
 8004c74:	2001a744 	.word	0x2001a744
      case 'p':
        v = va_arg(*pParamList, int);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c88:	f107 0014 	add.w	r0, r7, #20
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	2308      	movs	r3, #8
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2308      	movs	r3, #8
 8004c96:	2210      	movs	r2, #16
 8004c98:	f7ff fd4a 	bl	8004730 <_PrintUnsigned>
        break;
 8004c9c:	e007      	b.n	8004cae <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	2125      	movs	r1, #37	; 0x25
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fcc7 	bl	8004638 <_StoreChar>
        break;
 8004caa:	e000      	b.n	8004cae <_VPrintTarget+0x332>
      default:
        break;
 8004cac:	bf00      	nop
      }
      sFormat++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e007      	b.n	8004cc6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004cb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004cba:	f107 0314 	add.w	r3, r7, #20
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fcb9 	bl	8004638 <_StoreChar>
    }
  } while (*sFormat);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f ae72 	bne.w	80049b4 <_VPrintTarget+0x38>
 8004cd0:	e000      	b.n	8004cd4 <_VPrintTarget+0x358>
      break;
 8004cd2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d041      	beq.n	8004d5e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cea:	e00b      	b.n	8004d04 <_VPrintTarget+0x388>
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	6439      	str	r1, [r7, #64]	; 0x40
 8004cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	09db      	lsrs	r3, r3, #7
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d06:	2b7f      	cmp	r3, #127	; 0x7f
 8004d08:	d8f0      	bhi.n	8004cec <_VPrintTarget+0x370>
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	643a      	str	r2, [r7, #64]	; 0x40
 8004d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d18:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e00b      	b.n	8004d3c <_VPrintTarget+0x3c0>
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	1c59      	adds	r1, r3, #1
 8004d2c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	09db      	lsrs	r3, r3, #7
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d40:	d8f0      	bhi.n	8004d24 <_VPrintTarget+0x3a8>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	221a      	movs	r2, #26
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fb85 	bl	8004468 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004d64:	bf00      	nop
 8004d66:	3758      	adds	r7, #88	; 0x58
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d80:	4917      	ldr	r1, [pc, #92]	; (8004de0 <SEGGER_SYSVIEW_Init+0x74>)
 8004d82:	4818      	ldr	r0, [pc, #96]	; (8004de4 <SEGGER_SYSVIEW_Init+0x78>)
 8004d84:	f7ff f93c 	bl	8004000 <SEGGER_RTT_AllocUpBuffer>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d92:	785a      	ldrb	r2, [r3, #1]
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d9a:	7e1b      	ldrb	r3, [r3, #24]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2308      	movs	r3, #8
 8004da4:	4a11      	ldr	r2, [pc, #68]	; (8004dec <SEGGER_SYSVIEW_Init+0x80>)
 8004da6:	490f      	ldr	r1, [pc, #60]	; (8004de4 <SEGGER_SYSVIEW_Init+0x78>)
 8004da8:	f7ff f9ae 	bl	8004108 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004db2:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <SEGGER_SYSVIEW_Init+0x84>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004db8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004dba:	4a0b      	ldr	r2, [pc, #44]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004dcc:	4a06      	ldr	r2, [pc, #24]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2001970c 	.word	0x2001970c
 8004de4:	08005d60 	.word	0x08005d60
 8004de8:	2001a714 	.word	0x2001a714
 8004dec:	2001a70c 	.word	0x2001a70c
 8004df0:	e0001004 	.word	0xe0001004

08004df4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6113      	str	r3, [r2, #16]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	2001a714 	.word	0x2001a714

08004e14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e20:	f04f 0120 	mov.w	r1, #32
 8004e24:	f381 8811 	msr	BASEPRI, r1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4808      	ldr	r0, [pc, #32]	; (8004e4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e2c:	f7ff fa29 	bl	8004282 <_PreparePacket>
 8004e30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68b8      	ldr	r0, [r7, #8]
 8004e38:	f7ff fb16 	bl	8004468 <_SendPacket>
  RECORD_END();
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2001a744 	.word	0x2001a744

08004e50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e5e:	f04f 0120 	mov.w	r1, #32
 8004e62:	f381 8811 	msr	BASEPRI, r1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	4816      	ldr	r0, [pc, #88]	; (8004ec4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e6a:	f7ff fa0a 	bl	8004282 <_PreparePacket>
 8004e6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e00b      	b.n	8004e96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	61f9      	str	r1, [r7, #28]
 8004e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	09db      	lsrs	r3, r3, #7
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9a:	d8f0      	bhi.n	8004e7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	6938      	ldr	r0, [r7, #16]
 8004eb2:	f7ff fad9 	bl	8004468 <_SendPacket>
  RECORD_END();
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2001a744 	.word	0x2001a744

08004ec8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	; 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed8:	f04f 0120 	mov.w	r1, #32
 8004edc:	f381 8811 	msr	BASEPRI, r1
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	4825      	ldr	r0, [pc, #148]	; (8004f78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ee4:	f7ff f9cd 	bl	8004282 <_PreparePacket>
 8004ee8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef6:	e00b      	b.n	8004f10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	09db      	lsrs	r3, r3, #7
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b7f      	cmp	r3, #127	; 0x7f
 8004f14:	d8f0      	bhi.n	8004ef8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	e00b      	b.n	8004f48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	1c59      	adds	r1, r3, #1
 8004f38:	6279      	str	r1, [r7, #36]	; 0x24
 8004f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	09db      	lsrs	r3, r3, #7
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4c:	d8f0      	bhi.n	8004f30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	627a      	str	r2, [r7, #36]	; 0x24
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	6979      	ldr	r1, [r7, #20]
 8004f62:	69b8      	ldr	r0, [r7, #24]
 8004f64:	f7ff fa80 	bl	8004468 <_SendPacket>
  RECORD_END();
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
 8004f70:	3730      	adds	r7, #48	; 0x30
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	2001a744 	.word	0x2001a744

08004f7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f82:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f88:	f3ef 8311 	mrs	r3, BASEPRI
 8004f8c:	f04f 0120 	mov.w	r1, #32
 8004f90:	f381 8811 	msr	BASEPRI, r1
 8004f94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f96:	4b54      	ldr	r3, [pc, #336]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	220a      	movs	r2, #10
 8004f9c:	4953      	ldr	r1, [pc, #332]	; (80050ec <SEGGER_SYSVIEW_Start+0x170>)
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb f916 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004faa:	f7fe fcfd 	bl	80039a8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fae:	200a      	movs	r0, #10
 8004fb0:	f7ff ff30 	bl	8004e14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb8:	f04f 0120 	mov.w	r1, #32
 8004fbc:	f381 8811 	msr	BASEPRI, r1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	484b      	ldr	r0, [pc, #300]	; (80050f0 <SEGGER_SYSVIEW_Start+0x174>)
 8004fc4:	f7ff f95d 	bl	8004282 <_PreparePacket>
 8004fc8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_Start+0x76>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_Start+0x5e>
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	e00b      	b.n	800502c <SEGGER_SYSVIEW_Start+0xb0>
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	6279      	str	r1, [r7, #36]	; 0x24
 800501e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	09db      	lsrs	r3, r3, #7
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2b7f      	cmp	r3, #127	; 0x7f
 8005030:	d8f0      	bhi.n	8005014 <SEGGER_SYSVIEW_Start+0x98>
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	627a      	str	r2, [r7, #36]	; 0x24
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_Start+0xea>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	61f9      	str	r1, [r7, #28]
 8005058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b7f      	cmp	r3, #127	; 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_Start+0xd2>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	e00b      	b.n	800509e <SEGGER_SYSVIEW_Start+0x122>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6179      	str	r1, [r7, #20]
 8005090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	09db      	lsrs	r3, r3, #7
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b7f      	cmp	r3, #127	; 0x7f
 80050a2:	d8f0      	bhi.n	8005086 <SEGGER_SYSVIEW_Start+0x10a>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	617a      	str	r2, [r7, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050b4:	2218      	movs	r2, #24
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff f9d5 	bl	8004468 <_SendPacket>
      RECORD_END();
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050d2:	f000 f9eb 	bl	80054ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050d6:	f000 f9b1 	bl	800543c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050da:	f000 fc73 	bl	80059c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050de:	bf00      	nop
 80050e0:	3730      	adds	r7, #48	; 0x30
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	2001a714 	.word	0x2001a714
 80050ec:	08005d8c 	.word	0x08005d8c
 80050f0:	2001a744 	.word	0x2001a744

080050f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	f04f 0120 	mov.w	r1, #32
 8005102:	f381 8811 	msr	BASEPRI, r1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	480b      	ldr	r0, [pc, #44]	; (8005138 <SEGGER_SYSVIEW_Stop+0x44>)
 800510a:	f7ff f8ba 	bl	8004282 <_PreparePacket>
 800510e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <SEGGER_SYSVIEW_Stop+0x48>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005118:	220b      	movs	r2, #11
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6838      	ldr	r0, [r7, #0]
 800511e:	f7ff f9a3 	bl	8004468 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <SEGGER_SYSVIEW_Stop+0x48>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2001a744 	.word	0x2001a744
 800513c:	2001a714 	.word	0x2001a714

08005140 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005146:	f3ef 8311 	mrs	r3, BASEPRI
 800514a:	f04f 0120 	mov.w	r1, #32
 800514e:	f381 8811 	msr	BASEPRI, r1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	4845      	ldr	r0, [pc, #276]	; (800526c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005156:	f7ff f894 	bl	8004282 <_PreparePacket>
 800515a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005164:	4b42      	ldr	r3, [pc, #264]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
 800516a:	e00b      	b.n	8005184 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	09db      	lsrs	r3, r3, #7
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b7f      	cmp	r3, #127	; 0x7f
 8005188:	d8f0      	bhi.n	800516c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	6279      	str	r1, [r7, #36]	; 0x24
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	627a      	str	r2, [r7, #36]	; 0x24
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e00b      	b.n	80051f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	61f9      	str	r1, [r7, #28]
 80051ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b7f      	cmp	r3, #127	; 0x7f
 80051fc:	d8f0      	bhi.n	80051e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	61fa      	str	r2, [r7, #28]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e00b      	b.n	8005230 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	6179      	str	r1, [r7, #20]
 8005222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b7f      	cmp	r3, #127	; 0x7f
 8005234:	d8f0      	bhi.n	8005218 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	617a      	str	r2, [r7, #20]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005246:	2218      	movs	r2, #24
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	68b8      	ldr	r0, [r7, #8]
 800524c:	f7ff f90c 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	4798      	blx	r3
  }
}
 8005264:	bf00      	nop
 8005266:	3730      	adds	r7, #48	; 0x30
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	2001a744 	.word	0x2001a744
 8005270:	2001a714 	.word	0x2001a714

08005274 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b092      	sub	sp, #72	; 0x48
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800527c:	f3ef 8311 	mrs	r3, BASEPRI
 8005280:	f04f 0120 	mov.w	r1, #32
 8005284:	f381 8811 	msr	BASEPRI, r1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	486a      	ldr	r0, [pc, #424]	; (8005434 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800528c:	f7fe fff9 	bl	8004282 <_PreparePacket>
 8005290:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b66      	ldr	r3, [pc, #408]	; (8005438 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	6479      	str	r1, [r7, #68]	; 0x44
 80052b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	647a      	str	r2, [r7, #68]	; 0x44
 80052cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e0:	e00b      	b.n	80052fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e8:	1c59      	adds	r1, r3, #1
 80052ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	09db      	lsrs	r3, r3, #7
 80052f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2b7f      	cmp	r3, #127	; 0x7f
 80052fe:	d8f0      	bhi.n	80052e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	4619      	mov	r1, r3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fe ff65 	bl	80041e8 <_EncodeStr>
 800531e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005320:	2209      	movs	r2, #9
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	6938      	ldr	r0, [r7, #16]
 8005326:	f7ff f89f 	bl	8004468 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b40      	ldr	r3, [pc, #256]	; (8005438 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
 800533e:	e00b      	b.n	8005358 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6379      	str	r1, [r7, #52]	; 0x34
 800534a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2b7f      	cmp	r3, #127	; 0x7f
 800535c:	d8f0      	bhi.n	8005340 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	637a      	str	r2, [r7, #52]	; 0x34
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	e00b      	b.n	8005392 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	b2da      	uxtb	r2, r3
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	09db      	lsrs	r3, r3, #7
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b7f      	cmp	r3, #127	; 0x7f
 8005396:	d8f0      	bhi.n	800537a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e00b      	b.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	6279      	str	r1, [r7, #36]	; 0x24
 80053be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	09db      	lsrs	r3, r3, #7
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d8f0      	bhi.n	80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	627a      	str	r2, [r7, #36]	; 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e00b      	b.n	8005404 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	61f9      	str	r1, [r7, #28]
 80053f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b7f      	cmp	r3, #127	; 0x7f
 8005408:	d8f0      	bhi.n	80053ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800541a:	2215      	movs	r2, #21
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f7ff f822 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f383 8811 	msr	BASEPRI, r3
}
 800542a:	bf00      	nop
 800542c:	3748      	adds	r7, #72	; 0x48
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2001a744 	.word	0x2001a744
 8005438:	2001a714 	.word	0x2001a714

0800543c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005452:	4b03      	ldr	r3, [pc, #12]	; (8005460 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4798      	blx	r3
  }
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2001a714 	.word	0x2001a714

08005464 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800546c:	f3ef 8311 	mrs	r3, BASEPRI
 8005470:	f04f 0120 	mov.w	r1, #32
 8005474:	f381 8811 	msr	BASEPRI, r1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	480b      	ldr	r0, [pc, #44]	; (80054a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800547c:	f7fe ff01 	bl	8004282 <_PreparePacket>
 8005480:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	6938      	ldr	r0, [r7, #16]
 8005488:	f7fe feae 	bl	80041e8 <_EncodeStr>
 800548c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800548e:	220e      	movs	r2, #14
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f7fe ffe8 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2001a744 	.word	0x2001a744

080054ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01a      	beq.n	80054f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4798      	blx	r3
 80054cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	000a      	movs	r2, r1
 80054e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054e2:	4613      	mov	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	200d      	movs	r0, #13
 80054ea:	f7ff fced 	bl	8004ec8 <SEGGER_SYSVIEW_RecordU32x2>
 80054ee:	e006      	b.n	80054fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	200c      	movs	r0, #12
 80054f8:	f7ff fcaa 	bl	8004e50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	bf00      	nop
 8005508:	2001a714 	.word	0x2001a714
 800550c:	e0001004 	.word	0xe0001004

08005510 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005516:	f3ef 8311 	mrs	r3, BASEPRI
 800551a:	f04f 0120 	mov.w	r1, #32
 800551e:	f381 8811 	msr	BASEPRI, r1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	4819      	ldr	r0, [pc, #100]	; (800558c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005526:	f7fe feac 	bl	8004282 <_PreparePacket>
 800552a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005538:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	e00b      	b.n	800555c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	6179      	str	r1, [r7, #20]
 800554e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	09db      	lsrs	r3, r3, #7
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b7f      	cmp	r3, #127	; 0x7f
 8005560:	d8f0      	bhi.n	8005544 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	617a      	str	r2, [r7, #20]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005572:	2202      	movs	r2, #2
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	68b8      	ldr	r0, [r7, #8]
 8005578:	f7fe ff76 	bl	8004468 <_SendPacket>
  RECORD_END();
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f383 8811 	msr	BASEPRI, r3
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2001a744 	.word	0x2001a744
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800559a:	f3ef 8311 	mrs	r3, BASEPRI
 800559e:	f04f 0120 	mov.w	r1, #32
 80055a2:	f381 8811 	msr	BASEPRI, r1
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	4807      	ldr	r0, [pc, #28]	; (80055c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055aa:	f7fe fe6a 	bl	8004282 <_PreparePacket>
 80055ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055b0:	2203      	movs	r2, #3
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6838      	ldr	r0, [r7, #0]
 80055b6:	f7fe ff57 	bl	8004468 <_SendPacket>
  RECORD_END();
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f383 8811 	msr	BASEPRI, r3
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	2001a744 	.word	0x2001a744

080055cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055d2:	f3ef 8311 	mrs	r3, BASEPRI
 80055d6:	f04f 0120 	mov.w	r1, #32
 80055da:	f381 8811 	msr	BASEPRI, r1
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	4807      	ldr	r0, [pc, #28]	; (8005600 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055e2:	f7fe fe4e 	bl	8004282 <_PreparePacket>
 80055e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055e8:	2212      	movs	r2, #18
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6838      	ldr	r0, [r7, #0]
 80055ee:	f7fe ff3b 	bl	8004468 <_SendPacket>
  RECORD_END();
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f383 8811 	msr	BASEPRI, r3
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	2001a744 	.word	0x2001a744

08005604 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800560a:	f3ef 8311 	mrs	r3, BASEPRI
 800560e:	f04f 0120 	mov.w	r1, #32
 8005612:	f381 8811 	msr	BASEPRI, r1
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	4807      	ldr	r0, [pc, #28]	; (8005638 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800561a:	f7fe fe32 	bl	8004282 <_PreparePacket>
 800561e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005620:	2211      	movs	r2, #17
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6838      	ldr	r0, [r7, #0]
 8005626:	f7fe ff1f 	bl	8004468 <_SendPacket>
  RECORD_END();
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f383 8811 	msr	BASEPRI, r3
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2001a744 	.word	0x2001a744

0800563c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005644:	f3ef 8311 	mrs	r3, BASEPRI
 8005648:	f04f 0120 	mov.w	r1, #32
 800564c:	f381 8811 	msr	BASEPRI, r1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	4819      	ldr	r0, [pc, #100]	; (80056b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005654:	f7fe fe15 	bl	8004282 <_PreparePacket>
 8005658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	61f9      	str	r1, [r7, #28]
 800567c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b7f      	cmp	r3, #127	; 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056a0:	2208      	movs	r2, #8
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6938      	ldr	r0, [r7, #16]
 80056a6:	f7fe fedf 	bl	8004468 <_SendPacket>
  RECORD_END();
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f383 8811 	msr	BASEPRI, r3
}
 80056b0:	bf00      	nop
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	2001a744 	.word	0x2001a744
 80056bc:	2001a714 	.word	0x2001a714

080056c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c8:	f3ef 8311 	mrs	r3, BASEPRI
 80056cc:	f04f 0120 	mov.w	r1, #32
 80056d0:	f381 8811 	msr	BASEPRI, r1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4819      	ldr	r0, [pc, #100]	; (800573c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056d8:	f7fe fdd3 	bl	8004282 <_PreparePacket>
 80056dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	61f9      	str	r1, [r7, #28]
 8005700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b7f      	cmp	r3, #127	; 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005724:	2204      	movs	r2, #4
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	6938      	ldr	r0, [r7, #16]
 800572a:	f7fe fe9d 	bl	8004468 <_SendPacket>
  RECORD_END();
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2001a744 	.word	0x2001a744
 8005740:	2001a714 	.word	0x2001a714

08005744 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800574c:	f3ef 8311 	mrs	r3, BASEPRI
 8005750:	f04f 0120 	mov.w	r1, #32
 8005754:	f381 8811 	msr	BASEPRI, r1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	4819      	ldr	r0, [pc, #100]	; (80057c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800575c:	f7fe fd91 	bl	8004282 <_PreparePacket>
 8005760:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005766:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e00b      	b.n	8005792 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	61f9      	str	r1, [r7, #28]
 8005784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b7f      	cmp	r3, #127	; 0x7f
 8005796:	d8f0      	bhi.n	800577a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	61fa      	str	r2, [r7, #28]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057a8:	2206      	movs	r2, #6
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f7fe fe5b 	bl	8004468 <_SendPacket>
  RECORD_END();
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f383 8811 	msr	BASEPRI, r3
}
 80057b8:	bf00      	nop
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	2001a744 	.word	0x2001a744
 80057c4:	2001a714 	.word	0x2001a714

080057c8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057d2:	f3ef 8311 	mrs	r3, BASEPRI
 80057d6:	f04f 0120 	mov.w	r1, #32
 80057da:	f381 8811 	msr	BASEPRI, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	4827      	ldr	r0, [pc, #156]	; (8005880 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057e2:	f7fe fd4e 	bl	8004282 <_PreparePacket>
 80057e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	6279      	str	r1, [r7, #36]	; 0x24
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	627a      	str	r2, [r7, #36]	; 0x24
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e00b      	b.n	8005850 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	61f9      	str	r1, [r7, #28]
 8005842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b7f      	cmp	r3, #127	; 0x7f
 8005854:	d8f0      	bhi.n	8005838 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005866:	2207      	movs	r2, #7
 8005868:	68f9      	ldr	r1, [r7, #12]
 800586a:	6938      	ldr	r0, [r7, #16]
 800586c:	f7fe fdfc 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f383 8811 	msr	BASEPRI, r3
}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2001a744 	.word	0x2001a744
 8005884:	2001a714 	.word	0x2001a714

08005888 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	; 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d06d      	beq.n	8005976 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058a0:	2300      	movs	r3, #0
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a4:	e008      	b.n	80058b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	3301      	adds	r3, #1
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3f2      	bcc.n	80058a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058c0:	e000      	b.n	80058c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d055      	beq.n	8005976 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ca:	f3ef 8311 	mrs	r3, BASEPRI
 80058ce:	f04f 0120 	mov.w	r1, #32
 80058d2:	f381 8811 	msr	BASEPRI, r1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	482a      	ldr	r0, [pc, #168]	; (8005984 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058da:	f7fe fcd2 	bl	8004282 <_PreparePacket>
 80058de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	6279      	str	r1, [r7, #36]	; 0x24
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	623b      	str	r3, [r7, #32]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_SendModule+0x66>
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	627a      	str	r2, [r7, #36]	; 0x24
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e00b      	b.n	8005940 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	61f9      	str	r1, [r7, #28]
 8005932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	09db      	lsrs	r3, r3, #7
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b7f      	cmp	r3, #127	; 0x7f
 8005944:	d8f0      	bhi.n	8005928 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	61fa      	str	r2, [r7, #28]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fe fc42 	bl	80041e8 <_EncodeStr>
 8005964:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005966:	2216      	movs	r2, #22
 8005968:	68f9      	ldr	r1, [r7, #12]
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f7fe fd7c 	bl	8004468 <_SendPacket>
      RECORD_END();
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005976:	bf00      	nop
 8005978:	3730      	adds	r7, #48	; 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2001a73c 	.word	0x2001a73c
 8005984:	2001a744 	.word	0x2001a744

08005988 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00f      	beq.n	80059b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f2      	bne.n	800599c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2001a73c 	.word	0x2001a73c

080059c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059ca:	f3ef 8311 	mrs	r3, BASEPRI
 80059ce:	f04f 0120 	mov.w	r1, #32
 80059d2:	f381 8811 	msr	BASEPRI, r1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	4817      	ldr	r0, [pc, #92]	; (8005a38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059da:	f7fe fc52 	bl	8004282 <_PreparePacket>
 80059de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e00b      	b.n	8005a08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	6179      	str	r1, [r7, #20]
 80059fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	09db      	lsrs	r3, r3, #7
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0c:	d8f0      	bhi.n	80059f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	617a      	str	r2, [r7, #20]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a1e:	221b      	movs	r2, #27
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68b8      	ldr	r0, [r7, #8]
 8005a24:	f7fe fd20 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	2001a744 	.word	0x2001a744
 8005a3c:	2001a740 	.word	0x2001a740

08005a40 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a40:	b40f      	push	{r0, r1, r2, r3}
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	461a      	mov	r2, r3
 8005a52:	2100      	movs	r1, #0
 8005a54:	6938      	ldr	r0, [r7, #16]
 8005a56:	f7fe ff91 	bl	800497c <_VPrintTarget>
  va_end(ParamList);
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr

08005a68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a70:	f3ef 8311 	mrs	r3, BASEPRI
 8005a74:	f04f 0120 	mov.w	r1, #32
 8005a78:	f381 8811 	msr	BASEPRI, r1
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	4827      	ldr	r0, [pc, #156]	; (8005b1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a80:	f7fe fbff 	bl	8004282 <_PreparePacket>
 8005a84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	6938      	ldr	r0, [r7, #16]
 8005a8c:	f7fe fbac 	bl	80041e8 <_EncodeStr>
 8005a90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	2301      	movs	r3, #1
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	e00b      	b.n	8005ab4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	6279      	str	r1, [r7, #36]	; 0x24
 8005aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab8:	d8f0      	bhi.n	8005a9c <SEGGER_SYSVIEW_Warn+0x34>
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_Warn+0x84>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	61f9      	str	r1, [r7, #28]
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	61fa      	str	r2, [r7, #28]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b02:	221a      	movs	r2, #26
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f7fe fcae 	bl	8004468 <_SendPacket>
  RECORD_END();
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f383 8811 	msr	BASEPRI, r3
}
 8005b12:	bf00      	nop
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	2001a744 	.word	0x2001a744

08005b20 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b26:	7e1b      	ldrb	r3, [r3, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	336c      	adds	r3, #108	; 0x6c
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b3c:	7e1b      	ldrb	r3, [r3, #24]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	490d      	ldr	r1, [pc, #52]	; (8005b78 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b42:	4603      	mov	r3, r0
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4403      	add	r3, r0
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3370      	adds	r3, #112	; 0x70
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d00b      	beq.n	8005b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b56:	789b      	ldrb	r3, [r3, #2]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b62:	f7fe fb9b 	bl	800429c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	2001a714 	.word	0x2001a714
 8005b78:	20019254 	.word	0x20019254

08005b7c <__libc_init_array>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4d0d      	ldr	r5, [pc, #52]	; (8005bb4 <__libc_init_array+0x38>)
 8005b80:	4c0d      	ldr	r4, [pc, #52]	; (8005bb8 <__libc_init_array+0x3c>)
 8005b82:	1b64      	subs	r4, r4, r5
 8005b84:	10a4      	asrs	r4, r4, #2
 8005b86:	2600      	movs	r6, #0
 8005b88:	42a6      	cmp	r6, r4
 8005b8a:	d109      	bne.n	8005ba0 <__libc_init_array+0x24>
 8005b8c:	4d0b      	ldr	r5, [pc, #44]	; (8005bbc <__libc_init_array+0x40>)
 8005b8e:	4c0c      	ldr	r4, [pc, #48]	; (8005bc0 <__libc_init_array+0x44>)
 8005b90:	f000 f83e 	bl	8005c10 <_init>
 8005b94:	1b64      	subs	r4, r4, r5
 8005b96:	10a4      	asrs	r4, r4, #2
 8005b98:	2600      	movs	r6, #0
 8005b9a:	42a6      	cmp	r6, r4
 8005b9c:	d105      	bne.n	8005baa <__libc_init_array+0x2e>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba4:	4798      	blx	r3
 8005ba6:	3601      	adds	r6, #1
 8005ba8:	e7ee      	b.n	8005b88 <__libc_init_array+0xc>
 8005baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bae:	4798      	blx	r3
 8005bb0:	3601      	adds	r6, #1
 8005bb2:	e7f2      	b.n	8005b9a <__libc_init_array+0x1e>
 8005bb4:	08005db0 	.word	0x08005db0
 8005bb8:	08005db0 	.word	0x08005db0
 8005bbc:	08005db0 	.word	0x08005db0
 8005bc0:	08005db4 	.word	0x08005db4

08005bc4 <memcmp>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	3901      	subs	r1, #1
 8005bc8:	4402      	add	r2, r0
 8005bca:	4290      	cmp	r0, r2
 8005bcc:	d101      	bne.n	8005bd2 <memcmp+0xe>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e005      	b.n	8005bde <memcmp+0x1a>
 8005bd2:	7803      	ldrb	r3, [r0, #0]
 8005bd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d001      	beq.n	8005be0 <memcmp+0x1c>
 8005bdc:	1b18      	subs	r0, r3, r4
 8005bde:	bd10      	pop	{r4, pc}
 8005be0:	3001      	adds	r0, #1
 8005be2:	e7f2      	b.n	8005bca <memcmp+0x6>

08005be4 <memcpy>:
 8005be4:	440a      	add	r2, r1
 8005be6:	4291      	cmp	r1, r2
 8005be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bec:	d100      	bne.n	8005bf0 <memcpy+0xc>
 8005bee:	4770      	bx	lr
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	d1f9      	bne.n	8005bf2 <memcpy+0xe>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <memset>:
 8005c00:	4402      	add	r2, r0
 8005c02:	4603      	mov	r3, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
