
001_FreeRTOS_SystemView_Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f6c  08005f6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001a828  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a8a0  2001a8a0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121b0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a20  00000000  00000000  00032258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00034c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023703  00000000  00000000  00036d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013396  00000000  00000000  0005a463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69df  00000000  00000000  0006d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001441d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b40  00000000  00000000  00144228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dc4 	.word	0x08005dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005dc4 	.word	0x08005dc4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192b8 	.word	0x200192b8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb81 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f851 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8b9 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

 // SEGGER_UART_init(500000);

  SEGGER_SYSVIEW_Conf();
 8000632:	f002 ff67 	bl	8003504 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000636:	f004 f987 	bl	8004948 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x98>)
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4919      	ldr	r1, [pc, #100]	; (80006b0 <main+0x9c>)
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	f001 fe5f 	bl	800230e <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0xa4>)
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	4910      	ldr	r1, [pc, #64]	; (80006bc <main+0xa8>)
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	f001 fe46 	bl	800230e <xTaskCreate>
 8000682:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00a      	beq.n	80006a0 <main+0x8c>
        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	60fb      	str	r3, [r7, #12]
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <main+0x8a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a0:	f001 ff8a 	bl	80025b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x90>
 80006a6:	bf00      	nop
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	08005ddc 	.word	0x08005ddc
 80006b0:	08005df4 	.word	0x08005df4
 80006b4:	08000a55 	.word	0x08000a55
 80006b8:	08005dfc 	.word	0x08005dfc
 80006bc:	08005e14 	.word	0x08005e14
 80006c0:	08000a9d 	.word	0x08000a9d

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 feec 	bl	80054b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe01 	bl	8001350 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9dc 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f862 	bl	8001840 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9c5 	bl	8000b10 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fd44 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fd3f 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fd39 	bl	80012e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	486c      	ldr	r0, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800088e:	f000 fb8f 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fb81 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008ca:	f000 fb71 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fb64 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb54 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000924:	f000 fb44 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800093c:	f000 fb38 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800095e:	f000 fb27 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fb18 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 800099e:	f000 fb07 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fafa 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fae9 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 80009f2:	f000 fadd 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a14:	f000 facc 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 8000a2e:	f000 fabf 	bl	8000fb0 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <task1_handler+0x3c>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f004 fd2b 	bl	80054c0 <sniprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <task1_handler+0x40>)
 8000a70:	f000 fc53 	bl	800131a <HAL_GPIO_TogglePin>
		//printf("Task 1 is running\n");
	    //HAL_Delay(500);
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fc67 	bl	800534c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <task1_handler+0x44>)
 8000a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a8e:	e7e5      	b.n	8000a5c <task1_handler+0x8>
 8000a90:	08005e1c 	.word	0x08005e1c
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	e000ed04 	.word	0xe000ed04

08000a9c <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	; 0x70
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000aa4:	f107 000c 	add.w	r0, r7, #12
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <task2_handler+0x44>)
 8000aac:	2164      	movs	r1, #100	; 0x64
 8000aae:	f004 fd07 	bl	80054c0 <sniprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <task2_handler+0x48>)
 8000ab8:	f000 fc2f 	bl	800131a <HAL_GPIO_TogglePin>
		//printf("Task 2 is Running\n");
		HAL_Delay(500);
 8000abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac0:	f000 f970 	bl	8000da4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fc3f 	bl	800534c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <task2_handler+0x4c>)
 8000ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ade:	e7e1      	b.n	8000aa4 <task2_handler+0x8>
 8000ae0:	08005e1c 	.word	0x08005e1c
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 f931 	bl	8000d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40001000 	.word	0x40001000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b5e:	f002 f91b 	bl	8002d98 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_InitTick+0xe4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 0210 	add.w	r2, r7, #16
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f856 	bl	8001c58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb6:	f001 f83b 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8000bba:	6378      	str	r0, [r7, #52]	; 0x34
 8000bbc:	e004      	b.n	8000bc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bbe:	f001 f837 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <HAL_InitTick+0xe8>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_InitTick+0xec>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <HAL_InitTick+0xf0>)
 8000bda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_InitTick+0xec>)
 8000bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_InitTick+0xec>)
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_InitTick+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_InitTick+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_InitTick+0xec>)
 8000bfe:	f001 f85d 	bl	8001cbc <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d11b      	bne.n	8000c48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <HAL_InitTick+0xec>)
 8000c12:	f001 f8ad 	bl	8001d70 <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c24:	2036      	movs	r0, #54	; 0x36
 8000c26:	f000 f9b5 	bl	8000f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d808      	bhi.n	8000c42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2036      	movs	r0, #54	; 0x36
 8000c36:	f000 f991 	bl	8000f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0xf4>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e002      	b.n	8000c48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3738      	adds	r7, #56	; 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20000094 	.word	0x20000094
 8000c60:	40001000 	.word	0x40001000
 8000c64:	20000004 	.word	0x20000004

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM6_DAC_IRQHandler+0x10>)
 8000c9a:	f001 f8d9 	bl	8001e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000094 	.word	0x20000094

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	; (8000d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf6:	f7ff ffd7 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f004 fb97 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fc89 	bl	8000614 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d10:	08005f74 	.word	0x08005f74
  ldr r2, =_sbss
 8000d14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d18:	2001a8a0 	.word	0x2001a8a0

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f8fc 	bl	8000f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f7ff ff0e 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fee4 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200000dc 	.word	0x200000dc

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200000dc 	.word	0x200000dc

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff4c 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff61 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ffb1 	bl	8000ee0 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff80 	bl	8000e8c <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e16b      	b.n	80012a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 815a 	bne.w	800129e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80b4 	beq.w	800129e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_GPIO_Init+0x30c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <HAL_GPIO_Init+0x310>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x314>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x318>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x31c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x320>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x324>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x328>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x20e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x20a>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x310>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_GPIO_Init+0x334>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae90 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	041a      	lsls	r2, r3, #16
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43d9      	mvns	r1, r3
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	400b      	ands	r3, r1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e267      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d075      	beq.n	800145a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	4b88      	ldr	r3, [pc, #544]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b04      	cmp	r3, #4
 8001378:	d00c      	beq.n	8001394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4b85      	ldr	r3, [pc, #532]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	2b08      	cmp	r3, #8
 8001384:	d112      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4b82      	ldr	r3, [pc, #520]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001392:	d10b      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d05b      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d157      	bne.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e242      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x74>
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6c      	ldr	r2, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a68      	ldr	r2, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a65      	ldr	r2, [pc, #404]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcc0 	bl	8000d8c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fcbc 	bl	8000d8c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e207      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xc0>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fcac 	bl	8000d8c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fca8 	bl	8000d8c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1f3      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	4b51      	ldr	r3, [pc, #324]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d063      	beq.n	800152e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00b      	beq.n	800148a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d116      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e1c7      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4937      	ldr	r1, [pc, #220]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	e03a      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x244>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fc61 	bl	8000d8c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc5d 	bl	8000d8c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1a8      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4925      	ldr	r1, [pc, #148]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x244>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc40 	bl	8000d8c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fc3c 	bl	8000d8c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e187      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d036      	beq.n	80015a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d016      	beq.n	8001570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_RCC_OscConfig+0x248>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fc20 	bl	8000d8c <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fc1c 	bl	8000d8c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e167      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x240>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x200>
 800156e:	e01b      	b.n	80015a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_OscConfig+0x248>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fc09 	bl	8000d8c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	e00e      	b.n	800159c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fc05 	bl	8000d8c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d907      	bls.n	800159c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e150      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
 8001590:	40023800 	.word	0x40023800
 8001594:	42470000 	.word	0x42470000
 8001598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1ea      	bne.n	800157e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8097 	beq.w	80016e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b7d      	ldr	r3, [pc, #500]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a7c      	ldr	r2, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b7a      	ldr	r3, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x474>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <HAL_RCC_OscConfig+0x474>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a73      	ldr	r2, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x474>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbc5 	bl	8000d8c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fbc1 	bl	8000d8c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e10c      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x474>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x2ea>
 800162c:	4b64      	ldr	r3, [pc, #400]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a63      	ldr	r2, [pc, #396]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	e01c      	b.n	8001674 <HAL_RCC_OscConfig+0x324>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x30c>
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x324>
 800165c:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	4a54      	ldr	r2, [pc, #336]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d015      	beq.n	80016a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fb86 	bl	8000d8c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	e00a      	b.n	800169a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f7ff fb82 	bl	8000d8c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0cb      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ee      	beq.n	8001684 <HAL_RCC_OscConfig+0x334>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fb70 	bl	8000d8c <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fb6c 	bl	8000d8c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0b5      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ee      	bne.n	80016b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a1 	beq.w	8001830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d05c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d141      	bne.n	8001786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x478>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fb40 	bl	8000d8c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fb3c 	bl	8000d8c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e087      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	3b01      	subs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x478>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fb15 	bl	8000d8c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fb11 	bl	8000d8c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e05c      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x416>
 8001784:	e054      	b.n	8001830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_RCC_OscConfig+0x478>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fafe 	bl	8000d8c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fafa 	bl	8000d8c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e045      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x470>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x444>
 80017b2:	e03d      	b.n	8001830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e038      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000
 80017c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d028      	beq.n	800182c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d121      	bne.n	800182c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d11a      	bne.n	800182c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001804:	4293      	cmp	r3, r2
 8001806:	d111      	bne.n	800182c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	3b01      	subs	r3, #1
 8001816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0cc      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90c      	bls.n	800187c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d044      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4934      	ldr	r1, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff fa2c 	bl	8000d8c <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff fa28 	bl	8000d8c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d20c      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f8c2 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08005ef4 	.word	0x08005ef4
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a10:	b094      	sub	sp, #80	; 0x50
 8001a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d00d      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	f200 80e1 	bhi.w	8001bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3e:	e0db      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a44:	e0db      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a46:	4b73      	ldr	r3, [pc, #460]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a4a:	e0d8      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a7e:	4622      	mov	r2, r4
 8001a80:	462b      	mov	r3, r5
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	0159      	lsls	r1, r3, #5
 8001a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a90:	0150      	lsls	r0, r2, #5
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4621      	mov	r1, r4
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	6139      	str	r1, [r7, #16]
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab0:	4659      	mov	r1, fp
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	4651      	mov	r1, sl
 8001ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aba:	4651      	mov	r1, sl
 8001abc:	018a      	lsls	r2, r1, #6
 8001abe:	4651      	mov	r1, sl
 8001ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac4:	4659      	mov	r1, fp
 8001ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ade:	4690      	mov	r8, r2
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	eb18 0303 	adds.w	r3, r8, r3
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	462b      	mov	r3, r5
 8001aec:	eb49 0303 	adc.w	r3, r9, r3
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001afe:	4629      	mov	r1, r5
 8001b00:	024b      	lsls	r3, r1, #9
 8001b02:	4621      	mov	r1, r4
 8001b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b08:	4621      	mov	r1, r4
 8001b0a:	024a      	lsls	r2, r1, #9
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	2200      	movs	r2, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b1c:	f7fe fbf8 	bl	8000310 <__aeabi_uldivmod>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4613      	mov	r3, r2
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	2200      	movs	r2, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	4611      	mov	r1, r2
 8001b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b44:	4642      	mov	r2, r8
 8001b46:	464b      	mov	r3, r9
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	0159      	lsls	r1, r3, #5
 8001b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b56:	0150      	lsls	r0, r2, #5
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4641      	mov	r1, r8
 8001b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b62:	4649      	mov	r1, r9
 8001b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b80:	eb63 050b 	sbc.w	r5, r3, fp
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	00eb      	lsls	r3, r5, #3
 8001b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b92:	00e2      	lsls	r2, r4, #3
 8001b94:	4614      	mov	r4, r2
 8001b96:	461d      	mov	r5, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	18e3      	adds	r3, r4, r3
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	eb45 0303 	adc.w	r3, r5, r3
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	028b      	lsls	r3, r1, #10
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	028a      	lsls	r2, r1, #10
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	61fa      	str	r2, [r7, #28]
 8001bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd0:	f7fe fb9e 	bl	8000310 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf6:	e002      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3750      	adds	r7, #80	; 0x50
 8001c04:	46bd      	mov	sp, r7
 8001c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08005f04 	.word	0x08005f04

08001c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	220f      	movs	r2, #15
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_RCC_GetClockConfig+0x60>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0207 	and.w	r2, r3, #7
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e041      	b.n	8001d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f839 	bl	8001d5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f000 f9d8 	bl	80020b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d001      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e04e      	b.n	8001e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d022      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d01d      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d018      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00e      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d111      	bne.n	8001e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d010      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e12:	e007      	b.n	8001e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40000800 	.word	0x40000800
 8001e40:	40000c00 	.word	0x40000c00
 8001e44:	40010400 	.word	0x40010400
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40001800 	.word	0x40001800

08001e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d122      	bne.n	8001eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d11b      	bne.n	8001eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0202 	mvn.w	r2, #2
 8001e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8ee 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8e0 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8f1 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d122      	bne.n	8001f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d11b      	bne.n	8001f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0204 	mvn.w	r2, #4
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8c4 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8b6 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f8c7 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0208 	mvn.w	r2, #8
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f89a 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f88c 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f89d 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f870 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f862 	bl	8002060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f873 	bl	8002088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0201 	mvn.w	r2, #1
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fd8c 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f902 	bl	8002204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f838 	bl	800209c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b20      	cmp	r3, #32
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b20      	cmp	r3, #32
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0220 	mvn.w	r2, #32
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8cc 	bl	80021f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d00f      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <TIM_Base_SetConfig+0x118>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <TIM_Base_SetConfig+0x11c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3b      	ldr	r2, [pc, #236]	; (80021d0 <TIM_Base_SetConfig+0x120>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d108      	bne.n	8002102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d027      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <TIM_Base_SetConfig+0x118>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d023      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <TIM_Base_SetConfig+0x11c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <TIM_Base_SetConfig+0x120>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d017      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <TIM_Base_SetConfig+0x128>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <TIM_Base_SetConfig+0x12c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00f      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <TIM_Base_SetConfig+0x130>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <TIM_Base_SetConfig+0x134>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <TIM_Base_SetConfig+0x138>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <TIM_Base_SetConfig+0x13c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d108      	bne.n	8002174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <TIM_Base_SetConfig+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0xf8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <TIM_Base_SetConfig+0x124>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40010400 	.word	0x40010400
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40014400 	.word	0x40014400
 80021e0:	40014800 	.word	0x40014800
 80021e4:	40001800 	.word	0x40001800
 80021e8:	40001c00 	.word	0x40001c00
 80021ec:	40002000 	.word	0x40002000

080021f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f103 0208 	add.w	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 0208 	add.w	r2, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0208 	add.w	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6852      	ldr	r2, [r2, #4]
 80022da:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d103      	bne.n	80022ee <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800230e:	b580      	push	{r7, lr}
 8002310:	b08c      	sub	sp, #48	; 0x30
 8002312:	af04      	add	r7, sp, #16
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fee2 	bl	80030ec <pvPortMalloc>
 8002328:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002330:	2058      	movs	r0, #88	; 0x58
 8002332:	f000 fedb 	bl	80030ec <pvPortMalloc>
 8002336:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
 8002344:	e005      	b.n	8002352 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f000 ffb0 	bl	80032ac <vPortFree>
 800234c:	e001      	b.n	8002352 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	2300      	movs	r3, #0
 800235c:	9303      	str	r3, [sp, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f80e 	bl	8002390 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002374:	69f8      	ldr	r0, [r7, #28]
 8002376:	f000 f8a1 	bl	80024bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e002      	b.n	8002386 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
 8002384:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002386:	69bb      	ldr	r3, [r7, #24]
    }
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	21a5      	movs	r1, #165	; 0xa5
 80023aa:	f003 f881 	bl	80054b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	3b01      	subs	r3, #1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80023d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	617b      	str	r3, [r7, #20]
    }
 80023e4:	bf00      	nop
 80023e6:	e7fe      	b.n	80023e6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01f      	beq.n	800242e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e012      	b.n	800241a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	7819      	ldrb	r1, [r3, #0]
 80023fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	3334      	adds	r3, #52	; 0x34
 8002404:	460a      	mov	r2, r1
 8002406:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b09      	cmp	r3, #9
 800241e:	d9e9      	bls.n	80023f4 <prvInitialiseNewTask+0x64>
 8002420:	e000      	b.n	8002424 <prvInitialiseNewTask+0x94>
            {
                break;
 8002422:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800242c:	e003      	b.n	8002436 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	2b04      	cmp	r3, #4
 800243a:	d901      	bls.n	8002440 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800243c:	2304      	movs	r3, #4
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	2200      	movs	r2, #0
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	3304      	adds	r3, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fefe 	bl	8002258 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	3318      	adds	r3, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fef9 	bl	8002258 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800246a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f1c3 0205 	rsb	r2, r3, #5
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	3350      	adds	r3, #80	; 0x50
 8002480:	2204      	movs	r2, #4
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f003 f813 	bl	80054b0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	3354      	adds	r3, #84	; 0x54
 800248e:	2201      	movs	r2, #1
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f80c 	bl	80054b0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	69b8      	ldr	r0, [r7, #24]
 800249e:	f000 fb49 	bl	8002b34 <pxPortInitialiseStack>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024b4:	bf00      	nop
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024c4:	f000 fce6 	bl	8002e94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <prvAddNewTaskToReadyList+0xe4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <prvAddNewTaskToReadyList+0xe4>)
 80024d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <prvAddNewTaskToReadyList+0xe8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024da:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <prvAddNewTaskToReadyList+0xe8>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <prvAddNewTaskToReadyList+0xe4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d110      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80024e8:	f000 fa8a 	bl	8002a00 <prvInitialiseTaskLists>
 80024ec:	e00d      	b.n	800250a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <prvAddNewTaskToReadyList+0xec>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <prvAddNewTaskToReadyList+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d802      	bhi.n	800250a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002504:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <prvAddNewTaskToReadyList+0xe8>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <prvAddNewTaskToReadyList+0xf0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <prvAddNewTaskToReadyList+0xf0>)
 8002512:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <prvAddNewTaskToReadyList+0xf0>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <prvAddNewTaskToReadyList+0x94>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fd6f 	bl	8005008 <SEGGER_SYSVIEW_OnTaskCreate>
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	461d      	mov	r5, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461c      	mov	r4, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	1ae3      	subs	r3, r4, r3
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	462b      	mov	r3, r5
 800254c:	f001 f87c 	bl	8003648 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fddc 	bl	8005110 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <prvAddNewTaskToReadyList+0xf4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <prvAddNewTaskToReadyList+0xf4>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <prvAddNewTaskToReadyList+0xf8>)
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f7ff fe76 	bl	8002272 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002586:	f000 fcb5 	bl	8002ef4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <prvAddNewTaskToReadyList+0xec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <prvAddNewTaskToReadyList+0xe8>)
 8002594:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001b8 	.word	0x200001b8
 80025a4:	200000e0 	.word	0x200000e0
 80025a8:	200001c4 	.word	0x200001c4
 80025ac:	200001d4 	.word	0x200001d4
 80025b0:	200001c0 	.word	0x200001c0
 80025b4:	200000e4 	.word	0x200000e4

080025b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <vTaskStartScheduler+0x98>)
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	2282      	movs	r2, #130	; 0x82
 80025ca:	4922      	ldr	r1, [pc, #136]	; (8002654 <vTaskStartScheduler+0x9c>)
 80025cc:	4822      	ldr	r0, [pc, #136]	; (8002658 <vTaskStartScheduler+0xa0>)
 80025ce:	f7ff fe9e 	bl	800230e <xTaskCreate>
 80025d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d124      	bne.n	8002624 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	60bb      	str	r3, [r7, #8]
    }
 80025ec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <vTaskStartScheduler+0xa4>)
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <vTaskStartScheduler+0xa8>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <vTaskStartScheduler+0xac>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <vTaskStartScheduler+0xb0>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <vTaskStartScheduler+0x98>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d102      	bne.n	8002614 <vTaskStartScheduler+0x5c>
 800260e:	f002 fcdf 	bl	8004fd0 <SEGGER_SYSVIEW_OnIdle>
 8002612:	e004      	b.n	800261e <vTaskStartScheduler+0x66>
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <vTaskStartScheduler+0xb0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fd37 	bl	800508c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800261e:	f000 fb19 	bl	8002c54 <xPortStartScheduler>
 8002622:	e00e      	b.n	8002642 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d10a      	bne.n	8002642 <vTaskStartScheduler+0x8a>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	607b      	str	r3, [r7, #4]
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <vTaskStartScheduler+0xb4>)
 8002644:	681b      	ldr	r3, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200001dc 	.word	0x200001dc
 8002654:	08005e20 	.word	0x08005e20
 8002658:	080029dd 	.word	0x080029dd
 800265c:	200001d8 	.word	0x200001d8
 8002660:	200001c4 	.word	0x200001c4
 8002664:	200001bc 	.word	0x200001bc
 8002668:	200000e0 	.word	0x200000e0
 800266c:	2000000c 	.word	0x2000000c

08002670 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <vTaskSuspendAll+0x18>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	4a03      	ldr	r2, [pc, #12]	; (8002688 <vTaskSuspendAll+0x18>)
 800267c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	200001e0 	.word	0x200001e0

0800268c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <xTaskResumeAll+0x104>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	603b      	str	r3, [r7, #0]
    }
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026b8:	f000 fbec 	bl	8002e94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <xTaskResumeAll+0x104>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	4a33      	ldr	r2, [pc, #204]	; (8002790 <xTaskResumeAll+0x104>)
 80026c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <xTaskResumeAll+0x104>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d159      	bne.n	8002782 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026ce:	4b31      	ldr	r3, [pc, #196]	; (8002794 <xTaskResumeAll+0x108>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d055      	beq.n	8002782 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026d6:	e032      	b.n	800273e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <xTaskResumeAll+0x10c>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3318      	adds	r3, #24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fde8 	bl	80022ba <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3304      	adds	r3, #4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fde3 	bl	80022ba <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fd0a 	bl	8005110 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <xTaskResumeAll+0x110>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4313      	orrs	r3, r2
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <xTaskResumeAll+0x110>)
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <xTaskResumeAll+0x114>)
 800271c:	441a      	add	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f7ff fda4 	bl	8002272 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <xTaskResumeAll+0x118>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <xTaskResumeAll+0x11c>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <xTaskResumeAll+0x10c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1c8      	bne.n	80026d8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800274c:	f000 f9d6 	bl	8002afc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <xTaskResumeAll+0x120>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d010      	beq.n	800277e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800275c:	f000 f83a 	bl	80027d4 <xTaskIncrementTick>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <xTaskResumeAll+0x11c>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3b01      	subs	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f1      	bne.n	800275c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <xTaskResumeAll+0x120>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <xTaskResumeAll+0x11c>)
 8002780:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002782:	f000 fbb7 	bl	8002ef4 <vPortExitCritical>

    return xAlreadyYielded;
 8002786:	687b      	ldr	r3, [r7, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200001e0 	.word	0x200001e0
 8002794:	200001b8 	.word	0x200001b8
 8002798:	20000178 	.word	0x20000178
 800279c:	200001c0 	.word	0x200001c0
 80027a0:	200000e4 	.word	0x200000e4
 80027a4:	200000e0 	.word	0x200000e0
 80027a8:	200001cc 	.word	0x200001cc
 80027ac:	200001c8 	.word	0x200001c8

080027b0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b6:	f000 fc59 	bl	800306c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <xTaskGetTickCountFromISR+0x20>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027c4:	683b      	ldr	r3, [r7, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200001bc 	.word	0x200001bc

080027d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <xTaskIncrementTick+0x110>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d173      	bne.n	80028ce <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <xTaskIncrementTick+0x114>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <xTaskIncrementTick+0x114>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d120      	bne.n	800283c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80027fa:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <xTaskIncrementTick+0x118>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <xTaskIncrementTick+0x46>
        __asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	603b      	str	r3, [r7, #0]
    }
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xTaskIncrementTick+0x44>
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <xTaskIncrementTick+0x118>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <xTaskIncrementTick+0x11c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a31      	ldr	r2, [pc, #196]	; (80028ec <xTaskIncrementTick+0x118>)
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4a31      	ldr	r2, [pc, #196]	; (80028f0 <xTaskIncrementTick+0x11c>)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <xTaskIncrementTick+0x120>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <xTaskIncrementTick+0x120>)
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	f000 f960 	bl	8002afc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <xTaskIncrementTick+0x124>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	429a      	cmp	r2, r3
 8002844:	d348      	bcc.n	80028d8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <xTaskIncrementTick+0x118>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <xTaskIncrementTick+0x124>)
 8002852:	f04f 32ff 	mov.w	r2, #4294967295
 8002856:	601a      	str	r2, [r3, #0]
                    break;
 8002858:	e03e      	b.n	80028d8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <xTaskIncrementTick+0x118>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d203      	bcs.n	800287a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <xTaskIncrementTick+0x124>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002878:	e02e      	b.n	80028d8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3304      	adds	r3, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fd1b 	bl	80022ba <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3318      	adds	r3, #24
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fd12 	bl	80022ba <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fc39 	bl	8005110 <SEGGER_SYSVIEW_OnTaskStartReady>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <xTaskIncrementTick+0x128>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <xTaskIncrementTick+0x128>)
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4a10      	ldr	r2, [pc, #64]	; (8002900 <xTaskIncrementTick+0x12c>)
 80028be:	441a      	add	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f7ff fcd3 	bl	8002272 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028cc:	e7bb      	b.n	8002846 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <xTaskIncrementTick+0x130>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <xTaskIncrementTick+0x130>)
 80028d6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028d8:	697b      	ldr	r3, [r7, #20]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001e0 	.word	0x200001e0
 80028e8:	200001bc 	.word	0x200001bc
 80028ec:	20000170 	.word	0x20000170
 80028f0:	20000174 	.word	0x20000174
 80028f4:	200001d0 	.word	0x200001d0
 80028f8:	200001d8 	.word	0x200001d8
 80028fc:	200001c0 	.word	0x200001c0
 8002900:	200000e4 	.word	0x200000e4
 8002904:	200001c8 	.word	0x200001c8

08002908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <vTaskSwitchContext+0xbc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <vTaskSwitchContext+0xc0>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800291c:	e04d      	b.n	80029ba <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <vTaskSwitchContext+0xc0>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <vTaskSwitchContext+0xc4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f1c3 031f 	rsb	r3, r3, #31
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	4925      	ldr	r1, [pc, #148]	; (80029d0 <vTaskSwitchContext+0xc8>)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <vTaskSwitchContext+0x5c>
        __asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	607b      	str	r3, [r7, #4]
    }
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <vTaskSwitchContext+0x5a>
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <vTaskSwitchContext+0xc8>)
 8002970:	4413      	add	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3308      	adds	r3, #8
 8002986:	429a      	cmp	r2, r3
 8002988:	d104      	bne.n	8002994 <vTaskSwitchContext+0x8c>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <vTaskSwitchContext+0xcc>)
 800299c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <vTaskSwitchContext+0xcc>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <vTaskSwitchContext+0xd0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d102      	bne.n	80029b0 <vTaskSwitchContext+0xa8>
 80029aa:	f002 fb11 	bl	8004fd0 <SEGGER_SYSVIEW_OnIdle>
}
 80029ae:	e004      	b.n	80029ba <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <vTaskSwitchContext+0xcc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fb69 	bl	800508c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200001e0 	.word	0x200001e0
 80029c8:	200001cc 	.word	0x200001cc
 80029cc:	200001c0 	.word	0x200001c0
 80029d0:	200000e4 	.word	0x200000e4
 80029d4:	200000e0 	.word	0x200000e0
 80029d8:	200001dc 	.word	0x200001dc

080029dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029e4:	f000 f84c 	bl	8002a80 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <prvIdleTask+0x20>)
 80029ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029f8:	e7f4      	b.n	80029e4 <prvIdleTask+0x8>
 80029fa:	bf00      	nop
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	e00c      	b.n	8002a26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <prvInitialiseTaskLists+0x60>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fbfc 	bl	8002218 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3301      	adds	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d9ef      	bls.n	8002a0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a2c:	480d      	ldr	r0, [pc, #52]	; (8002a64 <prvInitialiseTaskLists+0x64>)
 8002a2e:	f7ff fbf3 	bl	8002218 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <prvInitialiseTaskLists+0x68>)
 8002a34:	f7ff fbf0 	bl	8002218 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <prvInitialiseTaskLists+0x6c>)
 8002a3a:	f7ff fbed 	bl	8002218 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <prvInitialiseTaskLists+0x70>)
 8002a40:	f7ff fbea 	bl	8002218 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a44:	480b      	ldr	r0, [pc, #44]	; (8002a74 <prvInitialiseTaskLists+0x74>)
 8002a46:	f7ff fbe7 	bl	8002218 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <prvInitialiseTaskLists+0x78>)
 8002a4c:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <prvInitialiseTaskLists+0x64>)
 8002a4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <prvInitialiseTaskLists+0x7c>)
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <prvInitialiseTaskLists+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200000e4 	.word	0x200000e4
 8002a64:	20000148 	.word	0x20000148
 8002a68:	2000015c 	.word	0x2000015c
 8002a6c:	20000178 	.word	0x20000178
 8002a70:	2000018c 	.word	0x2000018c
 8002a74:	200001a4 	.word	0x200001a4
 8002a78:	20000170 	.word	0x20000170
 8002a7c:	20000174 	.word	0x20000174

08002a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a86:	e019      	b.n	8002abc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a88:	f000 fa04 	bl	8002e94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <prvCheckTasksWaitingTermination+0x50>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fc0e 	bl	80022ba <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <prvCheckTasksWaitingTermination+0x54>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <prvCheckTasksWaitingTermination+0x54>)
 8002aa6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002ab0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ab2:	f000 fa1f 	bl	8002ef4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f810 	bl	8002adc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <prvCheckTasksWaitingTermination+0x58>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e1      	bne.n	8002a88 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000018c 	.word	0x2000018c
 8002ad4:	200001b8 	.word	0x200001b8
 8002ad8:	200001a0 	.word	0x200001a0

08002adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fbdf 	bl	80032ac <vPortFree>
                vPortFree( pxTCB );
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fbdc 	bl	80032ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <prvResetNextTaskUnblockTime+0x30>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <prvResetNextTaskUnblockTime+0x34>)
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b12:	e005      	b.n	8002b20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <prvResetNextTaskUnblockTime+0x30>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <prvResetNextTaskUnblockTime+0x34>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000170 	.word	0x20000170
 8002b30:	200001d8 	.word	0x200001d8

08002b34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3b04      	subs	r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b04      	subs	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f023 0201 	bic.w	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b04      	subs	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <pxPortInitialiseStack+0x64>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b14      	subs	r3, #20
 8002b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f06f 0202 	mvn.w	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3b20      	subs	r3, #32
 8002b88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	08002b9d 	.word	0x08002b9d

08002b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <prvTaskExitError+0x54>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d00a      	beq.n	8002bc6 <prvTaskExitError+0x2a>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	60fb      	str	r3, [r7, #12]
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <prvTaskExitError+0x28>
        __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	60bb      	str	r3, [r7, #8]
    }
 8002bd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bda:	bf00      	nop
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0fc      	beq.n	8002bdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000010 	.word	0x20000010
	...

08002c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <pxCurrentTCBConst2>)
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	6808      	ldr	r0, [r1, #0]
 8002c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	f380 8809 	msr	PSP, r0
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f380 8811 	msr	BASEPRI, r0
 8002c1a:	4770      	bx	lr
 8002c1c:	f3af 8000 	nop.w

08002c20 <pxCurrentTCBConst2>:
 8002c20:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop

08002c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <prvPortStartFirstTask+0x24>)
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f380 8808 	msr	MSP, r0
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8814 	msr	CONTROL, r0
 8002c3a:	b662      	cpsie	i
 8002c3c:	b661      	cpsie	f
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	df00      	svc	0
 8002c48:	bf00      	nop
 8002c4a:	0000      	.short	0x0000
 8002c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop

08002c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c5a:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <xPortStartScheduler+0x120>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a46      	ldr	r2, [pc, #280]	; (8002d78 <xPortStartScheduler+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10a      	bne.n	8002c7a <xPortStartScheduler+0x26>
        __asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	613b      	str	r3, [r7, #16]
    }
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <xPortStartScheduler+0x120>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <xPortStartScheduler+0x128>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10a      	bne.n	8002c9a <xPortStartScheduler+0x46>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	60fb      	str	r3, [r7, #12]
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <xPortStartScheduler+0x12c>)
 8002c9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <xPortStartScheduler+0x130>)
 8002cc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc8:	e009      	b.n	8002cde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <xPortStartScheduler+0x134>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d0ef      	beq.n	8002cca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <xPortStartScheduler+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00a      	beq.n	8002d0c <xPortStartScheduler+0xb8>
        __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	60bb      	str	r3, [r7, #8]
    }
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <xPortStartScheduler+0x134>)
 8002d20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <xPortStartScheduler+0x138>)
 8002d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d42:	f000 f963 	bl	800300c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <xPortStartScheduler+0x13c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d4c:	f000 f982 	bl	8003054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <xPortStartScheduler+0x140>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <xPortStartScheduler+0x140>)
 8002d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d5c:	f7ff ff64 	bl	8002c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d60:	f7ff fdd2 	bl	8002908 <vTaskSwitchContext>
    prvTaskExitError();
 8002d64:	f7ff ff1a 	bl	8002b9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	410fc271 	.word	0x410fc271
 8002d7c:	410fc270 	.word	0x410fc270
 8002d80:	e000e400 	.word	0xe000e400
 8002d84:	200001e4 	.word	0x200001e4
 8002d88:	200001e8 	.word	0x200001e8
 8002d8c:	e000ed20 	.word	0xe000ed20
 8002d90:	20000010 	.word	0x20000010
 8002d94:	e000ef34 	.word	0xe000ef34

08002d98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <vInitPrioGroupValue+0xe4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <vInitPrioGroupValue+0xe8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10a      	bne.n	8002dbe <vInitPrioGroupValue+0x26>
        __asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	613b      	str	r3, [r7, #16]
    }
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <vInitPrioGroupValue+0xe4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <vInitPrioGroupValue+0xec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10a      	bne.n	8002dde <vInitPrioGroupValue+0x46>
        __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	60fb      	str	r3, [r7, #12]
    }
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <vInitPrioGroupValue+0xf0>)
 8002de0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <vInitPrioGroupValue+0xf4>)
 8002e04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e06:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e0c:	e009      	b.n	8002e22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d0ef      	beq.n	8002e0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00a      	beq.n	8002e50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	60bb      	str	r3, [r7, #8]
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <vInitPrioGroupValue+0xf8>)
 8002e64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	410fc271 	.word	0x410fc271
 8002e84:	410fc270 	.word	0x410fc270
 8002e88:	e000e400 	.word	0xe000e400
 8002e8c:	200001e4 	.word	0x200001e4
 8002e90:	200001e8 	.word	0x200001e8

08002e94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
        __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	607b      	str	r3, [r7, #4]
    }
 8002eac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <vPortEnterCritical+0x58>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <vPortEnterCritical+0x58>)
 8002eb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <vPortEnterCritical+0x58>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10f      	bne.n	8002ee0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <vPortEnterCritical+0x5c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
    }
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <vPortEnterCritical+0x4a>
    }
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	20000010 	.word	0x20000010
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <vPortExitCritical+0x50>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <vPortExitCritical+0x24>
        __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	607b      	str	r3, [r7, #4]
    }
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <vPortExitCritical+0x50>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <vPortExitCritical+0x50>)
 8002f20:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <vPortExitCritical+0x50>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <vPortExitCritical+0x42>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f34:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000010 	.word	0x20000010
	...

08002f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f50:	f3ef 8009 	mrs	r0, PSP
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <pxCurrentTCBConst>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f01e 0f10 	tst.w	lr, #16
 8002f60:	bf08      	it	eq
 8002f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6a:	6010      	str	r0, [r2, #0]
 8002f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f74:	f380 8811 	msr	BASEPRI, r0
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f7ff fcc2 	bl	8002908 <vTaskSwitchContext>
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f380 8811 	msr	BASEPRI, r0
 8002f8c:	bc09      	pop	{r0, r3}
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	6808      	ldr	r0, [r1, #0]
 8002f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f96:	f01e 0f10 	tst.w	lr, #16
 8002f9a:	bf08      	it	eq
 8002f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fa0:	f380 8809 	msr	PSP, r0
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	f3af 8000 	nop.w

08002fb0 <pxCurrentTCBConst>:
 8002fb0:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop

08002fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	607b      	str	r3, [r7, #4]
    }
 8002fd0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002fd2:	f001 ff83 	bl	8004edc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002fd6:	f7ff fbfd 	bl	80027d4 <xTaskIncrementTick>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002fe0:	f001 ffda 	bl	8004f98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <SysTick_Handler+0x50>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e001      	b.n	8002ff2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002fee:	f001 ffb7 	bl	8004f60 <SEGGER_SYSVIEW_RecordExitISR>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f383 8811 	msr	BASEPRI, r3
    }
 8002ffc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vPortSetupTimerInterrupt+0x34>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <vPortSetupTimerInterrupt+0x38>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <vPortSetupTimerInterrupt+0x3c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <vPortSetupTimerInterrupt+0x40>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	4a09      	ldr	r2, [pc, #36]	; (8003050 <vPortSetupTimerInterrupt+0x44>)
 800302a:	3b01      	subs	r3, #1
 800302c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <vPortSetupTimerInterrupt+0x34>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010
 8003044:	e000e018 	.word	0xe000e018
 8003048:	20000000 	.word	0x20000000
 800304c:	10624dd3 	.word	0x10624dd3
 8003050:	e000e014 	.word	0xe000e014

08003054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003064 <vPortEnableVFP+0x10>
 8003058:	6801      	ldr	r1, [r0, #0]
 800305a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800305e:	6001      	str	r1, [r0, #0]
 8003060:	4770      	bx	lr
 8003062:	0000      	.short	0x0000
 8003064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop

0800306c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003072:	f3ef 8305 	mrs	r3, IPSR
 8003076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d914      	bls.n	80030a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <vPortValidateInterruptPriority+0x70>)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <vPortValidateInterruptPriority+0x74>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	7afa      	ldrb	r2, [r7, #11]
 800308e:	429a      	cmp	r2, r3
 8003090:	d20a      	bcs.n	80030a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
    }
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <vPortValidateInterruptPriority+0x78>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <vPortValidateInterruptPriority+0x7c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d90a      	bls.n	80030ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	603b      	str	r3, [r7, #0]
    }
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <vPortValidateInterruptPriority+0x60>
    }
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e3f0 	.word	0xe000e3f0
 80030e0:	200001e4 	.word	0x200001e4
 80030e4:	e000ed0c 	.word	0xe000ed0c
 80030e8:	200001e8 	.word	0x200001e8

080030ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80030f8:	f7ff faba 	bl	8002670 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <pvPortMalloc+0x1a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003104:	f000 f934 	bl	8003370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <pvPortMalloc+0x1ac>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 80a7 	bne.w	8003264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02d      	beq.n	8003178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800311c:	2208      	movs	r2, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d227      	bcs.n	8003178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003128:	2208      	movs	r2, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	2b00      	cmp	r3, #0
 8003138:	d021      	beq.n	800317e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f023 0307 	bic.w	r3, r3, #7
 8003140:	3308      	adds	r3, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d214      	bcs.n	8003172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	3308      	adds	r3, #8
 8003150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <pvPortMalloc+0x92>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	617b      	str	r3, [r7, #20]
    }
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003176:	e002      	b.n	800317e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	e000      	b.n	8003180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800317e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06e      	beq.n	8003264 <pvPortMalloc+0x178>
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <pvPortMalloc+0x1b0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d869      	bhi.n	8003264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <pvPortMalloc+0x1b4>)
 8003192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003194:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <pvPortMalloc+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800319a:	e004      	b.n	80031a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d903      	bls.n	80031b8 <pvPortMalloc+0xcc>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f1      	bne.n	800319c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <pvPortMalloc+0x1a8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	429a      	cmp	r2, r3
 80031c0:	d050      	beq.n	8003264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	2308      	movs	r3, #8
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d91f      	bls.n	8003224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <pvPortMalloc+0x120>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	613b      	str	r3, [r7, #16]
    }
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800321e:	69b8      	ldr	r0, [r7, #24]
 8003220:	f000 f908 	bl	8003434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <pvPortMalloc+0x1b0>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <pvPortMalloc+0x1b0>)
 8003230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <pvPortMalloc+0x1b0>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <pvPortMalloc+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d203      	bcs.n	8003246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <pvPortMalloc+0x1b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <pvPortMalloc+0x1b8>)
 8003244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <pvPortMalloc+0x1ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	431a      	orrs	r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <pvPortMalloc+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <pvPortMalloc+0x1bc>)
 8003262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003264:	f7ff fa12 	bl	800268c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <pvPortMalloc+0x19c>
        __asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	60fb      	str	r3, [r7, #12]
    }
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <pvPortMalloc+0x19a>
    return pvReturn;
 8003288:	69fb      	ldr	r3, [r7, #28]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200191f4 	.word	0x200191f4
 8003298:	20019208 	.word	0x20019208
 800329c:	200191f8 	.word	0x200191f8
 80032a0:	200191ec 	.word	0x200191ec
 80032a4:	200191fc 	.word	0x200191fc
 80032a8:	20019200 	.word	0x20019200

080032ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04d      	beq.n	800335a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032be:	2308      	movs	r3, #8
 80032c0:	425b      	negs	r3, r3
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4413      	add	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <vPortFree+0xb8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10a      	bne.n	80032f0 <vPortFree+0x44>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60fb      	str	r3, [r7, #12]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <vPortFree+0x62>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60bb      	str	r3, [r7, #8]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <vPortFree+0xb8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01e      	beq.n	800335a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <vPortFree+0xb8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003334:	f7ff f99c 	bl	8002670 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <vPortFree+0xbc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <vPortFree+0xbc>)
 8003344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f000 f874 	bl	8003434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <vPortFree+0xc0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <vPortFree+0xc0>)
 8003354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003356:	f7ff f999 	bl	800268c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20019208 	.word	0x20019208
 8003368:	200191f8 	.word	0x200191f8
 800336c:	20019204 	.word	0x20019204

08003370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003376:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800337a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <prvHeapInit+0xac>)
 800337e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <prvHeapInit+0xac>)
 80033a0:	4413      	add	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <prvHeapInit+0xb0>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <prvHeapInit+0xb0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033bc:	2208      	movs	r2, #8
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0307 	bic.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <prvHeapInit+0xb4>)
 80033d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <prvHeapInit+0xb4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <prvHeapInit+0xb4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <prvHeapInit+0xb4>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <prvHeapInit+0xb8>)
 80033fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a09      	ldr	r2, [pc, #36]	; (800342c <prvHeapInit+0xbc>)
 8003406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <prvHeapInit+0xc0>)
 800340a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	200001ec 	.word	0x200001ec
 8003420:	200191ec 	.word	0x200191ec
 8003424:	200191f4 	.word	0x200191f4
 8003428:	200191fc 	.word	0x200191fc
 800342c:	200191f8 	.word	0x200191f8
 8003430:	20019208 	.word	0x20019208

08003434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <prvInsertBlockIntoFreeList+0xac>)
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e002      	b.n	8003448 <prvInsertBlockIntoFreeList+0x14>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d8f7      	bhi.n	8003442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4413      	add	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d108      	bne.n	8003476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	441a      	add	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d118      	bne.n	80034bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d00d      	beq.n	80034b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	441a      	add	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e008      	b.n	80034c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <prvInsertBlockIntoFreeList+0xb0>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e003      	b.n	80034c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d002      	beq.n	80034d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200191ec 	.word	0x200191ec
 80034e4:	200191f4 	.word	0x200191f4

080034e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <_cbSendSystemDesc+0x14>)
 80034ee:	f001 fc9f 	bl	8004e30 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <_cbSendSystemDesc+0x18>)
 80034f4:	f001 fc9c 	bl	8004e30 <SEGGER_SYSVIEW_SendSysDesc>
}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08005e28 	.word	0x08005e28
 8003500:	08005e6c 	.word	0x08005e6c

08003504 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SEGGER_SYSVIEW_Conf+0x20>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SEGGER_SYSVIEW_Conf+0x20>)
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SEGGER_SYSVIEW_Conf+0x24>)
 8003512:	4a06      	ldr	r2, [pc, #24]	; (800352c <SEGGER_SYSVIEW_Conf+0x28>)
 8003514:	f001 f910 	bl	8004738 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003518:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800351c:	f001 f950 	bl	80047c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000000 	.word	0x20000000
 8003528:	080034e9 	.word	0x080034e9
 800352c:	08005f0c 	.word	0x08005f0c

08003530 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	e033      	b.n	80035a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800353c:	491e      	ldr	r1, [pc, #120]	; (80035b8 <_cbSendTaskList+0x88>)
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	491a      	ldr	r1, [pc, #104]	; (80035b8 <_cbSendTaskList+0x88>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3304      	adds	r3, #4
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	4c16      	ldr	r4, [pc, #88]	; (80035b8 <_cbSendTaskList+0x88>)
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4423      	add	r3, r4
 800356c:	3308      	adds	r3, #8
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	4d11      	ldr	r5, [pc, #68]	; (80035b8 <_cbSendTaskList+0x88>)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	442b      	add	r3, r5
 800357e:	330c      	adds	r3, #12
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	4e0d      	ldr	r6, [pc, #52]	; (80035b8 <_cbSendTaskList+0x88>)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4433      	add	r3, r6
 8003590:	3310      	adds	r3, #16
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	462b      	mov	r3, r5
 8003598:	4622      	mov	r2, r4
 800359a:	f000 f8bd 	bl	8003718 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3301      	adds	r3, #1
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <_cbSendTaskList+0x8c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3c6      	bcc.n	800353c <_cbSendTaskList+0xc>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b8:	2001920c 	.word	0x2001920c
 80035bc:	200192ac 	.word	0x200192ac

080035c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035c8:	f7ff f8f2 	bl	80027b0 <xTaskGetTickCountFromISR>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2200      	movs	r2, #0
 80035d0:	469a      	mov	sl, r3
 80035d2:	4693      	mov	fp, r2
 80035d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	f04f 0a00 	mov.w	sl, #0
 80035e4:	f04f 0b00 	mov.w	fp, #0
 80035e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80035ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80035f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80035f4:	4652      	mov	r2, sl
 80035f6:	465b      	mov	r3, fp
 80035f8:	1a14      	subs	r4, r2, r0
 80035fa:	eb63 0501 	sbc.w	r5, r3, r1
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	00ab      	lsls	r3, r5, #2
 8003608:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800360c:	00a2      	lsls	r2, r4, #2
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	eb14 0800 	adds.w	r8, r4, r0
 8003616:	eb45 0901 	adc.w	r9, r5, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003636:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003648 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003656:	2205      	movs	r2, #5
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <SYSVIEW_AddTask+0xc0>)
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f001 ff0a 	bl	8005474 <memcmp>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d903      	bls.n	8003676 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800366e:	4828      	ldr	r0, [pc, #160]	; (8003710 <SYSVIEW_AddTask+0xc8>)
 8003670:	f001 fe80 	bl	8005374 <SEGGER_SYSVIEW_Warn>
    return;
 8003674:	e044      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4926      	ldr	r1, [pc, #152]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <SYSVIEW_AddTask+0xc4>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3304      	adds	r3, #4
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	491b      	ldr	r1, [pc, #108]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3308      	adds	r3, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	330c      	adds	r3, #12
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4910      	ldr	r1, [pc, #64]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3310      	adds	r3, #16
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a08      	ldr	r2, [pc, #32]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f80e 	bl	8003718 <SYSVIEW_SendTaskInfo>
 80036fc:	e000      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
    return;
 80036fe:	bf00      	nop

}
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08005e7c 	.word	0x08005e7c
 800370c:	200192ac 	.word	0x200192ac
 8003710:	08005e84 	.word	0x08005e84
 8003714:	2001920c 	.word	0x2001920c

08003718 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2214      	movs	r2, #20
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f001 febe 	bl	80054b0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fa77 	bl	8004c40 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <USART2_IRQHandler+0x80>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d011      	beq.n	8003796 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <USART2_IRQHandler+0x84>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 030b 	and.w	r3, r3, #11
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <USART2_IRQHandler+0x88>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <USART2_IRQHandler+0x88>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	79fa      	ldrb	r2, [r7, #7]
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01a      	beq.n	80037d6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <USART2_IRQHandler+0x8c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <USART2_IRQHandler+0x8c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1dfa      	adds	r2, r7, #7
 80037ae:	4610      	mov	r0, r2
 80037b0:	4798      	blx	r3
 80037b2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <USART2_IRQHandler+0x90>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <USART2_IRQHandler+0x90>)
 80037c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e006      	b.n	80037d6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <USART2_IRQHandler+0x80>)
 80037ca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80037cc:	79fa      	ldrb	r2, [r7, #7]
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <USART2_IRQHandler+0x84>)
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e000      	b.n	80037d6 <USART2_IRQHandler+0x7a>
      return;
 80037d4:	bf00      	nop
    }
  }
}
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40004404 	.word	0x40004404
 80037e4:	200192b0 	.word	0x200192b0
 80037e8:	200192b4 	.word	0x200192b4
 80037ec:	4000440c 	.word	0x4000440c

080037f0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	4000440c 	.word	0x4000440c

08003810 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <_DoInit+0x98>)
 8003818:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2203      	movs	r2, #3
 800381e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a20      	ldr	r2, [pc, #128]	; (80038ac <_DoInit+0x9c>)
 800382a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <_DoInit+0xa0>)
 8003830:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003838:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <_DoInit+0x9c>)
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <_DoInit+0xa4>)
 8003856:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2210      	movs	r2, #16
 800385c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3307      	adds	r3, #7
 8003874:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <_DoInit+0xa8>)
 8003876:	6810      	ldr	r0, [r2, #0]
 8003878:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800387a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <_DoInit+0xac>)
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	6018      	str	r0, [r3, #0]
 8003886:	8891      	ldrh	r1, [r2, #4]
 8003888:	7992      	ldrb	r2, [r2, #6]
 800388a:	8099      	strh	r1, [r3, #4]
 800388c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800388e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003898:	f3bf 8f5f 	dmb	sy
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	200192b8 	.word	0x200192b8
 80038ac:	08005ed4 	.word	0x08005ed4
 80038b0:	20019360 	.word	0x20019360
 80038b4:	20019760 	.word	0x20019760
 80038b8:	08005ee0 	.word	0x08005ee0
 80038bc:	08005ee4 	.word	0x08005ee4

080038c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <SEGGER_RTT_ReadNoLock+0x1e>
 80038da:	f7ff ff99 	bl	8003810 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80038ec:	4413      	add	r3, r2
 80038ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	d92b      	bls.n	8003964 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4293      	cmp	r3, r2
 800391c:	bf28      	it	cs
 800391e:	4613      	movcs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	4413      	add	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003932:	f001 fdaf 	bl	8005494 <memcpy>
    NumBytesRead += NumBytesRem;
 8003936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4413      	add	r3, r2
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	4413      	add	r3, r2
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800394e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4413      	add	r3, r2
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	429a      	cmp	r2, r3
 800395e:	d101      	bne.n	8003964 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003960:	2300      	movs	r3, #0
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4293      	cmp	r3, r2
 8003972:	bf28      	it	cs
 8003974:	4613      	movcs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	4413      	add	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398e:	f001 fd81 	bl	8005494 <memcpy>
    NumBytesRead += NumBytesRem;
 8003992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4413      	add	r3, r2
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	4413      	add	r3, r2
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3730      	adds	r7, #48	; 0x30
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200192b8 	.word	0x200192b8

080039cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80039e8:	f7ff ff12 	bl	8003810 <_DoInit>
  SEGGER_RTT_LOCK();
 80039ec:	f3ef 8311 	mrs	r3, BASEPRI
 80039f0:	f04f 0120 	mov.w	r1, #32
 80039f4:	f381 8811 	msr	BASEPRI, r1
 80039f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	3304      	adds	r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	dbeb      	blt.n	8003a02 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003a2a:	e000      	b.n	8003a2e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003a2c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	da3f      	bge.n	8003ab8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a4c:	6939      	ldr	r1, [r7, #16]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	3320      	adds	r3, #32
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a76:	6939      	ldr	r1, [r7, #16]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	3328      	adds	r3, #40	; 0x28
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a8a:	6939      	ldr	r1, [r7, #16]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	3324      	adds	r3, #36	; 0x24
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	332c      	adds	r3, #44	; 0x2c
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ab2:	f3bf 8f5f 	dmb	sy
 8003ab6:	e002      	b.n	8003abe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200192b8 	.word	0x200192b8

08003ad4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ae2:	4b33      	ldr	r3, [pc, #204]	; (8003bb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003af0:	f7ff fe8e 	bl	8003810 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003af6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d24d      	bcs.n	8003ba0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	f04f 0120 	mov.w	r1, #32
 8003b0c:	f381 8811 	msr	BASEPRI, r1
 8003b10:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d031      	beq.n	8003b7c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	3360      	adds	r3, #96	; 0x60
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003b2c:	6979      	ldr	r1, [r7, #20]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	440b      	add	r3, r1
 8003b3a:	3364      	adds	r3, #100	; 0x64
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003b40:	6979      	ldr	r1, [r7, #20]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3368      	adds	r3, #104	; 0x68
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	3370      	adds	r3, #112	; 0x70
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	336c      	adds	r3, #108	; 0x6c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	3374      	adds	r3, #116	; 0x74
 8003b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b8e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e002      	b.n	8003ba6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200192b8 	.word	0x200192b8

08003bb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bc4:	e002      	b.n	8003bcc <_EncodeStr+0x18>
    Len++;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f6      	bne.n	8003bc6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d901      	bls.n	8003be4 <_EncodeStr+0x30>
    Len = Limit;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2bfe      	cmp	r3, #254	; 0xfe
 8003be8:	d806      	bhi.n	8003bf8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e011      	b.n	8003c1c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	60fa      	str	r2, [r7, #12]
 8003bfe:	22ff      	movs	r2, #255	; 0xff
 8003c00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	60fa      	str	r2, [r7, #12]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	0a19      	lsrs	r1, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	b2ca      	uxtb	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c20:	e00a      	b.n	8003c38 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	1c53      	adds	r3, r2, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	60f9      	str	r1, [r7, #12]
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	701a      	strb	r2, [r3, #0]
    n++;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3f0      	bcc.n	8003c22 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003c40:	68fb      	ldr	r3, [r7, #12]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <_HandleIncomingPacket+0xe0>)
 8003c70:	7e1b      	ldrb	r3, [r3, #24]
 8003c72:	4618      	mov	r0, r3
 8003c74:	1cfb      	adds	r3, r7, #3
 8003c76:	2201      	movs	r2, #1
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7ff fe21 	bl	80038c0 <SEGGER_RTT_ReadNoLock>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	dd54      	ble.n	8003d32 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d032      	beq.n	8003cf4 <_HandleIncomingPacket+0x8c>
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	dc42      	bgt.n	8003d18 <_HandleIncomingPacket+0xb0>
 8003c92:	2b07      	cmp	r3, #7
 8003c94:	dc16      	bgt.n	8003cc4 <_HandleIncomingPacket+0x5c>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	dd3e      	ble.n	8003d18 <_HandleIncomingPacket+0xb0>
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d83b      	bhi.n	8003d18 <_HandleIncomingPacket+0xb0>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <_HandleIncomingPacket+0x40>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ccb 	.word	0x08003ccb
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd7 	.word	0x08003cd7
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003ce9 	.word	0x08003ce9
 8003cc0:	08003cef 	.word	0x08003cef
 8003cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc6:	d036      	beq.n	8003d36 <_HandleIncomingPacket+0xce>
 8003cc8:	e026      	b.n	8003d18 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003cca:	f000 fe3d 	bl	8004948 <SEGGER_SYSVIEW_Start>
      break;
 8003cce:	e037      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003cd0:	f000 fef6 	bl	8004ac0 <SEGGER_SYSVIEW_Stop>
      break;
 8003cd4:	e034      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003cd6:	f001 f8cf 	bl	8004e78 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003cda:	e031      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003cdc:	f001 f894 	bl	8004e08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ce0:	e02e      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ce2:	f000 ff13 	bl	8004b0c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ce6:	e02b      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ce8:	f001 faf2 	bl	80052d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003cec:	e028      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003cee:	f001 fad1 	bl	8005294 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cf2:	e025      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <_HandleIncomingPacket+0xe0>)
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	1cfb      	adds	r3, r7, #3
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f7ff fdde 	bl	80038c0 <SEGGER_RTT_ReadNoLock>
 8003d04:	4603      	mov	r3, r0
 8003d06:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	dd15      	ble.n	8003d3a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fa3f 	bl	8005194 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d16:	e010      	b.n	8003d3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da0e      	bge.n	8003d3e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <_HandleIncomingPacket+0xe0>)
 8003d22:	7e1b      	ldrb	r3, [r3, #24]
 8003d24:	4618      	mov	r0, r3
 8003d26:	1cfb      	adds	r3, r7, #3
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f7ff fdc8 	bl	80038c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d30:	e005      	b.n	8003d3e <_HandleIncomingPacket+0xd6>
    }
  }
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <_HandleIncomingPacket+0xd8>
      break;
 8003d3e:	bf00      	nop
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	2001a778 	.word	0x2001a778

08003d4c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d52:	2301      	movs	r3, #1
 8003d54:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d66:	e00b      	b.n	8003d80 <_TrySendOverflowPacket+0x34>
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <_TrySendOverflowPacket+0x1c>
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <_TrySendOverflowPacket+0xe4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	e00b      	b.n	8003dc8 <_TrySendOverflowPacket+0x7c>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	6279      	str	r1, [r7, #36]	; 0x24
 8003dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	09db      	lsrs	r3, r3, #7
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2b7f      	cmp	r3, #127	; 0x7f
 8003dcc:	d8f0      	bhi.n	8003db0 <_TrySendOverflowPacket+0x64>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	4618      	mov	r0, r3
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc f9ee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003df4:	4603      	mov	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003df8:	f7ff fcfa 	bl	80037f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e004      	b.n	8003e20 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <_TrySendOverflowPacket+0xe0>)
 8003e1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e20:	693b      	ldr	r3, [r7, #16]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3730      	adds	r7, #48	; 0x30
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2001a778 	.word	0x2001a778
 8003e30:	e0001004 	.word	0xe0001004

08003e34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <_SendPacket+0x1c4>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d010      	beq.n	8003e6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e48:	4b6b      	ldr	r3, [pc, #428]	; (8003ff8 <_SendPacket+0x1c4>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a5 	beq.w	8003f9c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e52:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <_SendPacket+0x1c4>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d109      	bne.n	8003e6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e5a:	f7ff ff77 	bl	8003d4c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <_SendPacket+0x1c4>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 809c 	bne.w	8003fa0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003e68:	e001      	b.n	8003e6e <_SendPacket+0x3a>
    goto Send;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <_SendPacket+0x3c>
Send:
 8003e6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b1f      	cmp	r3, #31
 8003e74:	d809      	bhi.n	8003e8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e76:	4b60      	ldr	r3, [pc, #384]	; (8003ff8 <_SendPacket+0x1c4>)
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 808d 	bne.w	8003fa4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b17      	cmp	r3, #23
 8003e8e:	d807      	bhi.n	8003ea0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e03d      	b.n	8003f1c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003eac:	d912      	bls.n	8003ed4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	09da      	lsrs	r2, r3, #7
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	60fa      	str	r2, [r7, #12]
 8003ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e006      	b.n	8003ee2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee6:	d912      	bls.n	8003f0e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	09da      	lsrs	r2, r3, #7
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	3a01      	subs	r2, #1
 8003f00:	60fa      	str	r2, [r7, #12]
 8003f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e006      	b.n	8003f1c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <_SendPacket+0x1c8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f22:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <_SendPacket+0x1c4>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e00b      	b.n	8003f4e <_SendPacket+0x11a>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1c59      	adds	r1, r3, #1
 8003f3e:	6279      	str	r1, [r7, #36]	; 0x24
 8003f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	09db      	lsrs	r3, r3, #7
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2b7f      	cmp	r3, #127	; 0x7f
 8003f52:	d8f0      	bhi.n	8003f36 <_SendPacket+0x102>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	627a      	str	r2, [r7, #36]	; 0x24
 8003f5a:	6a3a      	ldr	r2, [r7, #32]
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <_SendPacket+0x1c4>)
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	f7fc f92c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003f7c:	f7ff fc38 	bl	80037f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <_SendPacket+0x1c4>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e00b      	b.n	8003fa6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <_SendPacket+0x1c4>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <_SendPacket+0x1c4>)
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e004      	b.n	8003fa6 <_SendPacket+0x172>
    goto SendDone;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <_SendPacket+0x172>
      goto SendDone;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_SendPacket+0x172>
      goto SendDone;
 8003fa4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <_SendPacket+0x1c4>)
 8003fa8:	7e1b      	ldrb	r3, [r3, #24]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4a14      	ldr	r2, [pc, #80]	; (8004000 <_SendPacket+0x1cc>)
 8003fae:	460b      	mov	r3, r1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	440b      	add	r3, r1
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	336c      	adds	r3, #108	; 0x6c
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <_SendPacket+0x1c4>)
 8003fbe:	7e1b      	ldrb	r3, [r3, #24]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	490f      	ldr	r1, [pc, #60]	; (8004000 <_SendPacket+0x1cc>)
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4403      	add	r3, r0
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3370      	adds	r3, #112	; 0x70
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d00b      	beq.n	8003fee <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <_SendPacket+0x1c4>)
 8003fd8:	789b      	ldrb	r3, [r3, #2]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <_SendPacket+0x1c4>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003fe4:	f7ff fe40 	bl	8003c68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <_SendPacket+0x1c4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003fee:	bf00      	nop
 8003ff0:	3728      	adds	r7, #40	; 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2001a778 	.word	0x2001a778
 8003ffc:	e0001004 	.word	0xe0001004
 8004000:	200192b8 	.word	0x200192b8

08004004 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3301      	adds	r3, #1
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d80a      	bhi.n	8004034 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6051      	str	r1, [r2, #4]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d15a      	bne.n	80040f2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	e00b      	b.n	8004076 <_StoreChar+0x72>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	6279      	str	r1, [r7, #36]	; 0x24
 8004068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2b7f      	cmp	r3, #127	; 0x7f
 800407a:	d8f0      	bhi.n	800405e <_StoreChar+0x5a>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e00b      	b.n	80040ae <_StoreChar+0xaa>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1c59      	adds	r1, r3, #1
 800409e:	61f9      	str	r1, [r7, #28]
 80040a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	09db      	lsrs	r3, r3, #7
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b7f      	cmp	r3, #127	; 0x7f
 80040b2:	d8f0      	bhi.n	8004096 <_StoreChar+0x92>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	221a      	movs	r2, #26
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff feb1 	bl	8003e34 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fdb9 	bl	8003c4e <_PreparePacket>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
  }
}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004116:	e007      	b.n	8004128 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	623b      	str	r3, [r7, #32]
    Width++;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d2f3      	bcs.n	8004118 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	429a      	cmp	r2, r3
 8004136:	d901      	bls.n	800413c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11f      	bne.n	8004186 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01c      	beq.n	8004186 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <_PrintUnsigned+0x66>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <_PrintUnsigned+0x66>
        c = '0';
 800415c:	2330      	movs	r3, #48	; 0x30
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e001      	b.n	8004166 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004162:	2320      	movs	r3, #32
 8004164:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004166:	e007      	b.n	8004178 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	3b01      	subs	r3, #1
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800416e:	7efb      	ldrb	r3, [r7, #27]
 8004170:	4619      	mov	r1, r3
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff46 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <_PrintUnsigned+0x8a>
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	429a      	cmp	r2, r3
 8004184:	d3f0      	bcc.n	8004168 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d903      	bls.n	8004194 <_PrintUnsigned+0x98>
      NumDigits--;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	e009      	b.n	80041a8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d200      	bcs.n	80041a8 <_PrintUnsigned+0xac>
        break;
 80041a6:	e005      	b.n	80041b4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80041b2:	e7e8      	b.n	8004186 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <_PrintUnsigned+0x128>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff14 	bl	8004004 <_StoreChar>
    Digit /= Base;
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041fc:	e006      	b.n	800420c <_PrintUnsigned+0x110>
        FieldWidth--;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	3b01      	subs	r3, #1
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004204:	2120      	movs	r1, #32
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fefc 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <_PrintUnsigned+0x11e>
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	429a      	cmp	r2, r3
 8004218:	d3f1      	bcc.n	80041fe <_PrintUnsigned+0x102>
      }
    }
  }
}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	08005f20 	.word	0x08005f20

08004228 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	bfb8      	it	lt
 800423c:	425b      	neglt	r3, r3
 800423e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004244:	e007      	b.n	8004256 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	fb92 f3f3 	sdiv	r3, r2, r3
 800424e:	613b      	str	r3, [r7, #16]
    Width++;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	daf3      	bge.n	8004246 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	429a      	cmp	r2, r3
 8004264:	d901      	bls.n	800426a <_PrintInt+0x42>
    Width = NumDigits;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <_PrintInt+0x5e>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db04      	blt.n	8004280 <_PrintInt+0x58>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <_PrintInt+0x5e>
    FieldWidth--;
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	3b01      	subs	r3, #1
 8004284:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <_PrintInt+0x6e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <_PrintInt+0x9c>
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042a6:	e006      	b.n	80042b6 <_PrintInt+0x8e>
        FieldWidth--;
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80042ae:	2120      	movs	r1, #32
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fea7 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <_PrintInt+0x9c>
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3f1      	bcc.n	80042a8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da07      	bge.n	80042da <_PrintInt+0xb2>
    v = -v;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	425b      	negs	r3, r3
 80042ce:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80042d0:	212d      	movs	r1, #45	; 0x2d
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fe96 	bl	8004004 <_StoreChar>
 80042d8:	e008      	b.n	80042ec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80042e4:	212b      	movs	r1, #43	; 0x2b
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fe8c 	bl	8004004 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d019      	beq.n	800432a <_PrintInt+0x102>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d114      	bne.n	800432a <_PrintInt+0x102>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d111      	bne.n	800432a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800430c:	e006      	b.n	800431c <_PrintInt+0xf4>
        FieldWidth--;
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	3b01      	subs	r3, #1
 8004312:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004314:	2130      	movs	r1, #48	; 0x30
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fe74 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <_PrintInt+0x102>
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3f1      	bcc.n	800430e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fedf 	bl	80040fc <_PrintUnsigned>
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b098      	sub	sp, #96	; 0x60
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	f04f 0120 	mov.w	r1, #32
 800435c:	f381 8811 	msr	BASEPRI, r1
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
 8004362:	48b7      	ldr	r0, [pc, #732]	; (8004640 <_VPrintTarget+0x2f8>)
 8004364:	f7ff fc73 	bl	8003c4e <_PreparePacket>
 8004368:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800436a:	4bb5      	ldr	r3, [pc, #724]	; (8004640 <_VPrintTarget+0x2f8>)
 800436c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800438e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8183 	beq.w	800469e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800439c:	2b25      	cmp	r3, #37	; 0x25
 800439e:	f040 8170 	bne.w	8004682 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80043a2:	2300      	movs	r3, #0
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80043b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043b6:	3b23      	subs	r3, #35	; 0x23
 80043b8:	2b0d      	cmp	r3, #13
 80043ba:	d83f      	bhi.n	800443c <_VPrintTarget+0xf4>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <_VPrintTarget+0x7c>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	0800442d 	.word	0x0800442d
 80043c8:	0800443d 	.word	0x0800443d
 80043cc:	0800443d 	.word	0x0800443d
 80043d0:	0800443d 	.word	0x0800443d
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	0800443d 	.word	0x0800443d
 80043e0:	0800443d 	.word	0x0800443d
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800443d 	.word	0x0800443d
 80043f4:	0800443d 	.word	0x0800443d
 80043f8:	0800440d 	.word	0x0800440d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80043fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e01a      	b.n	8004442 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	64bb      	str	r3, [r7, #72]	; 0x48
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e012      	b.n	8004442 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800441c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e00a      	b.n	8004442 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800442c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e002      	b.n	8004442 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800443c:	2300      	movs	r3, #0
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
 8004440:	bf00      	nop
        }
      } while (v);
 8004442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1b0      	bne.n	80043aa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004448:	2300      	movs	r3, #0
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004458:	2b2f      	cmp	r3, #47	; 0x2f
 800445a:	d912      	bls.n	8004482 <_VPrintTarget+0x13a>
 800445c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004460:	2b39      	cmp	r3, #57	; 0x39
 8004462:	d80e      	bhi.n	8004482 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800446a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	461a      	mov	r2, r3
 8004476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800447a:	4413      	add	r3, r2
 800447c:	3b30      	subs	r3, #48	; 0x30
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004480:	e7e4      	b.n	800444c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004482:	2300      	movs	r3, #0
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800448e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004492:	2b2e      	cmp	r3, #46	; 0x2e
 8004494:	d11d      	bne.n	80044d2 <_VPrintTarget+0x18a>
        sFormat++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80044a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044a8:	2b2f      	cmp	r3, #47	; 0x2f
 80044aa:	d912      	bls.n	80044d2 <_VPrintTarget+0x18a>
 80044ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044b0:	2b39      	cmp	r3, #57	; 0x39
 80044b2:	d80e      	bhi.n	80044d2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80044ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	461a      	mov	r2, r3
 80044c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044ca:	4413      	add	r3, r2
 80044cc:	3b30      	subs	r3, #48	; 0x30
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80044d0:	e7e4      	b.n	800449c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80044da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044de:	2b6c      	cmp	r3, #108	; 0x6c
 80044e0:	d003      	beq.n	80044ea <_VPrintTarget+0x1a2>
 80044e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044e6:	2b68      	cmp	r3, #104	; 0x68
 80044e8:	d107      	bne.n	80044fa <_VPrintTarget+0x1b2>
          c = *sFormat;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80044f8:	e7ef      	b.n	80044da <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80044fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044fe:	2b25      	cmp	r3, #37	; 0x25
 8004500:	f000 80b3 	beq.w	800466a <_VPrintTarget+0x322>
 8004504:	2b25      	cmp	r3, #37	; 0x25
 8004506:	f2c0 80b7 	blt.w	8004678 <_VPrintTarget+0x330>
 800450a:	2b78      	cmp	r3, #120	; 0x78
 800450c:	f300 80b4 	bgt.w	8004678 <_VPrintTarget+0x330>
 8004510:	2b58      	cmp	r3, #88	; 0x58
 8004512:	f2c0 80b1 	blt.w	8004678 <_VPrintTarget+0x330>
 8004516:	3b58      	subs	r3, #88	; 0x58
 8004518:	2b20      	cmp	r3, #32
 800451a:	f200 80ad 	bhi.w	8004678 <_VPrintTarget+0x330>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <_VPrintTarget+0x1dc>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	0800461b 	.word	0x0800461b
 8004528:	08004679 	.word	0x08004679
 800452c:	08004679 	.word	0x08004679
 8004530:	08004679 	.word	0x08004679
 8004534:	08004679 	.word	0x08004679
 8004538:	08004679 	.word	0x08004679
 800453c:	08004679 	.word	0x08004679
 8004540:	08004679 	.word	0x08004679
 8004544:	08004679 	.word	0x08004679
 8004548:	08004679 	.word	0x08004679
 800454c:	08004679 	.word	0x08004679
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045cf 	.word	0x080045cf
 8004558:	08004679 	.word	0x08004679
 800455c:	08004679 	.word	0x08004679
 8004560:	08004679 	.word	0x08004679
 8004564:	08004679 	.word	0x08004679
 8004568:	08004679 	.word	0x08004679
 800456c:	08004679 	.word	0x08004679
 8004570:	08004679 	.word	0x08004679
 8004574:	08004679 	.word	0x08004679
 8004578:	08004679 	.word	0x08004679
 800457c:	08004679 	.word	0x08004679
 8004580:	08004679 	.word	0x08004679
 8004584:	08004645 	.word	0x08004645
 8004588:	08004679 	.word	0x08004679
 800458c:	08004679 	.word	0x08004679
 8004590:	08004679 	.word	0x08004679
 8004594:	08004679 	.word	0x08004679
 8004598:	080045f5 	.word	0x080045f5
 800459c:	08004679 	.word	0x08004679
 80045a0:	08004679 	.word	0x08004679
 80045a4:	0800461b 	.word	0x0800461b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80045bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd1c 	bl	8004004 <_StoreChar>
        break;
 80045cc:	e055      	b.n	800467a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6011      	str	r1, [r2, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80045dc:	f107 0014 	add.w	r0, r7, #20
 80045e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	220a      	movs	r2, #10
 80045ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045ee:	f7ff fe1b 	bl	8004228 <_PrintInt>
        break;
 80045f2:	e042      	b.n	800467a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6011      	str	r1, [r2, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004602:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004604:	f107 0014 	add.w	r0, r7, #20
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	220a      	movs	r2, #10
 8004614:	f7ff fd72 	bl	80040fc <_PrintUnsigned>
        break;
 8004618:	e02f      	b.n	800467a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1d19      	adds	r1, r3, #4
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6011      	str	r1, [r2, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004628:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800462a:	f107 0014 	add.w	r0, r7, #20
 800462e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	2210      	movs	r2, #16
 800463a:	f7ff fd5f 	bl	80040fc <_PrintUnsigned>
        break;
 800463e:	e01c      	b.n	800467a <_VPrintTarget+0x332>
 8004640:	2001a7a8 	.word	0x2001a7a8
      case 'p':
        v = va_arg(*pParamList, int);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1d19      	adds	r1, r3, #4
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004654:	f107 0014 	add.w	r0, r7, #20
 8004658:	2300      	movs	r3, #0
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2308      	movs	r3, #8
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2308      	movs	r3, #8
 8004662:	2210      	movs	r2, #16
 8004664:	f7ff fd4a 	bl	80040fc <_PrintUnsigned>
        break;
 8004668:	e007      	b.n	800467a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800466a:	f107 0314 	add.w	r3, r7, #20
 800466e:	2125      	movs	r1, #37	; 0x25
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fcc7 	bl	8004004 <_StoreChar>
        break;
 8004676:	e000      	b.n	800467a <_VPrintTarget+0x332>
      default:
        break;
 8004678:	bf00      	nop
      }
      sFormat++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e007      	b.n	8004692 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004682:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fcb9 	bl	8004004 <_StoreChar>
    }
  } while (*sFormat);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f47f ae72 	bne.w	8004380 <_VPrintTarget+0x38>
 800469c:	e000      	b.n	80046a0 <_VPrintTarget+0x358>
      break;
 800469e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d041      	beq.n	800472a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	e00b      	b.n	80046d0 <_VPrintTarget+0x388>
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	1c59      	adds	r1, r3, #1
 80046c0:	6439      	str	r1, [r7, #64]	; 0x40
 80046c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	09db      	lsrs	r3, r3, #7
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	2b7f      	cmp	r3, #127	; 0x7f
 80046d4:	d8f0      	bhi.n	80046b8 <_VPrintTarget+0x370>
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	643a      	str	r2, [r7, #64]	; 0x40
 80046dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
 80046ee:	e00b      	b.n	8004708 <_VPrintTarget+0x3c0>
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80046fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	2b7f      	cmp	r3, #127	; 0x7f
 800470c:	d8f0      	bhi.n	80046f0 <_VPrintTarget+0x3a8>
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	63ba      	str	r2, [r7, #56]	; 0x38
 8004714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	221a      	movs	r2, #26
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fb85 	bl	8003e34 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004730:	bf00      	nop
 8004732:	3758      	adds	r7, #88	; 0x58
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004746:	2300      	movs	r3, #0
 8004748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800474c:	4917      	ldr	r1, [pc, #92]	; (80047ac <SEGGER_SYSVIEW_Init+0x74>)
 800474e:	4818      	ldr	r0, [pc, #96]	; (80047b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004750:	f7ff f93c 	bl	80039cc <SEGGER_RTT_AllocUpBuffer>
 8004754:	4603      	mov	r3, r0
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800475a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800475e:	785a      	ldrb	r2, [r3, #1]
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004762:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004766:	7e1b      	ldrb	r3, [r3, #24]
 8004768:	4618      	mov	r0, r3
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2308      	movs	r3, #8
 8004770:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <SEGGER_SYSVIEW_Init+0x80>)
 8004772:	490f      	ldr	r1, [pc, #60]	; (80047b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004774:	f7ff f9ae 	bl	8003ad4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800477e:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <SEGGER_SYSVIEW_Init+0x84>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004784:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004786:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004798:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20019770 	.word	0x20019770
 80047b0:	08005eec 	.word	0x08005eec
 80047b4:	2001a778 	.word	0x2001a778
 80047b8:	2001a770 	.word	0x2001a770
 80047bc:	e0001004 	.word	0xe0001004

080047c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6113      	str	r3, [r2, #16]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	2001a778 	.word	0x2001a778

080047e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047e8:	f3ef 8311 	mrs	r3, BASEPRI
 80047ec:	f04f 0120 	mov.w	r1, #32
 80047f0:	f381 8811 	msr	BASEPRI, r1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	4808      	ldr	r0, [pc, #32]	; (8004818 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047f8:	f7ff fa29 	bl	8003c4e <_PreparePacket>
 80047fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f7ff fb16 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2001a7a8 	.word	0x2001a7a8

0800481c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	f04f 0120 	mov.w	r1, #32
 800482e:	f381 8811 	msr	BASEPRI, r1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4816      	ldr	r0, [pc, #88]	; (8004890 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004836:	f7ff fa0a 	bl	8003c4e <_PreparePacket>
 800483a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e00b      	b.n	8004862 <SEGGER_SYSVIEW_RecordU32+0x46>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	61f9      	str	r1, [r7, #28]
 8004854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	09db      	lsrs	r3, r3, #7
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b7f      	cmp	r3, #127	; 0x7f
 8004866:	d8f0      	bhi.n	800484a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	61fa      	str	r2, [r7, #28]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	6938      	ldr	r0, [r7, #16]
 800487e:	f7ff fad9 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f383 8811 	msr	BASEPRI, r3
}
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	2001a7a8 	.word	0x2001a7a8

08004894 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048a0:	f3ef 8311 	mrs	r3, BASEPRI
 80048a4:	f04f 0120 	mov.w	r1, #32
 80048a8:	f381 8811 	msr	BASEPRI, r1
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	4825      	ldr	r0, [pc, #148]	; (8004944 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048b0:	f7ff f9cd 	bl	8003c4e <_PreparePacket>
 80048b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	e00b      	b.n	80048dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	2b7f      	cmp	r3, #127	; 0x7f
 80048e0:	d8f0      	bhi.n	80048c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e00b      	b.n	8004914 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	6279      	str	r1, [r7, #36]	; 0x24
 8004906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	09db      	lsrs	r3, r3, #7
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b7f      	cmp	r3, #127	; 0x7f
 8004918:	d8f0      	bhi.n	80048fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	627a      	str	r2, [r7, #36]	; 0x24
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f7ff fa80 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
 800493c:	3730      	adds	r7, #48	; 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2001a7a8 	.word	0x2001a7a8

08004948 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	; 0x30
 800494c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800494e:	4b59      	ldr	r3, [pc, #356]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004954:	f3ef 8311 	mrs	r3, BASEPRI
 8004958:	f04f 0120 	mov.w	r1, #32
 800495c:	f381 8811 	msr	BASEPRI, r1
 8004960:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004962:	4b54      	ldr	r3, [pc, #336]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	220a      	movs	r2, #10
 8004968:	4953      	ldr	r1, [pc, #332]	; (8004ab8 <SEGGER_SYSVIEW_Start+0x170>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fc30 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004976:	f7fe ff3b 	bl	80037f0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800497a:	200a      	movs	r0, #10
 800497c:	f7ff ff30 	bl	80047e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004980:	f3ef 8311 	mrs	r3, BASEPRI
 8004984:	f04f 0120 	mov.w	r1, #32
 8004988:	f381 8811 	msr	BASEPRI, r1
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	484b      	ldr	r0, [pc, #300]	; (8004abc <SEGGER_SYSVIEW_Start+0x174>)
 8004990:	f7ff f95d 	bl	8003c4e <_PreparePacket>
 8004994:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800499e:	4b45      	ldr	r3, [pc, #276]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a4:	e00b      	b.n	80049be <SEGGER_SYSVIEW_Start+0x76>
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	09db      	lsrs	r3, r3, #7
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2b7f      	cmp	r3, #127	; 0x7f
 80049c2:	d8f0      	bhi.n	80049a6 <SEGGER_SYSVIEW_Start+0x5e>
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	e00b      	b.n	80049f8 <SEGGER_SYSVIEW_Start+0xb0>
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	6279      	str	r1, [r7, #36]	; 0x24
 80049ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	09db      	lsrs	r3, r3, #7
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2b7f      	cmp	r3, #127	; 0x7f
 80049fc:	d8f0      	bhi.n	80049e0 <SEGGER_SYSVIEW_Start+0x98>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	627a      	str	r2, [r7, #36]	; 0x24
 8004a04:	6a3a      	ldr	r2, [r7, #32]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_Start+0xea>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	61f9      	str	r1, [r7, #28]
 8004a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b7f      	cmp	r3, #127	; 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_Start+0xd2>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	e00b      	b.n	8004a6a <SEGGER_SYSVIEW_Start+0x122>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	6179      	str	r1, [r7, #20]
 8004a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a6e:	d8f0      	bhi.n	8004a52 <SEGGER_SYSVIEW_Start+0x10a>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	617a      	str	r2, [r7, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a80:	2218      	movs	r2, #24
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff f9d5 	bl	8003e34 <_SendPacket>
      RECORD_END();
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a9e:	f000 f9eb 	bl	8004e78 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004aa2:	f000 f9b1 	bl	8004e08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004aa6:	f000 fc13 	bl	80052d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004aaa:	bf00      	nop
 8004aac:	3730      	adds	r7, #48	; 0x30
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2001a778 	.word	0x2001a778
 8004ab8:	08005f14 	.word	0x08005f14
 8004abc:	2001a7a8 	.word	0x2001a7a8

08004ac0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aca:	f04f 0120 	mov.w	r1, #32
 8004ace:	f381 8811 	msr	BASEPRI, r1
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	480b      	ldr	r0, [pc, #44]	; (8004b04 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ad6:	f7ff f8ba 	bl	8003c4e <_PreparePacket>
 8004ada:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ae4:	220b      	movs	r2, #11
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	f7ff f9a3 	bl	8003e34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <SEGGER_SYSVIEW_Stop+0x48>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f383 8811 	msr	BASEPRI, r3
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2001a7a8 	.word	0x2001a7a8
 8004b08:	2001a778 	.word	0x2001a778

08004b0c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	; 0x30
 8004b10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b12:	f3ef 8311 	mrs	r3, BASEPRI
 8004b16:	f04f 0120 	mov.w	r1, #32
 8004b1a:	f381 8811 	msr	BASEPRI, r1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	4845      	ldr	r0, [pc, #276]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b22:	f7ff f894 	bl	8003c4e <_PreparePacket>
 8004b26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b30:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	e00b      	b.n	8004b8a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1c59      	adds	r1, r3, #1
 8004b7a:	6279      	str	r1, [r7, #36]	; 0x24
 8004b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8e:	d8f0      	bhi.n	8004b72 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	627a      	str	r2, [r7, #36]	; 0x24
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e00b      	b.n	8004bc4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	61f9      	str	r1, [r7, #28]
 8004bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc8:	d8f0      	bhi.n	8004bac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	61fa      	str	r2, [r7, #28]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e00b      	b.n	8004bfc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	6179      	str	r1, [r7, #20]
 8004bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004c00:	d8f0      	bhi.n	8004be4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	617a      	str	r2, [r7, #20]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c12:	2218      	movs	r2, #24
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	68b8      	ldr	r0, [r7, #8]
 8004c18:	f7ff f90c 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c2a:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	4798      	blx	r3
  }
}
 8004c30:	bf00      	nop
 8004c32:	3730      	adds	r7, #48	; 0x30
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	2001a7a8 	.word	0x2001a7a8
 8004c3c:	2001a778 	.word	0x2001a778

08004c40 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b092      	sub	sp, #72	; 0x48
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c48:	f3ef 8311 	mrs	r3, BASEPRI
 8004c4c:	f04f 0120 	mov.w	r1, #32
 8004c50:	f381 8811 	msr	BASEPRI, r1
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	486a      	ldr	r0, [pc, #424]	; (8004e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004c58:	f7fe fff9 	bl	8003c4e <_PreparePacket>
 8004c5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
 8004c72:	e00b      	b.n	8004c8c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	6479      	str	r1, [r7, #68]	; 0x44
 8004c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	09db      	lsrs	r3, r3, #7
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c90:	d8f0      	bhi.n	8004c74 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	647a      	str	r2, [r7, #68]	; 0x44
 8004c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cac:	e00b      	b.n	8004cc6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb4:	1c59      	adds	r1, r3, #1
 8004cb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	09db      	lsrs	r3, r3, #7
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cca:	d8f0      	bhi.n	8004cae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7fe ff65 	bl	8003bb4 <_EncodeStr>
 8004cea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004cec:	2209      	movs	r2, #9
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6938      	ldr	r0, [r7, #16]
 8004cf2:	f7ff f89f 	bl	8003e34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
 8004d0a:	e00b      	b.n	8004d24 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	1c59      	adds	r1, r3, #1
 8004d14:	6379      	str	r1, [r7, #52]	; 0x34
 8004d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	09db      	lsrs	r3, r3, #7
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2b7f      	cmp	r3, #127	; 0x7f
 8004d28:	d8f0      	bhi.n	8004d0c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d44:	e00b      	b.n	8004d5e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	09db      	lsrs	r3, r3, #7
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	2b7f      	cmp	r3, #127	; 0x7f
 8004d62:	d8f0      	bhi.n	8004d46 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6279      	str	r1, [r7, #36]	; 0x24
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	627a      	str	r2, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e00b      	b.n	8004dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	61f9      	str	r1, [r7, #28]
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004de6:	2215      	movs	r2, #21
 8004de8:	68f9      	ldr	r1, [r7, #12]
 8004dea:	6938      	ldr	r0, [r7, #16]
 8004dec:	f7ff f822 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f383 8811 	msr	BASEPRI, r3
}
 8004df6:	bf00      	nop
 8004df8:	3748      	adds	r7, #72	; 0x48
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2001a7a8 	.word	0x2001a7a8
 8004e04:	2001a778 	.word	0x2001a778

08004e08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e1e:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4798      	blx	r3
  }
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2001a778 	.word	0x2001a778

08004e30 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e38:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3c:	f04f 0120 	mov.w	r1, #32
 8004e40:	f381 8811 	msr	BASEPRI, r1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	480b      	ldr	r0, [pc, #44]	; (8004e74 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e48:	f7fe ff01 	bl	8003c4e <_PreparePacket>
 8004e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	f7fe feae 	bl	8003bb4 <_EncodeStr>
 8004e58:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e5a:	220e      	movs	r2, #14
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6938      	ldr	r0, [r7, #16]
 8004e60:	f7fe ffe8 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f383 8811 	msr	BASEPRI, r3
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2001a7a8 	.word	0x2001a7a8

08004e78 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01a      	beq.n	8004ebc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4798      	blx	r3
 8004e98:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e9c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	000a      	movs	r2, r1
 8004eac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004eae:	4613      	mov	r3, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	200d      	movs	r0, #13
 8004eb6:	f7ff fced 	bl	8004894 <SEGGER_SYSVIEW_RecordU32x2>
 8004eba:	e006      	b.n	8004eca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	200c      	movs	r0, #12
 8004ec4:	f7ff fcaa 	bl	800481c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2001a778 	.word	0x2001a778
 8004ed8:	e0001004 	.word	0xe0001004

08004edc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	f04f 0120 	mov.w	r1, #32
 8004eea:	f381 8811 	msr	BASEPRI, r1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	4819      	ldr	r0, [pc, #100]	; (8004f58 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ef2:	f7fe feac 	bl	8003c4e <_PreparePacket>
 8004ef6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f04:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6179      	str	r1, [r7, #20]
 8004f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	617a      	str	r2, [r7, #20]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f3e:	2202      	movs	r2, #2
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f7fe ff76 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2001a7a8 	.word	0x2001a7a8
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f66:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6a:	f04f 0120 	mov.w	r1, #32
 8004f6e:	f381 8811 	msr	BASEPRI, r1
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	4807      	ldr	r0, [pc, #28]	; (8004f94 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f76:	f7fe fe6a 	bl	8003c4e <_PreparePacket>
 8004f7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6838      	ldr	r0, [r7, #0]
 8004f82:	f7fe ff57 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f383 8811 	msr	BASEPRI, r3
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	2001a7a8 	.word	0x2001a7a8

08004f98 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa2:	f04f 0120 	mov.w	r1, #32
 8004fa6:	f381 8811 	msr	BASEPRI, r1
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	4807      	ldr	r0, [pc, #28]	; (8004fcc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004fae:	f7fe fe4e 	bl	8003c4e <_PreparePacket>
 8004fb2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004fb4:	2212      	movs	r2, #18
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6838      	ldr	r0, [r7, #0]
 8004fba:	f7fe ff3b 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	2001a7a8 	.word	0x2001a7a8

08004fd0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fda:	f04f 0120 	mov.w	r1, #32
 8004fde:	f381 8811 	msr	BASEPRI, r1
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004fe6:	f7fe fe32 	bl	8003c4e <_PreparePacket>
 8004fea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004fec:	2211      	movs	r2, #17
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	6838      	ldr	r0, [r7, #0]
 8004ff2:	f7fe ff1f 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2001a7a8 	.word	0x2001a7a8

08005008 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005010:	f3ef 8311 	mrs	r3, BASEPRI
 8005014:	f04f 0120 	mov.w	r1, #32
 8005018:	f381 8811 	msr	BASEPRI, r1
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	4819      	ldr	r0, [pc, #100]	; (8005084 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005020:	f7fe fe15 	bl	8003c4e <_PreparePacket>
 8005024:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800502a:	4b17      	ldr	r3, [pc, #92]	; (8005088 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e00b      	b.n	8005056 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	61f9      	str	r1, [r7, #28]
 8005048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b7f      	cmp	r3, #127	; 0x7f
 800505a:	d8f0      	bhi.n	800503e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	61fa      	str	r2, [r7, #28]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800506c:	2208      	movs	r2, #8
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	6938      	ldr	r0, [r7, #16]
 8005072:	f7fe fedf 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f383 8811 	msr	BASEPRI, r3
}
 800507c:	bf00      	nop
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2001a7a8 	.word	0x2001a7a8
 8005088:	2001a778 	.word	0x2001a778

0800508c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005094:	f3ef 8311 	mrs	r3, BASEPRI
 8005098:	f04f 0120 	mov.w	r1, #32
 800509c:	f381 8811 	msr	BASEPRI, r1
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	4819      	ldr	r0, [pc, #100]	; (8005108 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050a4:	f7fe fdd3 	bl	8003c4e <_PreparePacket>
 80050a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e00b      	b.n	80050da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1c59      	adds	r1, r3, #1
 80050ca:	61f9      	str	r1, [r7, #28]
 80050cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	09db      	lsrs	r3, r3, #7
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b7f      	cmp	r3, #127	; 0x7f
 80050de:	d8f0      	bhi.n	80050c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80050f0:	2204      	movs	r2, #4
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	6938      	ldr	r0, [r7, #16]
 80050f6:	f7fe fe9d 	bl	8003e34 <_SendPacket>
  RECORD_END();
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f383 8811 	msr	BASEPRI, r3
}
 8005100:	bf00      	nop
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	2001a7a8 	.word	0x2001a7a8
 800510c:	2001a778 	.word	0x2001a778

08005110 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005118:	f3ef 8311 	mrs	r3, BASEPRI
 800511c:	f04f 0120 	mov.w	r1, #32
 8005120:	f381 8811 	msr	BASEPRI, r1
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	4819      	ldr	r0, [pc, #100]	; (800518c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005128:	f7fe fd91 	bl	8003c4e <_PreparePacket>
 800512c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e00b      	b.n	800515e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	1c59      	adds	r1, r3, #1
 800514e:	61f9      	str	r1, [r7, #28]
 8005150:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	09db      	lsrs	r3, r3, #7
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b7f      	cmp	r3, #127	; 0x7f
 8005162:	d8f0      	bhi.n	8005146 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005174:	2206      	movs	r2, #6
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6938      	ldr	r0, [r7, #16]
 800517a:	f7fe fe5b 	bl	8003e34 <_SendPacket>
  RECORD_END();
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f383 8811 	msr	BASEPRI, r3
}
 8005184:	bf00      	nop
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	2001a7a8 	.word	0x2001a7a8
 8005190:	2001a778 	.word	0x2001a778

08005194 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d06d      	beq.n	8005282 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051ac:	2300      	movs	r3, #0
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b0:	e008      	b.n	80051c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	3301      	adds	r3, #1
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d3f2      	bcc.n	80051b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80051cc:	e000      	b.n	80051d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80051ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d055      	beq.n	8005282 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051d6:	f3ef 8311 	mrs	r3, BASEPRI
 80051da:	f04f 0120 	mov.w	r1, #32
 80051de:	f381 8811 	msr	BASEPRI, r1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	482a      	ldr	r0, [pc, #168]	; (8005290 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80051e6:	f7fe fd32 	bl	8003c4e <_PreparePacket>
 80051ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	e00b      	b.n	8005212 <SEGGER_SYSVIEW_SendModule+0x7e>
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	6279      	str	r1, [r7, #36]	; 0x24
 8005204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	09db      	lsrs	r3, r3, #7
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2b7f      	cmp	r3, #127	; 0x7f
 8005216:	d8f0      	bhi.n	80051fa <SEGGER_SYSVIEW_SendModule+0x66>
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	627a      	str	r2, [r7, #36]	; 0x24
 800521e:	6a3a      	ldr	r2, [r7, #32]
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e00b      	b.n	800524c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	1c59      	adds	r1, r3, #1
 800523c:	61f9      	str	r1, [r7, #28]
 800523e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	09db      	lsrs	r3, r3, #7
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b7f      	cmp	r3, #127	; 0x7f
 8005250:	d8f0      	bhi.n	8005234 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	61fa      	str	r2, [r7, #28]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	4619      	mov	r1, r3
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7fe fca2 	bl	8003bb4 <_EncodeStr>
 8005270:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005272:	2216      	movs	r2, #22
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f7fe fddc 	bl	8003e34 <_SendPacket>
      RECORD_END();
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005282:	bf00      	nop
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2001a7a0 	.word	0x2001a7a0
 8005290:	2001a7a8 	.word	0x2001a7a8

08005294 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00f      	beq.n	80052c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f2      	bne.n	80052a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	2001a7a0 	.word	0x2001a7a0

080052d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80052d6:	f3ef 8311 	mrs	r3, BASEPRI
 80052da:	f04f 0120 	mov.w	r1, #32
 80052de:	f381 8811 	msr	BASEPRI, r1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	4817      	ldr	r0, [pc, #92]	; (8005344 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80052e6:	f7fe fcb2 	bl	8003c4e <_PreparePacket>
 80052ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e00b      	b.n	8005314 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	6179      	str	r1, [r7, #20]
 8005306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	09db      	lsrs	r3, r3, #7
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b7f      	cmp	r3, #127	; 0x7f
 8005318:	d8f0      	bhi.n	80052fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	617a      	str	r2, [r7, #20]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800532a:	221b      	movs	r2, #27
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f7fe fd80 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f383 8811 	msr	BASEPRI, r3
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2001a7a8 	.word	0x2001a7a8
 8005348:	2001a7a4 	.word	0x2001a7a4

0800534c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800534c:	b40f      	push	{r0, r1, r2, r3}
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	461a      	mov	r2, r3
 800535e:	2100      	movs	r1, #0
 8005360:	6938      	ldr	r0, [r7, #16]
 8005362:	f7fe fff1 	bl	8004348 <_VPrintTarget>
  va_end(ParamList);
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr

08005374 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800537c:	f3ef 8311 	mrs	r3, BASEPRI
 8005380:	f04f 0120 	mov.w	r1, #32
 8005384:	f381 8811 	msr	BASEPRI, r1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	4827      	ldr	r0, [pc, #156]	; (8005428 <SEGGER_SYSVIEW_Warn+0xb4>)
 800538c:	f7fe fc5f 	bl	8003c4e <_PreparePacket>
 8005390:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	6938      	ldr	r0, [r7, #16]
 8005398:	f7fe fc0c 	bl	8003bb4 <_EncodeStr>
 800539c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	2301      	movs	r3, #1
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	e00b      	b.n	80053c0 <SEGGER_SYSVIEW_Warn+0x4c>
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	1c59      	adds	r1, r3, #1
 80053b0:	6279      	str	r1, [r7, #36]	; 0x24
 80053b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	09db      	lsrs	r3, r3, #7
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2b7f      	cmp	r3, #127	; 0x7f
 80053c4:	d8f0      	bhi.n	80053a8 <SEGGER_SYSVIEW_Warn+0x34>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	627a      	str	r2, [r7, #36]	; 0x24
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e00b      	b.n	80053f8 <SEGGER_SYSVIEW_Warn+0x84>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	61f9      	str	r1, [r7, #28]
 80053ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <SEGGER_SYSVIEW_Warn+0x6c>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	61fa      	str	r2, [r7, #28]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800540e:	221a      	movs	r2, #26
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	6938      	ldr	r0, [r7, #16]
 8005414:	f7fe fd0e 	bl	8003e34 <_SendPacket>
  RECORD_END();
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	2001a7a8 	.word	0x2001a7a8

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4d0d      	ldr	r5, [pc, #52]	; (8005464 <__libc_init_array+0x38>)
 8005430:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005432:	1b64      	subs	r4, r4, r5
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	2600      	movs	r6, #0
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	4d0b      	ldr	r5, [pc, #44]	; (800546c <__libc_init_array+0x40>)
 800543e:	4c0c      	ldr	r4, [pc, #48]	; (8005470 <__libc_init_array+0x44>)
 8005440:	f000 fcc0 	bl	8005dc4 <_init>
 8005444:	1b64      	subs	r4, r4, r5
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	2600      	movs	r6, #0
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f855 3b04 	ldr.w	r3, [r5], #4
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f855 3b04 	ldr.w	r3, [r5], #4
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	08005f6c 	.word	0x08005f6c
 8005468:	08005f6c 	.word	0x08005f6c
 800546c:	08005f6c 	.word	0x08005f6c
 8005470:	08005f70 	.word	0x08005f70

08005474 <memcmp>:
 8005474:	b510      	push	{r4, lr}
 8005476:	3901      	subs	r1, #1
 8005478:	4402      	add	r2, r0
 800547a:	4290      	cmp	r0, r2
 800547c:	d101      	bne.n	8005482 <memcmp+0xe>
 800547e:	2000      	movs	r0, #0
 8005480:	e005      	b.n	800548e <memcmp+0x1a>
 8005482:	7803      	ldrb	r3, [r0, #0]
 8005484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005488:	42a3      	cmp	r3, r4
 800548a:	d001      	beq.n	8005490 <memcmp+0x1c>
 800548c:	1b18      	subs	r0, r3, r4
 800548e:	bd10      	pop	{r4, pc}
 8005490:	3001      	adds	r0, #1
 8005492:	e7f2      	b.n	800547a <memcmp+0x6>

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054aa:	4291      	cmp	r1, r2
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <memset>:
 80054b0:	4402      	add	r2, r0
 80054b2:	4603      	mov	r3, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d100      	bne.n	80054ba <memset+0xa>
 80054b8:	4770      	bx	lr
 80054ba:	f803 1b01 	strb.w	r1, [r3], #1
 80054be:	e7f9      	b.n	80054b4 <memset+0x4>

080054c0 <sniprintf>:
 80054c0:	b40c      	push	{r2, r3}
 80054c2:	b530      	push	{r4, r5, lr}
 80054c4:	4b17      	ldr	r3, [pc, #92]	; (8005524 <sniprintf+0x64>)
 80054c6:	1e0c      	subs	r4, r1, #0
 80054c8:	681d      	ldr	r5, [r3, #0]
 80054ca:	b09d      	sub	sp, #116	; 0x74
 80054cc:	da08      	bge.n	80054e0 <sniprintf+0x20>
 80054ce:	238b      	movs	r3, #139	; 0x8b
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	b01d      	add	sp, #116	; 0x74
 80054d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054dc:	b002      	add	sp, #8
 80054de:	4770      	bx	lr
 80054e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80054e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054e8:	bf14      	ite	ne
 80054ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80054ee:	4623      	moveq	r3, r4
 80054f0:	9304      	str	r3, [sp, #16]
 80054f2:	9307      	str	r3, [sp, #28]
 80054f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	9006      	str	r0, [sp, #24]
 80054fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005500:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005502:	ab21      	add	r3, sp, #132	; 0x84
 8005504:	a902      	add	r1, sp, #8
 8005506:	4628      	mov	r0, r5
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	f000 f869 	bl	80055e0 <_svfiprintf_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	bfbc      	itt	lt
 8005512:	238b      	movlt	r3, #139	; 0x8b
 8005514:	602b      	strlt	r3, [r5, #0]
 8005516:	2c00      	cmp	r4, #0
 8005518:	d0dd      	beq.n	80054d6 <sniprintf+0x16>
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e7d9      	b.n	80054d6 <sniprintf+0x16>
 8005522:	bf00      	nop
 8005524:	20000014 	.word	0x20000014

08005528 <__ssputs_r>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	688e      	ldr	r6, [r1, #8]
 800552e:	429e      	cmp	r6, r3
 8005530:	4682      	mov	sl, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4690      	mov	r8, r2
 8005536:	461f      	mov	r7, r3
 8005538:	d838      	bhi.n	80055ac <__ssputs_r+0x84>
 800553a:	898a      	ldrh	r2, [r1, #12]
 800553c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005540:	d032      	beq.n	80055a8 <__ssputs_r+0x80>
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	6909      	ldr	r1, [r1, #16]
 8005546:	eba5 0901 	sub.w	r9, r5, r1
 800554a:	6965      	ldr	r5, [r4, #20]
 800554c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005554:	3301      	adds	r3, #1
 8005556:	444b      	add	r3, r9
 8005558:	106d      	asrs	r5, r5, #1
 800555a:	429d      	cmp	r5, r3
 800555c:	bf38      	it	cc
 800555e:	461d      	movcc	r5, r3
 8005560:	0553      	lsls	r3, r2, #21
 8005562:	d531      	bpl.n	80055c8 <__ssputs_r+0xa0>
 8005564:	4629      	mov	r1, r5
 8005566:	f000 fb55 	bl	8005c14 <_malloc_r>
 800556a:	4606      	mov	r6, r0
 800556c:	b950      	cbnz	r0, 8005584 <__ssputs_r+0x5c>
 800556e:	230c      	movs	r3, #12
 8005570:	f8ca 3000 	str.w	r3, [sl]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	6921      	ldr	r1, [r4, #16]
 8005586:	464a      	mov	r2, r9
 8005588:	f7ff ff84 	bl	8005494 <memcpy>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	6126      	str	r6, [r4, #16]
 800559a:	6165      	str	r5, [r4, #20]
 800559c:	444e      	add	r6, r9
 800559e:	eba5 0509 	sub.w	r5, r5, r9
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	463e      	mov	r6, r7
 80055a8:	42be      	cmp	r6, r7
 80055aa:	d900      	bls.n	80055ae <__ssputs_r+0x86>
 80055ac:	463e      	mov	r6, r7
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	4632      	mov	r2, r6
 80055b2:	4641      	mov	r1, r8
 80055b4:	f000 faa8 	bl	8005b08 <memmove>
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	1b9b      	subs	r3, r3, r6
 80055bc:	60a3      	str	r3, [r4, #8]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	4433      	add	r3, r6
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e7db      	b.n	8005580 <__ssputs_r+0x58>
 80055c8:	462a      	mov	r2, r5
 80055ca:	f000 fb97 	bl	8005cfc <_realloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e1      	bne.n	8005598 <__ssputs_r+0x70>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	4650      	mov	r0, sl
 80055d8:	f000 fab0 	bl	8005b3c <_free_r>
 80055dc:	e7c7      	b.n	800556e <__ssputs_r+0x46>
	...

080055e0 <_svfiprintf_r>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4698      	mov	r8, r3
 80055e6:	898b      	ldrh	r3, [r1, #12]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4607      	mov	r7, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	d50e      	bpl.n	8005612 <_svfiprintf_r+0x32>
 80055f4:	690b      	ldr	r3, [r1, #16]
 80055f6:	b963      	cbnz	r3, 8005612 <_svfiprintf_r+0x32>
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	f000 fb0b 	bl	8005c14 <_malloc_r>
 80055fe:	6028      	str	r0, [r5, #0]
 8005600:	6128      	str	r0, [r5, #16]
 8005602:	b920      	cbnz	r0, 800560e <_svfiprintf_r+0x2e>
 8005604:	230c      	movs	r3, #12
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e0d1      	b.n	80057b2 <_svfiprintf_r+0x1d2>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	616b      	str	r3, [r5, #20]
 8005612:	2300      	movs	r3, #0
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	2320      	movs	r3, #32
 8005618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005620:	2330      	movs	r3, #48	; 0x30
 8005622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057cc <_svfiprintf_r+0x1ec>
 8005626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	4623      	mov	r3, r4
 8005630:	469a      	mov	sl, r3
 8005632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005636:	b10a      	cbz	r2, 800563c <_svfiprintf_r+0x5c>
 8005638:	2a25      	cmp	r2, #37	; 0x25
 800563a:	d1f9      	bne.n	8005630 <_svfiprintf_r+0x50>
 800563c:	ebba 0b04 	subs.w	fp, sl, r4
 8005640:	d00b      	beq.n	800565a <_svfiprintf_r+0x7a>
 8005642:	465b      	mov	r3, fp
 8005644:	4622      	mov	r2, r4
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ff6d 	bl	8005528 <__ssputs_r>
 800564e:	3001      	adds	r0, #1
 8005650:	f000 80aa 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005656:	445a      	add	r2, fp
 8005658:	9209      	str	r2, [sp, #36]	; 0x24
 800565a:	f89a 3000 	ldrb.w	r3, [sl]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80a2 	beq.w	80057a8 <_svfiprintf_r+0x1c8>
 8005664:	2300      	movs	r3, #0
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566e:	f10a 0a01 	add.w	sl, sl, #1
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	9307      	str	r3, [sp, #28]
 8005676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567a:	931a      	str	r3, [sp, #104]	; 0x68
 800567c:	4654      	mov	r4, sl
 800567e:	2205      	movs	r2, #5
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4851      	ldr	r0, [pc, #324]	; (80057cc <_svfiprintf_r+0x1ec>)
 8005686:	f7fa fdf3 	bl	8000270 <memchr>
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	b9d8      	cbnz	r0, 80056c6 <_svfiprintf_r+0xe6>
 800568e:	06d0      	lsls	r0, r2, #27
 8005690:	bf44      	itt	mi
 8005692:	2320      	movmi	r3, #32
 8005694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005698:	0711      	lsls	r1, r2, #28
 800569a:	bf44      	itt	mi
 800569c:	232b      	movmi	r3, #43	; 0x2b
 800569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a2:	f89a 3000 	ldrb.w	r3, [sl]
 80056a6:	2b2a      	cmp	r3, #42	; 0x2a
 80056a8:	d015      	beq.n	80056d6 <_svfiprintf_r+0xf6>
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	4654      	mov	r4, sl
 80056ae:	2000      	movs	r0, #0
 80056b0:	f04f 0c0a 	mov.w	ip, #10
 80056b4:	4621      	mov	r1, r4
 80056b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ba:	3b30      	subs	r3, #48	; 0x30
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d94e      	bls.n	800575e <_svfiprintf_r+0x17e>
 80056c0:	b1b0      	cbz	r0, 80056f0 <_svfiprintf_r+0x110>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e014      	b.n	80056f0 <_svfiprintf_r+0x110>
 80056c6:	eba0 0308 	sub.w	r3, r0, r8
 80056ca:	fa09 f303 	lsl.w	r3, r9, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	46a2      	mov	sl, r4
 80056d4:	e7d2      	b.n	800567c <_svfiprintf_r+0x9c>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	9103      	str	r1, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfbb      	ittet	lt
 80056e2:	425b      	neglt	r3, r3
 80056e4:	f042 0202 	orrlt.w	r2, r2, #2
 80056e8:	9307      	strge	r3, [sp, #28]
 80056ea:	9307      	strlt	r3, [sp, #28]
 80056ec:	bfb8      	it	lt
 80056ee:	9204      	strlt	r2, [sp, #16]
 80056f0:	7823      	ldrb	r3, [r4, #0]
 80056f2:	2b2e      	cmp	r3, #46	; 0x2e
 80056f4:	d10c      	bne.n	8005710 <_svfiprintf_r+0x130>
 80056f6:	7863      	ldrb	r3, [r4, #1]
 80056f8:	2b2a      	cmp	r3, #42	; 0x2a
 80056fa:	d135      	bne.n	8005768 <_svfiprintf_r+0x188>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9203      	str	r2, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfb8      	it	lt
 8005708:	f04f 33ff 	movlt.w	r3, #4294967295
 800570c:	3402      	adds	r4, #2
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057dc <_svfiprintf_r+0x1fc>
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	2203      	movs	r2, #3
 8005718:	4650      	mov	r0, sl
 800571a:	f7fa fda9 	bl	8000270 <memchr>
 800571e:	b140      	cbz	r0, 8005732 <_svfiprintf_r+0x152>
 8005720:	2340      	movs	r3, #64	; 0x40
 8005722:	eba0 000a 	sub.w	r0, r0, sl
 8005726:	fa03 f000 	lsl.w	r0, r3, r0
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	4303      	orrs	r3, r0
 800572e:	3401      	adds	r4, #1
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4826      	ldr	r0, [pc, #152]	; (80057d0 <_svfiprintf_r+0x1f0>)
 8005738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573c:	2206      	movs	r2, #6
 800573e:	f7fa fd97 	bl	8000270 <memchr>
 8005742:	2800      	cmp	r0, #0
 8005744:	d038      	beq.n	80057b8 <_svfiprintf_r+0x1d8>
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <_svfiprintf_r+0x1f4>)
 8005748:	bb1b      	cbnz	r3, 8005792 <_svfiprintf_r+0x1b2>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3307      	adds	r3, #7
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	3308      	adds	r3, #8
 8005754:	9303      	str	r3, [sp, #12]
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	4433      	add	r3, r6
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	e767      	b.n	800562e <_svfiprintf_r+0x4e>
 800575e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005762:	460c      	mov	r4, r1
 8005764:	2001      	movs	r0, #1
 8005766:	e7a5      	b.n	80056b4 <_svfiprintf_r+0xd4>
 8005768:	2300      	movs	r3, #0
 800576a:	3401      	adds	r4, #1
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 0c0a 	mov.w	ip, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577a:	3a30      	subs	r2, #48	; 0x30
 800577c:	2a09      	cmp	r2, #9
 800577e:	d903      	bls.n	8005788 <_svfiprintf_r+0x1a8>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0c5      	beq.n	8005710 <_svfiprintf_r+0x130>
 8005784:	9105      	str	r1, [sp, #20]
 8005786:	e7c3      	b.n	8005710 <_svfiprintf_r+0x130>
 8005788:	fb0c 2101 	mla	r1, ip, r1, r2
 800578c:	4604      	mov	r4, r0
 800578e:	2301      	movs	r3, #1
 8005790:	e7f0      	b.n	8005774 <_svfiprintf_r+0x194>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_svfiprintf_r+0x1f8>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4638      	mov	r0, r7
 800579e:	f3af 8000 	nop.w
 80057a2:	1c42      	adds	r2, r0, #1
 80057a4:	4606      	mov	r6, r0
 80057a6:	d1d6      	bne.n	8005756 <_svfiprintf_r+0x176>
 80057a8:	89ab      	ldrh	r3, [r5, #12]
 80057aa:	065b      	lsls	r3, r3, #25
 80057ac:	f53f af2c 	bmi.w	8005608 <_svfiprintf_r+0x28>
 80057b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b2:	b01d      	add	sp, #116	; 0x74
 80057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	462a      	mov	r2, r5
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_svfiprintf_r+0x1f8>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4638      	mov	r0, r7
 80057c4:	f000 f87a 	bl	80058bc <_printf_i>
 80057c8:	e7eb      	b.n	80057a2 <_svfiprintf_r+0x1c2>
 80057ca:	bf00      	nop
 80057cc:	08005f30 	.word	0x08005f30
 80057d0:	08005f3a 	.word	0x08005f3a
 80057d4:	00000000 	.word	0x00000000
 80057d8:	08005529 	.word	0x08005529
 80057dc:	08005f36 	.word	0x08005f36

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4699      	mov	r9, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bfb8      	it	lt
 80057f4:	4613      	movlt	r3, r2
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057fc:	4607      	mov	r7, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc26      	bgt.n	8005876 <_printf_common+0x96>
 8005828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800582c:	1e13      	subs	r3, r2, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d42b      	bmi.n	8005890 <_printf_common+0xb0>
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	4649      	mov	r1, r9
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d01e      	beq.n	8005884 <_printf_common+0xa4>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	68e5      	ldr	r5, [r4, #12]
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	f003 0306 	and.w	r3, r3, #6
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf08      	it	eq
 8005854:	1aad      	subeq	r5, r5, r2
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	bf0c      	ite	eq
 800585c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005860:	2500      	movne	r5, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfc4      	itt	gt
 8005866:	1a9b      	subgt	r3, r3, r2
 8005868:	18ed      	addgt	r5, r5, r3
 800586a:	2600      	movs	r6, #0
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xc8>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xa8>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xac>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c6      	b.n	800581e <_printf_common+0x3e>
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	2030      	movs	r0, #48	; 0x30
 8005896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589a:	4422      	add	r2, r4
 800589c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a4:	3302      	adds	r3, #2
 80058a6:	e7c7      	b.n	8005838 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa4>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x8e>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	7e0f      	ldrb	r7, [r1, #24]
 80058c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058c4:	2f78      	cmp	r7, #120	; 0x78
 80058c6:	4691      	mov	r9, r2
 80058c8:	4680      	mov	r8, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	469a      	mov	sl, r3
 80058ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d8 	beq.w	8005a8e <_printf_i+0x1d2>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a3 	beq.w	8005a2a <_printf_i+0x16e>
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a101      	add	r1, pc, #4	; (adr r1, 80058fc <_printf_i+0x40>)
 80058f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a75 	.word	0x08005a75
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a57 	.word	0x08005a57
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a97 	.word	0x08005a97
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a5f 	.word	0x08005a5f
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a3      	b.n	8005ab0 <_printf_i+0x1f4>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	6829      	ldr	r1, [r5, #0]
 800596c:	0606      	lsls	r6, r0, #24
 800596e:	f101 0304 	add.w	r3, r1, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	2e00      	cmp	r6, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	4276      	negs	r6, r6
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005986:	230a      	movs	r3, #10
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	680e      	ldr	r6, [r1, #0]
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005992:	bf18      	it	ne
 8005994:	b236      	sxthne	r6, r6
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	6029      	str	r1, [r5, #0]
 80059a0:	0601      	lsls	r1, r0, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681e      	ldr	r6, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0646      	lsls	r6, r0, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881e      	ldrh	r6, [r3, #0]
 80059ae:	4854      	ldr	r0, [pc, #336]	; (8005b00 <_printf_i+0x244>)
 80059b0:	2f6f      	cmp	r7, #111	; 0x6f
 80059b2:	bf0c      	ite	eq
 80059b4:	2308      	moveq	r3, #8
 80059b6:	230a      	movne	r3, #10
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6865      	ldr	r5, [r4, #4]
 80059c0:	60a5      	str	r5, [r4, #8]
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90e      	cbnz	r6, 80059d4 <_printf_i+0x118>
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d04d      	beq.n	8005a70 <_printf_i+0x1b4>
 80059d4:	4615      	mov	r5, r2
 80059d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059da:	fb03 6711 	mls	r7, r3, r1, r6
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059e4:	4637      	mov	r7, r6
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460e      	mov	r6, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x11a>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x14c>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07de      	lsls	r6, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x14c>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	; 0x30
 8005a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a08:	1b52      	subs	r2, r2, r5
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee2 	bl	80057e0 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14c      	bne.n	8005aba <_printf_i+0x1fe>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	4835      	ldr	r0, [pc, #212]	; (8005b00 <_printf_i+0x244>)
 8005a2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a38:	6029      	str	r1, [r5, #0]
 8005a3a:	061d      	lsls	r5, r3, #24
 8005a3c:	d514      	bpl.n	8005a68 <_printf_i+0x1ac>
 8005a3e:	07df      	lsls	r7, r3, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f043 0320 	orrmi.w	r3, r3, #32
 8005a46:	6023      	strmi	r3, [r4, #0]
 8005a48:	b91e      	cbnz	r6, 8005a52 <_printf_i+0x196>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2310      	movs	r3, #16
 8005a54:	e7b0      	b.n	80059b8 <_printf_i+0xfc>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2378      	movs	r3, #120	; 0x78
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	e7e3      	b.n	8005a30 <_printf_i+0x174>
 8005a68:	0659      	lsls	r1, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2b6      	uxthmi	r6, r6
 8005a6e:	e7e6      	b.n	8005a3e <_printf_i+0x182>
 8005a70:	4615      	mov	r5, r2
 8005a72:	e7bb      	b.n	80059ec <_printf_i+0x130>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6826      	ldr	r6, [r4, #0]
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	1d18      	adds	r0, r3, #4
 8005a7c:	6028      	str	r0, [r5, #0]
 8005a7e:	0635      	lsls	r5, r6, #24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0x1cc>
 8005a84:	6019      	str	r1, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <_printf_i+0x1d2>
 8005a88:	0670      	lsls	r0, r6, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0x1c8>
 8005a8c:	8019      	strh	r1, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	4615      	mov	r5, r2
 8005a94:	e7ba      	b.n	8005a0c <_printf_i+0x150>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7fa fbe4 	bl	8000270 <memchr>
 8005aa8:	b108      	cbz	r0, 8005aae <_printf_i+0x1f2>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	e7a8      	b.n	8005a0c <_printf_i+0x150>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ab      	beq.n	8005a20 <_printf_i+0x164>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d413      	bmi.n	8005af6 <_printf_i+0x23a>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	bfb8      	it	lt
 8005ad6:	4618      	movlt	r0, r3
 8005ad8:	e7a4      	b.n	8005a24 <_printf_i+0x168>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4632      	mov	r2, r6
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09b      	beq.n	8005a20 <_printf_i+0x164>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9903      	ldr	r1, [sp, #12]
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf2      	bgt.n	8005ada <_printf_i+0x21e>
 8005af4:	e7eb      	b.n	8005ace <_printf_i+0x212>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f104 0619 	add.w	r6, r4, #25
 8005afc:	e7f5      	b.n	8005aea <_printf_i+0x22e>
 8005afe:	bf00      	nop
 8005b00:	08005f41 	.word	0x08005f41
 8005b04:	08005f52 	.word	0x08005f52

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0402 	add.w	r4, r1, r2
 8005b10:	d902      	bls.n	8005b18 <memmove+0x10>
 8005b12:	4284      	cmp	r4, r0
 8005b14:	4623      	mov	r3, r4
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x20>
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	42a1      	cmp	r1, r4
 8005b1c:	d008      	beq.n	8005b30 <memmove+0x28>
 8005b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0x12>
 8005b28:	4402      	add	r2, r0
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x2a>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x24>

08005b3c <_free_r>:
 8005b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d044      	beq.n	8005bcc <_free_r+0x90>
 8005b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4e:	bfb8      	it	lt
 8005b50:	18e4      	addlt	r4, r4, r3
 8005b52:	f000 f913 	bl	8005d7c <__malloc_lock>
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <_free_r+0x94>)
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b933      	cbnz	r3, 8005b6c <_free_r+0x30>
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b68:	f000 b90e 	b.w	8005d88 <__malloc_unlock>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d908      	bls.n	8005b82 <_free_r+0x46>
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	1961      	adds	r1, r4, r5
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf01      	itttt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	1949      	addeq	r1, r1, r5
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	e7ed      	b.n	8005b5e <_free_r+0x22>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x50>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x46>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1855      	adds	r5, r2, r1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x70>
 8005b94:	6824      	ldr	r4, [r4, #0]
 8005b96:	4421      	add	r1, r4
 8005b98:	1854      	adds	r4, r2, r1
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1e0      	bne.n	8005b62 <_free_r+0x26>
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	4421      	add	r1, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	e7da      	b.n	8005b62 <_free_r+0x26>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x78>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	e7d6      	b.n	8005b62 <_free_r+0x26>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7ca      	b.n	8005b62 <_free_r+0x26>
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	2001a88c 	.word	0x2001a88c

08005bd4 <sbrk_aligned>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4e0e      	ldr	r6, [pc, #56]	; (8005c10 <sbrk_aligned+0x3c>)
 8005bd8:	460c      	mov	r4, r1
 8005bda:	6831      	ldr	r1, [r6, #0]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	b911      	cbnz	r1, 8005be6 <sbrk_aligned+0x12>
 8005be0:	f000 f8bc 	bl	8005d5c <_sbrk_r>
 8005be4:	6030      	str	r0, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f8b7 	bl	8005d5c <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d00a      	beq.n	8005c08 <sbrk_aligned+0x34>
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d007      	beq.n	8005c0c <sbrk_aligned+0x38>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f8ac 	bl	8005d5c <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d101      	bne.n	8005c0c <sbrk_aligned+0x38>
 8005c08:	f04f 34ff 	mov.w	r4, #4294967295
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	2001a890 	.word	0x2001a890

08005c14 <_malloc_r>:
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4607      	mov	r7, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d905      	bls.n	8005c3c <_malloc_r+0x28>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	2600      	movs	r6, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	4e2e      	ldr	r6, [pc, #184]	; (8005cf8 <_malloc_r+0xe4>)
 8005c3e:	f000 f89d 	bl	8005d7c <__malloc_lock>
 8005c42:	6833      	ldr	r3, [r6, #0]
 8005c44:	461c      	mov	r4, r3
 8005c46:	bb34      	cbnz	r4, 8005c96 <_malloc_r+0x82>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7ff ffc2 	bl	8005bd4 <sbrk_aligned>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	4604      	mov	r4, r0
 8005c54:	d14d      	bne.n	8005cf2 <_malloc_r+0xde>
 8005c56:	6834      	ldr	r4, [r6, #0]
 8005c58:	4626      	mov	r6, r4
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	d140      	bne.n	8005ce0 <_malloc_r+0xcc>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4631      	mov	r1, r6
 8005c62:	4638      	mov	r0, r7
 8005c64:	eb04 0803 	add.w	r8, r4, r3
 8005c68:	f000 f878 	bl	8005d5c <_sbrk_r>
 8005c6c:	4580      	cmp	r8, r0
 8005c6e:	d13a      	bne.n	8005ce6 <_malloc_r+0xd2>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	3503      	adds	r5, #3
 8005c74:	1a6d      	subs	r5, r5, r1
 8005c76:	f025 0503 	bic.w	r5, r5, #3
 8005c7a:	3508      	adds	r5, #8
 8005c7c:	2d0c      	cmp	r5, #12
 8005c7e:	bf38      	it	cc
 8005c80:	250c      	movcc	r5, #12
 8005c82:	4629      	mov	r1, r5
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7ff ffa5 	bl	8005bd4 <sbrk_aligned>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d02b      	beq.n	8005ce6 <_malloc_r+0xd2>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	442b      	add	r3, r5
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	e00e      	b.n	8005cb4 <_malloc_r+0xa0>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	1b52      	subs	r2, r2, r5
 8005c9a:	d41e      	bmi.n	8005cda <_malloc_r+0xc6>
 8005c9c:	2a0b      	cmp	r2, #11
 8005c9e:	d916      	bls.n	8005cce <_malloc_r+0xba>
 8005ca0:	1961      	adds	r1, r4, r5
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	6025      	str	r5, [r4, #0]
 8005ca6:	bf18      	it	ne
 8005ca8:	6059      	strne	r1, [r3, #4]
 8005caa:	6863      	ldr	r3, [r4, #4]
 8005cac:	bf08      	it	eq
 8005cae:	6031      	streq	r1, [r6, #0]
 8005cb0:	5162      	str	r2, [r4, r5]
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f104 060b 	add.w	r6, r4, #11
 8005cba:	f000 f865 	bl	8005d88 <__malloc_unlock>
 8005cbe:	f026 0607 	bic.w	r6, r6, #7
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	1af2      	subs	r2, r6, r3
 8005cc6:	d0b6      	beq.n	8005c36 <_malloc_r+0x22>
 8005cc8:	1b9b      	subs	r3, r3, r6
 8005cca:	50a3      	str	r3, [r4, r2]
 8005ccc:	e7b3      	b.n	8005c36 <_malloc_r+0x22>
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	bf0c      	ite	eq
 8005cd4:	6032      	streq	r2, [r6, #0]
 8005cd6:	605a      	strne	r2, [r3, #4]
 8005cd8:	e7ec      	b.n	8005cb4 <_malloc_r+0xa0>
 8005cda:	4623      	mov	r3, r4
 8005cdc:	6864      	ldr	r4, [r4, #4]
 8005cde:	e7b2      	b.n	8005c46 <_malloc_r+0x32>
 8005ce0:	4634      	mov	r4, r6
 8005ce2:	6876      	ldr	r6, [r6, #4]
 8005ce4:	e7b9      	b.n	8005c5a <_malloc_r+0x46>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4638      	mov	r0, r7
 8005cec:	f000 f84c 	bl	8005d88 <__malloc_unlock>
 8005cf0:	e7a1      	b.n	8005c36 <_malloc_r+0x22>
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	e7de      	b.n	8005cb4 <_malloc_r+0xa0>
 8005cf6:	bf00      	nop
 8005cf8:	2001a88c 	.word	0x2001a88c

08005cfc <_realloc_r>:
 8005cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d00:	4680      	mov	r8, r0
 8005d02:	4614      	mov	r4, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	b921      	cbnz	r1, 8005d12 <_realloc_r+0x16>
 8005d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	f7ff bf81 	b.w	8005c14 <_malloc_r>
 8005d12:	b92a      	cbnz	r2, 8005d20 <_realloc_r+0x24>
 8005d14:	f7ff ff12 	bl	8005b3c <_free_r>
 8005d18:	4625      	mov	r5, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	f000 f838 	bl	8005d94 <_malloc_usable_size_r>
 8005d24:	4284      	cmp	r4, r0
 8005d26:	4607      	mov	r7, r0
 8005d28:	d802      	bhi.n	8005d30 <_realloc_r+0x34>
 8005d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d2e:	d812      	bhi.n	8005d56 <_realloc_r+0x5a>
 8005d30:	4621      	mov	r1, r4
 8005d32:	4640      	mov	r0, r8
 8005d34:	f7ff ff6e 	bl	8005c14 <_malloc_r>
 8005d38:	4605      	mov	r5, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0ed      	beq.n	8005d1a <_realloc_r+0x1e>
 8005d3e:	42bc      	cmp	r4, r7
 8005d40:	4622      	mov	r2, r4
 8005d42:	4631      	mov	r1, r6
 8005d44:	bf28      	it	cs
 8005d46:	463a      	movcs	r2, r7
 8005d48:	f7ff fba4 	bl	8005494 <memcpy>
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fef4 	bl	8005b3c <_free_r>
 8005d54:	e7e1      	b.n	8005d1a <_realloc_r+0x1e>
 8005d56:	4635      	mov	r5, r6
 8005d58:	e7df      	b.n	8005d1a <_realloc_r+0x1e>
	...

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	; (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f000 f81e 	bl	8005da8 <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	2001a894 	.word	0x2001a894

08005d7c <__malloc_lock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_lock+0x8>)
 8005d7e:	f000 b811 	b.w	8005da4 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	2001a898 	.word	0x2001a898

08005d88 <__malloc_unlock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__malloc_unlock+0x8>)
 8005d8a:	f000 b80c 	b.w	8005da6 <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	2001a898 	.word	0x2001a898

08005d94 <_malloc_usable_size_r>:
 8005d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d98:	1f18      	subs	r0, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bfbc      	itt	lt
 8005d9e:	580b      	ldrlt	r3, [r1, r0]
 8005da0:	18c0      	addlt	r0, r0, r3
 8005da2:	4770      	bx	lr

08005da4 <__retarget_lock_acquire_recursive>:
 8005da4:	4770      	bx	lr

08005da6 <__retarget_lock_release_recursive>:
 8005da6:	4770      	bx	lr

08005da8 <_sbrk>:
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <_sbrk+0x14>)
 8005daa:	6811      	ldr	r1, [r2, #0]
 8005dac:	4603      	mov	r3, r0
 8005dae:	b909      	cbnz	r1, 8005db4 <_sbrk+0xc>
 8005db0:	4903      	ldr	r1, [pc, #12]	; (8005dc0 <_sbrk+0x18>)
 8005db2:	6011      	str	r1, [r2, #0]
 8005db4:	6810      	ldr	r0, [r2, #0]
 8005db6:	4403      	add	r3, r0
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4770      	bx	lr
 8005dbc:	2001a89c 	.word	0x2001a89c
 8005dc0:	2001a8a0 	.word	0x2001a8a0

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
