
BMI160_AccGyro_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b1c  08006b1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b24  08006b24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001a828  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a8a0  2001a8a0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001312c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d72  00000000  00000000  000331d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00035f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00037148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a80  00000000  00000000  000381c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fef  00000000  00000000  0003dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d82ae  00000000  00000000  00051c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129edd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052cc  00000000  00000000  00129f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068f0 	.word	0x080068f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080068f0 	.word	0x080068f0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192b8 	.word	0x200192b8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fbdf 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f851 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8b9 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

 // SEGGER_UART_init(500000);

  SEGGER_SYSVIEW_Conf();
 8000632:	f002 ffbf 	bl	80035b4 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000636:	f004 fb1d 	bl	8004c74 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x98>)
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4919      	ldr	r1, [pc, #100]	; (80006b0 <main+0x9c>)
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	f001 febd 	bl	80023ca <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0xa4>)
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	4910      	ldr	r1, [pc, #64]	; (80006bc <main+0xa8>)
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	f001 fea4 	bl	80023ca <xTaskCreate>
 8000682:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00a      	beq.n	80006a0 <main+0x8c>
        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	60fb      	str	r3, [r7, #12]
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <main+0x8a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a0:	f001 ffe8 	bl	8002674 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x90>
 80006a6:	bf00      	nop
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	08006908 	.word	0x08006908
 80006b0:	08006920 	.word	0x08006920
 80006b4:	08000a55 	.word	0x08000a55
 80006b8:	08006928 	.word	0x08006928
 80006bc:	08006940 	.word	0x08006940
 80006c0:	08000aa9 	.word	0x08000aa9

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f894 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe5f 	bl	800140c <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9e8 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8c0 	bl	80018fc <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9d1 	bl	8000b28 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fda2 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fd9d 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fd97 	bl	80013a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	486c      	ldr	r0, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800088e:	f000 fbed 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fbdf 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008ca:	f000 fbcf 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fbc2 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fbb2 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000924:	f000 fba2 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800093c:	f000 fb96 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800095e:	f000 fb85 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fb76 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 800099e:	f000 fb65 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fb58 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fb47 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 80009f2:	f000 fb3b 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a14:	f000 fb2a 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 8000a2e:	f000 fb1d 	bl	800106c <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <task1_handler+0x44>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f004 ff49 	bl	80058fc <sniprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <task1_handler+0x48>)
 8000a70:	f000 fcb1 	bl	80013d6 <HAL_GPIO_TogglePin>
		printf("Task 1 is running\n");
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <task1_handler+0x4c>)
 8000a76:	f004 ff39 	bl	80058ec <puts>
	    //HAL_Delay(500);
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fdfa 	bl	8005678 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <task1_handler+0x50>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	f3bf 8f4f 	dsb	sy
 8000a90:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a94:	e7e2      	b.n	8000a5c <task1_handler+0x8>
 8000a96:	bf00      	nop
 8000a98:	08006948 	.word	0x08006948
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	0800694c 	.word	0x0800694c
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09c      	sub	sp, #112	; 0x70
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ab0:	f107 000c 	add.w	r0, r7, #12
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <task2_handler+0x4c>)
 8000ab8:	2164      	movs	r1, #100	; 0x64
 8000aba:	f004 ff1f 	bl	80058fc <sniprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <task2_handler+0x50>)
 8000ac4:	f000 fc87 	bl	80013d6 <HAL_GPIO_TogglePin>
		printf("Task 2 is Running\n");
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <task2_handler+0x54>)
 8000aca:	f004 ff0f 	bl	80058ec <puts>
		HAL_Delay(500);
 8000ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad2:	f000 f9c5 	bl	8000e60 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fdcc 	bl	8005678 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <task2_handler+0x58>)
 8000ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000af0:	e7de      	b.n	8000ab0 <task2_handler+0x8>
 8000af2:	bf00      	nop
 8000af4:	08006948 	.word	0x08006948
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	08006960 	.word	0x08006960
 8000b00:	e000ed04 	.word	0xe000ed04

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 f983 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40001000 	.word	0x40001000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b76:	f002 f967 	bl	8002e48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <HAL_InitTick+0xe4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <HAL_InitTick+0xe4>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_InitTick+0xe4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb4:	f107 0210 	add.w	r2, r7, #16
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f8a8 	bl	8001d14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bce:	f001 f88d 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8000bd2:	6378      	str	r0, [r7, #52]	; 0x34
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd6:	f001 f889 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_InitTick+0xe8>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	0c9b      	lsrs	r3, r3, #18
 8000bea:	3b01      	subs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_InitTick+0xec>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_InitTick+0xf0>)
 8000bf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_InitTick+0xec>)
 8000bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_InitTick+0xec>)
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_InitTick+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_InitTick+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_InitTick+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <HAL_InitTick+0xec>)
 8000c16:	f001 f8af 	bl	8001d78 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d11b      	bne.n	8000c60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <HAL_InitTick+0xec>)
 8000c2a:	f001 f8ff 	bl	8001e2c <HAL_TIM_Base_Start_IT>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d111      	bne.n	8000c60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c3c:	2036      	movs	r0, #54	; 0x36
 8000c3e:	f000 fa07 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d808      	bhi.n	8000c5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f000 f9e3 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0xf4>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e002      	b.n	8000c60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	20000094 	.word	0x20000094
 8000c78:	40001000 	.word	0x40001000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM6_DAC_IRQHandler+0x10>)
 8000cb2:	f001 f92b 	bl	8001f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000094 	.word	0x20000094

08000cc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00a      	b.n	8000ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd2:	f3af 8000 	nop.w
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	b2ca      	uxtb	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf0      	blt.n	8000cd2 <_read+0x12>
  }

  return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d22:	605a      	str	r2, [r3, #4]
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_isatty>:

int _isatty(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f004 fce1 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc2b 	bl	8000614 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dcc:	08006b2c 	.word	0x08006b2c
  ldr r2, =_sbss
 8000dd0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dd4:	2001a8a0 	.word	0x2001a8a0

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8fc 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff febc 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe92 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200000dc 	.word	0x200000dc

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000dc 	.word	0x200000dc

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e16b      	b.n	8001360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 815a 	bne.w	800135a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80b4 	beq.w	800135a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b60      	ldr	r3, [pc, #384]	; (8001378 <HAL_GPIO_Init+0x30c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a5f      	ldr	r2, [pc, #380]	; (8001378 <HAL_GPIO_Init+0x30c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a5b      	ldr	r2, [pc, #364]	; (800137c <HAL_GPIO_Init+0x310>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x314>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x318>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x31c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x320>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x324>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x328>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x32c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x330>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20a>
 8001272:	2307      	movs	r3, #7
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001276:	2308      	movs	r3, #8
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x310>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x334>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae90 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e267      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d075      	beq.n	8001516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d00c      	beq.n	8001450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	2b08      	cmp	r3, #8
 8001440:	d112      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001442:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b7e      	ldr	r3, [pc, #504]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05b      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e242      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x74>
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a75      	ldr	r2, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b70      	ldr	r3, [pc, #448]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6f      	ldr	r2, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b6d      	ldr	r3, [pc, #436]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6c      	ldr	r2, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 80014a4:	4b69      	ldr	r3, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a68      	ldr	r2, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a65      	ldr	r2, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fcc0 	bl	8000e48 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fcbc 	bl	8000e48 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e207      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcac 	bl	8000e48 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fca8 	bl	8000e48 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1f3      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c7      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4937      	ldr	r1, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_RCC_OscConfig+0x244>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fc61 	bl	8000e48 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fc5d 	bl	8000e48 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1a8      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4925      	ldr	r1, [pc, #148]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_OscConfig+0x244>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc40 	bl	8000e48 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc3c 	bl	8000e48 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e187      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d036      	beq.n	8001664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d016      	beq.n	800162c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x248>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff fc20 	bl	8000e48 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fc1c 	bl	8000e48 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e167      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_OscConfig+0x240>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x200>
 800162a:	e01b      	b.n	8001664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x248>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fc09 	bl	8000e48 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	e00e      	b.n	8001658 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fc05 	bl	8000e48 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d907      	bls.n	8001658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e150      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	42470000 	.word	0x42470000
 8001654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ea      	bne.n	800163a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8097 	beq.w	80017a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b81      	ldr	r3, [pc, #516]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a7c      	ldr	r2, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b7a      	ldr	r3, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b77      	ldr	r3, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a73      	ldr	r2, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbc5 	bl	8000e48 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fbc1 	bl	8000e48 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e10c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x474>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2ea>
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a63      	ldr	r2, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x30c>
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a5e      	ldr	r2, [pc, #376]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x324>
 8001718:	4b58      	ldr	r3, [pc, #352]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a57      	ldr	r2, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d015      	beq.n	8001764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fb86 	bl	8000e48 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fb82 	bl	8000e48 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0cb      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0ee      	beq.n	8001740 <HAL_RCC_OscConfig+0x334>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001764:	f7ff fb70 	bl	8000e48 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fb6c 	bl	8000e48 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0b5      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a38      	ldr	r2, [pc, #224]	; (800187c <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a1 	beq.w	80018ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d05c      	beq.n	8001870 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d141      	bne.n	8001842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb40 	bl	8000e48 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fb3c 	bl	8000e48 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e087      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x470>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	491b      	ldr	r1, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fb15 	bl	8000e48 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fb11 	bl	8000e48 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e05c      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x416>
 8001840:	e054      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_OscConfig+0x478>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fafe 	bl	8000e48 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fafa 	bl	8000e48 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e045      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x470>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x444>
 800186e:	e03d      	b.n	80018ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e038      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
 8001884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x4ec>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d121      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0cc      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d90c      	bls.n	8001938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d044      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e067      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff fa2c 	bl	8000e48 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff fa28 	bl	8000e48 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e04f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d20c      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f870 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08006a48 	.word	0x08006a48
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b094      	sub	sp, #80	; 0x50
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x40>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f200 80e1 	bhi.w	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afa:	e0db      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b00:	e0db      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b06:	e0d8      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b12:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	2200      	movs	r2, #0
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
 8001b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4621      	mov	r1, r4
 8001b54:	1a51      	subs	r1, r2, r1
 8001b56:	6139      	str	r1, [r7, #16]
 8001b58:	4629      	mov	r1, r5
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	018b      	lsls	r3, r1, #6
 8001b70:	4651      	mov	r1, sl
 8001b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b76:	4651      	mov	r1, sl
 8001b78:	018a      	lsls	r2, r1, #6
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b80:	4659      	mov	r1, fp
 8001b82:	eb63 0901 	sbc.w	r9, r3, r1
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	eb18 0303 	adds.w	r3, r8, r3
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	eb49 0303 	adc.w	r3, r9, r3
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	024b      	lsls	r3, r1, #9
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	024a      	lsls	r2, r1, #9
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd8:	f7fe fb9a 	bl	8000310 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be4:	e058      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c00:	4642      	mov	r2, r8
 8001c02:	464b      	mov	r3, r9
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c38:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	00eb      	lsls	r3, r5, #3
 8001c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4e:	00e2      	lsls	r2, r4, #3
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	18e3      	adds	r3, r4, r3
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	eb45 0303 	adc.w	r3, r5, r3
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c82:	2200      	movs	r2, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	61fa      	str	r2, [r7, #28]
 8001c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8c:	f7fe fb40 	bl	8000310 <__aeabi_uldivmod>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4613      	mov	r3, r2
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb2:	e002      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3750      	adds	r7, #80	; 0x50
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08006a58 	.word	0x08006a58

08001d14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	220f      	movs	r2, #15
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_RCC_GetClockConfig+0x60>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0207 	and.w	r2, r3, #7
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e041      	b.n	8001e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f839 	bl	8001e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 f9d8 	bl	800216c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04e      	b.n	8001ee2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d01d      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d111      	bne.n	8001ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d010      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ece:	e007      	b.n	8001ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	40000c00 	.word	0x40000c00
 8001f00:	40010400 	.word	0x40010400
 8001f04:	40014000 	.word	0x40014000
 8001f08:	40001800 	.word	0x40001800

08001f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0202 	mvn.w	r2, #2
 8001f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8ee 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8e0 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8f1 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0204 	mvn.w	r2, #4
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8c4 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8b6 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8c7 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0208 	mvn.w	r2, #8
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f89a 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f88c 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f89d 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b10      	cmp	r3, #16
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0210 	mvn.w	r2, #16
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2208      	movs	r2, #8
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f870 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f862 	bl	800211c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f873 	bl	8002144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0201 	mvn.w	r2, #1
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fd3a 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b80      	cmp	r3, #128	; 0x80
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f902 	bl	80022c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f838 	bl	8002158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b20      	cmp	r3, #32
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0220 	mvn.w	r2, #32
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8cc 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a40      	ldr	r2, [pc, #256]	; (8002280 <TIM_Base_SetConfig+0x114>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d00f      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <TIM_Base_SetConfig+0x118>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00b      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <TIM_Base_SetConfig+0x11c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3b      	ldr	r2, [pc, #236]	; (800228c <TIM_Base_SetConfig+0x120>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d003      	beq.n	80021ac <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <TIM_Base_SetConfig+0x124>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d108      	bne.n	80021be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <TIM_Base_SetConfig+0x114>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d027      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <TIM_Base_SetConfig+0x118>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d023      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <TIM_Base_SetConfig+0x11c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2a      	ldr	r2, [pc, #168]	; (800228c <TIM_Base_SetConfig+0x120>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a29      	ldr	r2, [pc, #164]	; (8002290 <TIM_Base_SetConfig+0x124>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d017      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <TIM_Base_SetConfig+0x128>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <TIM_Base_SetConfig+0x12c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00f      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <TIM_Base_SetConfig+0x130>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00b      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <TIM_Base_SetConfig+0x134>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <TIM_Base_SetConfig+0x138>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <TIM_Base_SetConfig+0x13c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d108      	bne.n	8002230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <TIM_Base_SetConfig+0x114>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_Base_SetConfig+0xf8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <TIM_Base_SetConfig+0x124>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d103      	bne.n	800226c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	615a      	str	r2, [r3, #20]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40010400 	.word	0x40010400
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800
 80022a0:	40001800 	.word	0x40001800
 80022a4:	40001c00 	.word	0x40001c00
 80022a8:	40002000 	.word	0x40002000

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0208 	add.w	r2, r3, #8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0208 	add.w	r2, r3, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6852      	ldr	r2, [r2, #4]
 8002396:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d103      	bne.n	80023aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08c      	sub	sp, #48	; 0x30
 80023ce:	af04      	add	r7, sp, #16
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fedc 	bl	800319c <pvPortMalloc>
 80023e4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023ec:	2058      	movs	r0, #88	; 0x58
 80023ee:	f000 fed5 	bl	800319c <pvPortMalloc>
 80023f2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002400:	e005      	b.n	800240e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f000 ffaa 	bl	800335c <vPortFree>
 8002408:	e001      	b.n	800240e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	2300      	movs	r3, #0
 8002418:	9303      	str	r3, [sp, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f80e 	bl	800244c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002430:	69f8      	ldr	r0, [r7, #28]
 8002432:	f000 f8a1 	bl	8002578 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e002      	b.n	8002442 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002442:	69bb      	ldr	r3, [r7, #24]
    }
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	461a      	mov	r2, r3
 8002464:	21a5      	movs	r1, #165	; 0xa5
 8002466:	f003 f9cb 	bl	8005800 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002474:	3b01      	subs	r3, #1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <prvInitialiseNewTask+0x58>
        __asm volatile
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	617b      	str	r3, [r7, #20]
    }
 80024a0:	bf00      	nop
 80024a2:	e7fe      	b.n	80024a2 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01f      	beq.n	80024ea <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e012      	b.n	80024d6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	7819      	ldrb	r1, [r3, #0]
 80024b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	3334      	adds	r3, #52	; 0x34
 80024c0:	460a      	mov	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d9e9      	bls.n	80024b0 <prvInitialiseNewTask+0x64>
 80024dc:	e000      	b.n	80024e0 <prvInitialiseNewTask+0x94>
            {
                break;
 80024de:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024e8:	e003      	b.n	80024f2 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d901      	bls.n	80024fc <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024f8:	2304      	movs	r3, #4
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002506:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	2200      	movs	r2, #0
 800250c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	3304      	adds	r3, #4
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fefe 	bl	8002314 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	3318      	adds	r3, #24
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fef9 	bl	8002314 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002526:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	f1c3 0205 	rsb	r2, r3, #5
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	3350      	adds	r3, #80	; 0x50
 800253c:	2204      	movs	r2, #4
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f003 f95d 	bl	8005800 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	3354      	adds	r3, #84	; 0x54
 800254a:	2201      	movs	r2, #1
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f003 f956 	bl	8005800 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	69b8      	ldr	r0, [r7, #24]
 800255a:	f000 fb49 	bl	8002bf0 <pxPortInitialiseStack>
 800255e:	4602      	mov	r2, r0
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af02      	add	r7, sp, #8
 800257e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002580:	f000 fce0 	bl	8002f44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <prvAddNewTaskToReadyList+0xe4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a34      	ldr	r2, [pc, #208]	; (800265c <prvAddNewTaskToReadyList+0xe4>)
 800258c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <prvAddNewTaskToReadyList+0xe8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <prvAddNewTaskToReadyList+0xe8>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <prvAddNewTaskToReadyList+0xe4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d110      	bne.n	80025c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025a4:	f000 fa8a 	bl	8002abc <prvInitialiseTaskLists>
 80025a8:	e00d      	b.n	80025c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <prvAddNewTaskToReadyList+0xec>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <prvAddNewTaskToReadyList+0xe8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d802      	bhi.n	80025c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025c0:	4a27      	ldr	r2, [pc, #156]	; (8002660 <prvAddNewTaskToReadyList+0xe8>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <prvAddNewTaskToReadyList+0xf0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <prvAddNewTaskToReadyList+0xf0>)
 80025ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <prvAddNewTaskToReadyList+0xf0>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <prvAddNewTaskToReadyList+0x94>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 fea7 	bl	8005334 <SEGGER_SYSVIEW_OnTaskCreate>
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	461d      	mov	r5, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461c      	mov	r4, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	1ae3      	subs	r3, r4, r3
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	462b      	mov	r3, r5
 8002608:	f001 f876 	bl	80036f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f002 ff14 	bl	800543c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <prvAddNewTaskToReadyList+0xf4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <prvAddNewTaskToReadyList+0xf4>)
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <prvAddNewTaskToReadyList+0xf8>)
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff fe76 	bl	800232e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002642:	f000 fcaf 	bl	8002fa4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <prvAddNewTaskToReadyList+0xec>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <prvAddNewTaskToReadyList+0xe8>)
 8002650:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bdb0      	pop	{r4, r5, r7, pc}
 800265a:	bf00      	nop
 800265c:	200001b8 	.word	0x200001b8
 8002660:	200000e0 	.word	0x200000e0
 8002664:	200001c4 	.word	0x200001c4
 8002668:	200001d4 	.word	0x200001d4
 800266c:	200001c0 	.word	0x200001c0
 8002670:	200000e4 	.word	0x200000e4

08002674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <vTaskStartScheduler+0x98>)
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	2282      	movs	r2, #130	; 0x82
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <vTaskStartScheduler+0x9c>)
 8002688:	4822      	ldr	r0, [pc, #136]	; (8002714 <vTaskStartScheduler+0xa0>)
 800268a:	f7ff fe9e 	bl	80023ca <xTaskCreate>
 800268e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d124      	bne.n	80026e0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	60bb      	str	r3, [r7, #8]
    }
 80026a8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <vTaskStartScheduler+0xa4>)
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <vTaskStartScheduler+0xa8>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <vTaskStartScheduler+0xac>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <vTaskStartScheduler+0xb0>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <vTaskStartScheduler+0x98>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d102      	bne.n	80026d0 <vTaskStartScheduler+0x5c>
 80026ca:	f002 fe17 	bl	80052fc <SEGGER_SYSVIEW_OnIdle>
 80026ce:	e004      	b.n	80026da <vTaskStartScheduler+0x66>
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <vTaskStartScheduler+0xb0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fe6f 	bl	80053b8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026da:	f000 fb13 	bl	8002d04 <xPortStartScheduler>
 80026de:	e00e      	b.n	80026fe <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d10a      	bne.n	80026fe <vTaskStartScheduler+0x8a>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	607b      	str	r3, [r7, #4]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <vTaskStartScheduler+0xb4>)
 8002700:	681b      	ldr	r3, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200001dc 	.word	0x200001dc
 8002710:	08006974 	.word	0x08006974
 8002714:	08002a99 	.word	0x08002a99
 8002718:	200001d8 	.word	0x200001d8
 800271c:	200001c4 	.word	0x200001c4
 8002720:	200001bc 	.word	0x200001bc
 8002724:	200000e0 	.word	0x200000e0
 8002728:	2000000c 	.word	0x2000000c

0800272c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <vTaskSuspendAll+0x18>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <vTaskSuspendAll+0x18>)
 8002738:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	200001e0 	.word	0x200001e0

08002748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <xTaskResumeAll+0x104>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xTaskResumeAll+0x2c>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	603b      	str	r3, [r7, #0]
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002774:	f000 fbe6 	bl	8002f44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <xTaskResumeAll+0x104>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	4a33      	ldr	r2, [pc, #204]	; (800284c <xTaskResumeAll+0x104>)
 8002780:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <xTaskResumeAll+0x104>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d159      	bne.n	800283e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <xTaskResumeAll+0x108>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d055      	beq.n	800283e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002792:	e032      	b.n	80027fa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <xTaskResumeAll+0x10c>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3318      	adds	r3, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fde8 	bl	8002376 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fde3 	bl	8002376 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fe42 	bl	800543c <SEGGER_SYSVIEW_OnTaskStartReady>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <xTaskResumeAll+0x110>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a24      	ldr	r2, [pc, #144]	; (8002858 <xTaskResumeAll+0x110>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <xTaskResumeAll+0x114>)
 80027d8:	441a      	add	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7ff fda4 	bl	800232e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <xTaskResumeAll+0x118>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <xTaskResumeAll+0x11c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <xTaskResumeAll+0x10c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1c8      	bne.n	8002794 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002808:	f000 f9d6 	bl	8002bb8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <xTaskResumeAll+0x120>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002818:	f000 f83a 	bl	8002890 <xTaskIncrementTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <xTaskResumeAll+0x11c>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3b01      	subs	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f1      	bne.n	8002818 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <xTaskResumeAll+0x120>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <xTaskResumeAll+0x11c>)
 800283c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800283e:	f000 fbb1 	bl	8002fa4 <vPortExitCritical>

    return xAlreadyYielded;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200001e0 	.word	0x200001e0
 8002850:	200001b8 	.word	0x200001b8
 8002854:	20000178 	.word	0x20000178
 8002858:	200001c0 	.word	0x200001c0
 800285c:	200000e4 	.word	0x200000e4
 8002860:	200000e0 	.word	0x200000e0
 8002864:	200001cc 	.word	0x200001cc
 8002868:	200001c8 	.word	0x200001c8

0800286c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002872:	f000 fc53 	bl	800311c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <xTaskGetTickCountFromISR+0x20>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002880:	683b      	ldr	r3, [r7, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200001bc 	.word	0x200001bc

08002890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <xTaskIncrementTick+0x110>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d173      	bne.n	800298a <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <xTaskIncrementTick+0x114>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028aa:	4a3e      	ldr	r2, [pc, #248]	; (80029a4 <xTaskIncrementTick+0x114>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d120      	bne.n	80028f8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80028b6:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <xTaskIncrementTick+0x118>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <xTaskIncrementTick+0x46>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	603b      	str	r3, [r7, #0]
    }
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xTaskIncrementTick+0x44>
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <xTaskIncrementTick+0x118>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <xTaskIncrementTick+0x11c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <xTaskIncrementTick+0x118>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4a31      	ldr	r2, [pc, #196]	; (80029ac <xTaskIncrementTick+0x11c>)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <xTaskIncrementTick+0x120>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <xTaskIncrementTick+0x120>)
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	f000 f960 	bl	8002bb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <xTaskIncrementTick+0x124>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d348      	bcc.n	8002994 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <xTaskIncrementTick+0x118>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <xTaskIncrementTick+0x124>)
 800290e:	f04f 32ff 	mov.w	r2, #4294967295
 8002912:	601a      	str	r2, [r3, #0]
                    break;
 8002914:	e03e      	b.n	8002994 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <xTaskIncrementTick+0x118>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d203      	bcs.n	8002936 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800292e:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <xTaskIncrementTick+0x124>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002934:	e02e      	b.n	8002994 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3304      	adds	r3, #4
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fd1b 	bl	8002376 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3318      	adds	r3, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fd12 	bl	8002376 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fd71 	bl	800543c <SEGGER_SYSVIEW_OnTaskStartReady>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <xTaskIncrementTick+0x128>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <xTaskIncrementTick+0x128>)
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <xTaskIncrementTick+0x12c>)
 800297a:	441a      	add	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f7ff fcd3 	bl	800232e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002988:	e7bb      	b.n	8002902 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <xTaskIncrementTick+0x130>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <xTaskIncrementTick+0x130>)
 8002992:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002994:	697b      	ldr	r3, [r7, #20]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200001e0 	.word	0x200001e0
 80029a4:	200001bc 	.word	0x200001bc
 80029a8:	20000170 	.word	0x20000170
 80029ac:	20000174 	.word	0x20000174
 80029b0:	200001d0 	.word	0x200001d0
 80029b4:	200001d8 	.word	0x200001d8
 80029b8:	200001c0 	.word	0x200001c0
 80029bc:	200000e4 	.word	0x200000e4
 80029c0:	200001c8 	.word	0x200001c8

080029c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <vTaskSwitchContext+0xbc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <vTaskSwitchContext+0xc0>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80029d8:	e04d      	b.n	8002a76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <vTaskSwitchContext+0xc0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <vTaskSwitchContext+0xc4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	f1c3 031f 	rsb	r3, r3, #31
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	4925      	ldr	r1, [pc, #148]	; (8002a8c <vTaskSwitchContext+0xc8>)
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	607b      	str	r3, [r7, #4]
    }
 8002a1c:	bf00      	nop
 8002a1e:	e7fe      	b.n	8002a1e <vTaskSwitchContext+0x5a>
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <vTaskSwitchContext+0xc8>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	3308      	adds	r3, #8
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d104      	bne.n	8002a50 <vTaskSwitchContext+0x8c>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <vTaskSwitchContext+0xcc>)
 8002a58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <vTaskSwitchContext+0xcc>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <vTaskSwitchContext+0xd0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d102      	bne.n	8002a6c <vTaskSwitchContext+0xa8>
 8002a66:	f002 fc49 	bl	80052fc <SEGGER_SYSVIEW_OnIdle>
}
 8002a6a:	e004      	b.n	8002a76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <vTaskSwitchContext+0xcc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fca1 	bl	80053b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200001e0 	.word	0x200001e0
 8002a84:	200001cc 	.word	0x200001cc
 8002a88:	200001c0 	.word	0x200001c0
 8002a8c:	200000e4 	.word	0x200000e4
 8002a90:	200000e0 	.word	0x200000e0
 8002a94:	200001dc 	.word	0x200001dc

08002a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002aa0:	f000 f84c 	bl	8002b3c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <prvIdleTask+0x20>)
 8002aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ab4:	e7f4      	b.n	8002aa0 <prvIdleTask+0x8>
 8002ab6:	bf00      	nop
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e00c      	b.n	8002ae2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <prvInitialiseTaskLists+0x60>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fbfc 	bl	80022d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d9ef      	bls.n	8002ac8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <prvInitialiseTaskLists+0x64>)
 8002aea:	f7ff fbf3 	bl	80022d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002aee:	480d      	ldr	r0, [pc, #52]	; (8002b24 <prvInitialiseTaskLists+0x68>)
 8002af0:	f7ff fbf0 	bl	80022d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <prvInitialiseTaskLists+0x6c>)
 8002af6:	f7ff fbed 	bl	80022d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002afa:	480c      	ldr	r0, [pc, #48]	; (8002b2c <prvInitialiseTaskLists+0x70>)
 8002afc:	f7ff fbea 	bl	80022d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b00:	480b      	ldr	r0, [pc, #44]	; (8002b30 <prvInitialiseTaskLists+0x74>)
 8002b02:	f7ff fbe7 	bl	80022d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <prvInitialiseTaskLists+0x78>)
 8002b08:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <prvInitialiseTaskLists+0x64>)
 8002b0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <prvInitialiseTaskLists+0x7c>)
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <prvInitialiseTaskLists+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000e4 	.word	0x200000e4
 8002b20:	20000148 	.word	0x20000148
 8002b24:	2000015c 	.word	0x2000015c
 8002b28:	20000178 	.word	0x20000178
 8002b2c:	2000018c 	.word	0x2000018c
 8002b30:	200001a4 	.word	0x200001a4
 8002b34:	20000170 	.word	0x20000170
 8002b38:	20000174 	.word	0x20000174

08002b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b42:	e019      	b.n	8002b78 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b44:	f000 f9fe 	bl	8002f44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <prvCheckTasksWaitingTermination+0x50>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc0e 	bl	8002376 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b62:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b6c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b6e:	f000 fa19 	bl	8002fa4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f810 	bl	8002b98 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e1      	bne.n	8002b44 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	2000018c 	.word	0x2000018c
 8002b90:	200001b8 	.word	0x200001b8
 8002b94:	200001a0 	.word	0x200001a0

08002b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fbd9 	bl	800335c <vPortFree>
                vPortFree( pxTCB );
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fbd6 	bl	800335c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <prvResetNextTaskUnblockTime+0x30>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <prvResetNextTaskUnblockTime+0x34>)
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bce:	e005      	b.n	8002bdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <prvResetNextTaskUnblockTime+0x30>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <prvResetNextTaskUnblockTime+0x34>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000170 	.word	0x20000170
 8002bec:	200001d8 	.word	0x200001d8

08002bf0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3b04      	subs	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b04      	subs	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c20:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <pxPortInitialiseStack+0x64>)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b14      	subs	r3, #20
 8002c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b04      	subs	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f06f 0202 	mvn.w	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3b20      	subs	r3, #32
 8002c44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	08002c59 	.word	0x08002c59

08002c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <prvTaskExitError+0x54>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d00a      	beq.n	8002c82 <prvTaskExitError+0x2a>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	60fb      	str	r3, [r7, #12]
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <prvTaskExitError+0x28>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
    }
 8002c94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c96:	bf00      	nop
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0fc      	beq.n	8002c98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000010 	.word	0x20000010

08002cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <pxCurrentTCBConst2>)
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	6808      	ldr	r0, [r1, #0]
 8002cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cba:	f380 8809 	msr	PSP, r0
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f380 8811 	msr	BASEPRI, r0
 8002cca:	4770      	bx	lr
 8002ccc:	f3af 8000 	nop.w

08002cd0 <pxCurrentTCBConst2>:
 8002cd0:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop

08002cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <prvPortStartFirstTask+0x24>)
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	6800      	ldr	r0, [r0, #0]
 8002cde:	f380 8808 	msr	MSP, r0
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8814 	msr	CONTROL, r0
 8002cea:	b662      	cpsie	i
 8002cec:	b661      	cpsie	f
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	df00      	svc	0
 8002cf8:	bf00      	nop
 8002cfa:	0000      	.short	0x0000
 8002cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop

08002d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <xPortStartScheduler+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10a      	bne.n	8002d2a <xPortStartScheduler+0x26>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	613b      	str	r3, [r7, #16]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <xPortStartScheduler+0x128>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10a      	bne.n	8002d4a <xPortStartScheduler+0x46>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	60fb      	str	r3, [r7, #12]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <xPortStartScheduler+0x12c>)
 8002d4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <xPortStartScheduler+0x130>)
 8002d70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d78:	e009      	b.n	8002d8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d0ef      	beq.n	8002d7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00a      	beq.n	8002dbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <xPortStartScheduler+0x138>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <xPortStartScheduler+0x138>)
 8002dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002df0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002df2:	f000 f963 	bl	80030bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <xPortStartScheduler+0x13c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dfc:	f000 f982 	bl	8003104 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e0c:	f7ff ff64 	bl	8002cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e10:	f7ff fdd8 	bl	80029c4 <vTaskSwitchContext>
    prvTaskExitError();
 8002e14:	f7ff ff20 	bl	8002c58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	410fc271 	.word	0x410fc271
 8002e2c:	410fc270 	.word	0x410fc270
 8002e30:	e000e400 	.word	0xe000e400
 8002e34:	200001e4 	.word	0x200001e4
 8002e38:	200001e8 	.word	0x200001e8
 8002e3c:	e000ed20 	.word	0xe000ed20
 8002e40:	20000010 	.word	0x20000010
 8002e44:	e000ef34 	.word	0xe000ef34

08002e48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <vInitPrioGroupValue+0xe4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <vInitPrioGroupValue+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10a      	bne.n	8002e6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	613b      	str	r3, [r7, #16]
    }
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <vInitPrioGroupValue+0xe4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <vInitPrioGroupValue+0xec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10a      	bne.n	8002e8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60fb      	str	r3, [r7, #12]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <vInitPrioGroupValue+0xf0>)
 8002e90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <vInitPrioGroupValue+0xf4>)
 8002eb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ebc:	e009      	b.n	8002ed2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ec6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d0ef      	beq.n	8002ebe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00a      	beq.n	8002f00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60bb      	str	r3, [r7, #8]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <vInitPrioGroupValue+0xf8>)
 8002f14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	410fc271 	.word	0x410fc271
 8002f34:	410fc270 	.word	0x410fc270
 8002f38:	e000e400 	.word	0xe000e400
 8002f3c:	200001e4 	.word	0x200001e4
 8002f40:	200001e8 	.word	0x200001e8

08002f44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
        __asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	607b      	str	r3, [r7, #4]
    }
 8002f5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <vPortEnterCritical+0x58>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10f      	bne.n	8002f90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <vPortEnterCritical+0x5c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	603b      	str	r3, [r7, #0]
    }
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vPortEnterCritical+0x4a>
    }
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000010 	.word	0x20000010
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <vPortExitCritical+0x24>
        __asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	607b      	str	r3, [r7, #4]
    }
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <vPortExitCritical+0x50>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <vPortExitCritical+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fe4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000010 	.word	0x20000010
	...

08003000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7ff fcc8 	bl	80029c4 <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
    }
 8003080:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003082:	f002 f8c1 	bl	8005208 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003086:	f7ff fc03 	bl	8002890 <xTaskIncrementTick>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003090:	f002 f918 	bl	80052c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <SysTick_Handler+0x50>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e001      	b.n	80030a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800309e:	f002 f8f5 	bl	800528c <SEGGER_SYSVIEW_RecordExitISR>
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f383 8811 	msr	BASEPRI, r3
    }
 80030ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <vPortSetupTimerInterrupt+0x34>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <vPortSetupTimerInterrupt+0x38>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <vPortSetupTimerInterrupt+0x3c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <vPortSetupTimerInterrupt+0x40>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	4a09      	ldr	r2, [pc, #36]	; (8003100 <vPortSetupTimerInterrupt+0x44>)
 80030da:	3b01      	subs	r3, #1
 80030dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <vPortSetupTimerInterrupt+0x34>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010
 80030f4:	e000e018 	.word	0xe000e018
 80030f8:	20000000 	.word	0x20000000
 80030fc:	10624dd3 	.word	0x10624dd3
 8003100:	e000e014 	.word	0xe000e014

08003104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003114 <vPortEnableVFP+0x10>
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800310e:	6001      	str	r1, [r0, #0]
 8003110:	4770      	bx	lr
 8003112:	0000      	.short	0x0000
 8003114:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop

0800311c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003122:	f3ef 8305 	mrs	r3, IPSR
 8003126:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d914      	bls.n	8003158 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <vPortValidateInterruptPriority+0x70>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <vPortValidateInterruptPriority+0x74>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	7afa      	ldrb	r2, [r7, #11]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20a      	bcs.n	8003158 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	607b      	str	r3, [r7, #4]
    }
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <vPortValidateInterruptPriority+0x78>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <vPortValidateInterruptPriority+0x7c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d90a      	bls.n	800317e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	603b      	str	r3, [r7, #0]
    }
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vPortValidateInterruptPriority+0x60>
    }
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e3f0 	.word	0xe000e3f0
 8003190:	200001e4 	.word	0x200001e4
 8003194:	e000ed0c 	.word	0xe000ed0c
 8003198:	200001e8 	.word	0x200001e8

0800319c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031a8:	f7ff fac0 	bl	800272c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031ac:	4b65      	ldr	r3, [pc, #404]	; (8003344 <pvPortMalloc+0x1a8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031b4:	f000 f934 	bl	8003420 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031b8:	4b63      	ldr	r3, [pc, #396]	; (8003348 <pvPortMalloc+0x1ac>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 80a7 	bne.w	8003314 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02d      	beq.n	8003228 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031cc:	2208      	movs	r2, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d227      	bcs.n	8003228 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031d8:	2208      	movs	r2, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d021      	beq.n	800322e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f023 0307 	bic.w	r3, r3, #7
 80031f0:	3308      	adds	r3, #8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d214      	bcs.n	8003222 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	3308      	adds	r3, #8
 8003200:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <pvPortMalloc+0x92>
        __asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	617b      	str	r3, [r7, #20]
    }
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003226:	e002      	b.n	800322e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e000      	b.n	8003230 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800322e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06e      	beq.n	8003314 <pvPortMalloc+0x178>
 8003236:	4b45      	ldr	r3, [pc, #276]	; (800334c <pvPortMalloc+0x1b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d869      	bhi.n	8003314 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <pvPortMalloc+0x1b4>)
 8003242:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <pvPortMalloc+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800324a:	e004      	b.n	8003256 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d903      	bls.n	8003268 <pvPortMalloc+0xcc>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f1      	bne.n	800324c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003268:	4b36      	ldr	r3, [pc, #216]	; (8003344 <pvPortMalloc+0x1a8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d050      	beq.n	8003314 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2208      	movs	r2, #8
 8003278:	4413      	add	r3, r2
 800327a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	2308      	movs	r3, #8
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	429a      	cmp	r2, r3
 8003292:	d91f      	bls.n	80032d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <pvPortMalloc+0x120>
        __asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	613b      	str	r3, [r7, #16]
    }
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	f000 f908 	bl	80034e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <pvPortMalloc+0x1b0>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <pvPortMalloc+0x1b0>)
 80032e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <pvPortMalloc+0x1b0>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <pvPortMalloc+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d203      	bcs.n	80032f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <pvPortMalloc+0x1b0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <pvPortMalloc+0x1b8>)
 80032f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <pvPortMalloc+0x1ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	431a      	orrs	r2, r3
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <pvPortMalloc+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <pvPortMalloc+0x1bc>)
 8003312:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003314:	f7ff fa18 	bl	8002748 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <pvPortMalloc+0x19c>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	60fb      	str	r3, [r7, #12]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <pvPortMalloc+0x19a>
    return pvReturn;
 8003338:	69fb      	ldr	r3, [r7, #28]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200191f4 	.word	0x200191f4
 8003348:	20019208 	.word	0x20019208
 800334c:	200191f8 	.word	0x200191f8
 8003350:	200191ec 	.word	0x200191ec
 8003354:	200191fc 	.word	0x200191fc
 8003358:	20019200 	.word	0x20019200

0800335c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04d      	beq.n	800340a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800336e:	2308      	movs	r3, #8
 8003370:	425b      	negs	r3, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <vPortFree+0xb8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <vPortFree+0x44>
        __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60fb      	str	r3, [r7, #12]
    }
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <vPortFree+0x62>
        __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	60bb      	str	r3, [r7, #8]
    }
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <vPortFree+0xb8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11a      	bne.n	800340a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <vPortFree+0xb8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033e4:	f7ff f9a2 	bl	800272c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <vPortFree+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <vPortFree+0xbc>)
 80033f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033f6:	6938      	ldr	r0, [r7, #16]
 80033f8:	f000 f874 	bl	80034e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <vPortFree+0xc0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <vPortFree+0xc0>)
 8003404:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003406:	f7ff f99f 	bl	8002748 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20019208 	.word	0x20019208
 8003418:	200191f8 	.word	0x200191f8
 800341c:	20019204 	.word	0x20019204

08003420 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003426:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800342a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <prvHeapInit+0xac>)
 800342e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3307      	adds	r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <prvHeapInit+0xac>)
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003458:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <prvHeapInit+0xb0>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <prvHeapInit+0xb0>)
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800346c:	2208      	movs	r2, #8
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <prvHeapInit+0xb4>)
 8003480:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <prvHeapInit+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <prvHeapInit+0xb4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvHeapInit+0xb4>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <prvHeapInit+0xb8>)
 80034ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <prvHeapInit+0xbc>)
 80034b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <prvHeapInit+0xc0>)
 80034ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	200001ec 	.word	0x200001ec
 80034d0:	200191ec 	.word	0x200191ec
 80034d4:	200191f4 	.word	0x200191f4
 80034d8:	200191fc 	.word	0x200191fc
 80034dc:	200191f8 	.word	0x200191f8
 80034e0:	20019208 	.word	0x20019208

080034e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <prvInsertBlockIntoFreeList+0xac>)
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <prvInsertBlockIntoFreeList+0x14>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d8f7      	bhi.n	80034f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d108      	bne.n	8003526 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d118      	bne.n	800356c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <prvInsertBlockIntoFreeList+0xb0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d00d      	beq.n	8003562 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e008      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <prvInsertBlockIntoFreeList+0xb0>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e003      	b.n	8003574 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d002      	beq.n	8003582 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	200191ec 	.word	0x200191ec
 8003594:	200191f4 	.word	0x200191f4

08003598 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <_cbSendSystemDesc+0x14>)
 800359e:	f001 fddd 	bl	800515c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035a2:	4803      	ldr	r0, [pc, #12]	; (80035b0 <_cbSendSystemDesc+0x18>)
 80035a4:	f001 fdda 	bl	800515c <SEGGER_SYSVIEW_SendSysDesc>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	0800697c 	.word	0x0800697c
 80035b0:	080069c0 	.word	0x080069c0

080035b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80035c2:	4a06      	ldr	r2, [pc, #24]	; (80035dc <SEGGER_SYSVIEW_Conf+0x28>)
 80035c4:	f001 fa4e 	bl	8004a64 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80035cc:	f001 fa8e 	bl	8004aec <SEGGER_SYSVIEW_SetRAMBase>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000000 	.word	0x20000000
 80035d8:	08003599 	.word	0x08003599
 80035dc:	08006a60 	.word	0x08006a60

080035e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	e033      	b.n	8003654 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035ec:	491e      	ldr	r1, [pc, #120]	; (8003668 <_cbSendTaskList+0x88>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	491a      	ldr	r1, [pc, #104]	; (8003668 <_cbSendTaskList+0x88>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3304      	adds	r3, #4
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	4c16      	ldr	r4, [pc, #88]	; (8003668 <_cbSendTaskList+0x88>)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4423      	add	r3, r4
 800361c:	3308      	adds	r3, #8
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	4d11      	ldr	r5, [pc, #68]	; (8003668 <_cbSendTaskList+0x88>)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	442b      	add	r3, r5
 800362e:	330c      	adds	r3, #12
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	4e0d      	ldr	r6, [pc, #52]	; (8003668 <_cbSendTaskList+0x88>)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4433      	add	r3, r6
 8003640:	3310      	adds	r3, #16
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462b      	mov	r3, r5
 8003648:	4622      	mov	r2, r4
 800364a:	f000 f8bd 	bl	80037c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3301      	adds	r3, #1
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <_cbSendTaskList+0x8c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3c6      	bcc.n	80035ec <_cbSendTaskList+0xc>
  }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003668:	2001920c 	.word	0x2001920c
 800366c:	200192ac 	.word	0x200192ac

08003670 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003678:	f7ff f8f8 	bl	800286c <xTaskGetTickCountFromISR>
 800367c:	4603      	mov	r3, r0
 800367e:	2200      	movs	r2, #0
 8003680:	469a      	mov	sl, r3
 8003682:	4693      	mov	fp, r2
 8003684:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	f04f 0a00 	mov.w	sl, #0
 8003694:	f04f 0b00 	mov.w	fp, #0
 8003698:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800369c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80036a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80036a4:	4652      	mov	r2, sl
 80036a6:	465b      	mov	r3, fp
 80036a8:	1a14      	subs	r4, r2, r0
 80036aa:	eb63 0501 	sbc.w	r5, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	00ab      	lsls	r3, r5, #2
 80036b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036bc:	00a2      	lsls	r2, r4, #2
 80036be:	4614      	mov	r4, r2
 80036c0:	461d      	mov	r5, r3
 80036c2:	eb14 0800 	adds.w	r8, r4, r0
 80036c6:	eb45 0901 	adc.w	r9, r5, r1
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036de:	4690      	mov	r8, r2
 80036e0:	4699      	mov	r9, r3
 80036e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80036e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080036f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003706:	2205      	movs	r2, #5
 8003708:	492b      	ldr	r1, [pc, #172]	; (80037b8 <SYSVIEW_AddTask+0xc0>)
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f002 f85a 	bl	80057c4 <memcmp>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04b      	beq.n	80037ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b07      	cmp	r3, #7
 800371c:	d903      	bls.n	8003726 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <SYSVIEW_AddTask+0xc8>)
 8003720:	f001 ffbe 	bl	80056a0 <SEGGER_SYSVIEW_Warn>
    return;
 8003724:	e044      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	491b      	ldr	r1, [pc, #108]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3308      	adds	r3, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4916      	ldr	r1, [pc, #88]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	330c      	adds	r3, #12
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4910      	ldr	r1, [pc, #64]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3310      	adds	r3, #16
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800379a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f80e 	bl	80037c8 <SYSVIEW_SendTaskInfo>
 80037ac:	e000      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
    return;
 80037ae:	bf00      	nop

}
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	080069d0 	.word	0x080069d0
 80037bc:	200192ac 	.word	0x200192ac
 80037c0:	080069d8 	.word	0x080069d8
 80037c4:	2001920c 	.word	0x2001920c

080037c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	2214      	movs	r2, #20
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 f80e 	bl	8005800 <memset>
  TaskInfo.TaskID     = TaskID;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fbb5 	bl	8004f6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003802:	bf00      	nop
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <USART2_IRQHandler+0x80>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <USART2_IRQHandler+0x84>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 030b 	and.w	r3, r3, #11
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <USART2_IRQHandler+0x88>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <USART2_IRQHandler+0x88>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	79fa      	ldrb	r2, [r7, #7]
 8003842:	4610      	mov	r0, r2
 8003844:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <USART2_IRQHandler+0x8c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <USART2_IRQHandler+0x8c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	1dfa      	adds	r2, r7, #7
 800385e:	4610      	mov	r0, r2
 8003860:	4798      	blx	r3
 8003862:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <USART2_IRQHandler+0x90>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a0b      	ldr	r2, [pc, #44]	; (800389c <USART2_IRQHandler+0x90>)
 8003870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e006      	b.n	8003886 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <USART2_IRQHandler+0x80>)
 800387a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <USART2_IRQHandler+0x84>)
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e000      	b.n	8003886 <USART2_IRQHandler+0x7a>
      return;
 8003884:	bf00      	nop
    }
  }
}
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40004400 	.word	0x40004400
 8003890:	40004404 	.word	0x40004404
 8003894:	200192b0 	.word	0x200192b0
 8003898:	200192b4 	.word	0x200192b4
 800389c:	4000440c 	.word	0x4000440c

080038a0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80038aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	4000440c 	.word	0x4000440c

080038c0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <_DoInit+0x98>)
 80038c8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2203      	movs	r2, #3
 80038d4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a20      	ldr	r2, [pc, #128]	; (800395c <_DoInit+0x9c>)
 80038da:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a20      	ldr	r2, [pc, #128]	; (8003960 <_DoInit+0xa0>)
 80038e0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <_DoInit+0x9c>)
 8003900:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <_DoInit+0xa4>)
 8003906:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2210      	movs	r2, #16
 800390c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3307      	adds	r3, #7
 8003924:	4a10      	ldr	r2, [pc, #64]	; (8003968 <_DoInit+0xa8>)
 8003926:	6810      	ldr	r0, [r2, #0]
 8003928:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800392a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0e      	ldr	r2, [pc, #56]	; (800396c <_DoInit+0xac>)
 8003932:	6810      	ldr	r0, [r2, #0]
 8003934:	6018      	str	r0, [r3, #0]
 8003936:	8891      	ldrh	r1, [r2, #4]
 8003938:	7992      	ldrb	r2, [r2, #6]
 800393a:	8099      	strh	r1, [r3, #4]
 800393c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800393e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003948:	f3bf 8f5f 	dmb	sy
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	200192b8 	.word	0x200192b8
 800395c:	08006a28 	.word	0x08006a28
 8003960:	20019360 	.word	0x20019360
 8003964:	20019760 	.word	0x20019760
 8003968:	08006a34 	.word	0x08006a34
 800396c:	08006a38 	.word	0x08006a38

08003970 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	429a      	cmp	r2, r3
 8003992:	d905      	bls.n	80039a0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e007      	b.n	80039b0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	1acb      	subs	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3b01      	subs	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bf28      	it	cs
 80039be:	4613      	movcs	r3, r2
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bf28      	it	cs
 80039ca:	4613      	movcs	r3, r2
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	6978      	ldr	r0, [r7, #20]
 80039de:	f001 ff01 	bl	80057e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	4413      	add	r3, r2
 80039e8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	4413      	add	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	4413      	add	r3, r2
 8003a00:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d101      	bne.n	8003a10 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a10:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1b2      	bne.n	8003986 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d911      	bls.n	8003a72 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	6938      	ldr	r0, [r7, #16]
 8003a5e:	f001 fec1 	bl	80057e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a62:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a70:	e01f      	b.n	8003ab2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6938      	ldr	r0, [r7, #16]
 8003a86:	f001 fead 	bl	80057e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6938      	ldr	r0, [r7, #16]
 8003aa4:	f001 fe9e 	bl	80057e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003aa8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	60da      	str	r2, [r3, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d808      	bhi.n	8003ae8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad2      	subs	r2, r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e004      	b.n	8003af2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003af2:	697b      	ldr	r3, [r7, #20]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b0c:	4b3e      	ldr	r3, [pc, #248]	; (8003c08 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <SEGGER_RTT_ReadNoLock+0x1e>
 8003b1a:	f7ff fed1 	bl	80038c0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3360      	adds	r3, #96	; 0x60
 8003b2a:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d92b      	bls.n	8003ba4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	bf28      	it	cs
 8003b5e:	4613      	movcs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	4413      	add	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	6939      	ldr	r1, [r7, #16]
 8003b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b72:	f001 fe37 	bl	80057e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d101      	bne.n	8003ba4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bf28      	it	cs
 8003bb4:	4613      	movcs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d019      	beq.n	8003bf2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	4413      	add	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6939      	ldr	r1, [r7, #16]
 8003bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bce:	f001 fe09 	bl	80057e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4413      	add	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3730      	adds	r7, #48	; 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200192b8 	.word	0x200192b8

08003c0c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	4613      	mov	r3, r2
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d029      	beq.n	8003c8a <SEGGER_RTT_WriteNoLock+0x7e>
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d82e      	bhi.n	8003c98 <SEGGER_RTT_WriteNoLock+0x8c>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <SEGGER_RTT_WriteNoLock+0x38>
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d013      	beq.n	8003c6a <SEGGER_RTT_WriteNoLock+0x5e>
 8003c42:	e029      	b.n	8003c98 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	f7ff ff38 	bl	8003aba <_GetAvailWriteSpace>
 8003c4a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d202      	bcs.n	8003c5a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c58:	e021      	b.n	8003c9e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff fee1 	bl	8003a2a <_WriteNoCheck>
    break;
 8003c68:	e019      	b.n	8003c9e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff25 	bl	8003aba <_GetAvailWriteSpace>
 8003c70:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	bf28      	it	cs
 8003c7a:	4613      	movcs	r3, r2
 8003c7c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	6978      	ldr	r0, [r7, #20]
 8003c84:	f7ff fed1 	bl	8003a2a <_WriteNoCheck>
    break;
 8003c88:	e009      	b.n	8003c9e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff fe6e 	bl	8003970 <_WriteBlocking>
 8003c94:	61f8      	str	r0, [r7, #28]
    break;
 8003c96:	e002      	b.n	8003c9e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
    break;
 8003c9c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200192b8 	.word	0x200192b8

08003cac <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <SEGGER_RTT_Write+0x48>)
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <SEGGER_RTT_Write+0x1e>
 8003cc6:	f7ff fdfb 	bl	80038c0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003cca:	f3ef 8311 	mrs	r3, BASEPRI
 8003cce:	f04f 0120 	mov.w	r1, #32
 8003cd2:	f381 8811 	msr	BASEPRI, r1
 8003cd6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ff95 	bl	8003c0c <SEGGER_RTT_WriteNoLock>
 8003ce2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003cea:	697b      	ldr	r3, [r7, #20]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	200192b8 	.word	0x200192b8

08003cf8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d06:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d14:	f7ff fdd4 	bl	80038c0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d18:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1c:	f04f 0120 	mov.w	r1, #32
 8003d20:	f381 8811 	msr	BASEPRI, r1
 8003d24:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d28:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	dbeb      	blt.n	8003d2e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d56:	e000      	b.n	8003d5a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d58:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	da3f      	bge.n	8003de4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d64:	6939      	ldr	r1, [r7, #16]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3304      	adds	r3, #4
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d8e:	6939      	ldr	r1, [r7, #16]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	3328      	adds	r3, #40	; 0x28
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003db6:	6939      	ldr	r1, [r7, #16]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	332c      	adds	r3, #44	; 0x2c
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dde:	f3bf 8f5f 	dmb	sy
 8003de2:	e002      	b.n	8003dea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003df0:	69fb      	ldr	r3, [r7, #28]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200192b8 	.word	0x200192b8

08003e00 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e1c:	f7ff fd50 	bl	80038c0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e20:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e22:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d24d      	bcs.n	8003ecc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003e30:	f3ef 8311 	mrs	r3, BASEPRI
 8003e34:	f04f 0120 	mov.w	r1, #32
 8003e38:	f381 8811 	msr	BASEPRI, r1
 8003e3c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d031      	beq.n	8003ea8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	440b      	add	r3, r1
 8003e52:	3360      	adds	r3, #96	; 0x60
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	440b      	add	r3, r1
 8003e66:	3364      	adds	r3, #100	; 0x64
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	3368      	adds	r3, #104	; 0x68
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3370      	adds	r3, #112	; 0x70
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	336c      	adds	r3, #108	; 0x6c
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003ea8:	6979      	ldr	r1, [r7, #20]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3374      	adds	r3, #116	; 0x74
 8003eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eba:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ebc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e002      	b.n	8003ed2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200192b8 	.word	0x200192b8

08003ee0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ef0:	e002      	b.n	8003ef8 <_EncodeStr+0x18>
    Len++;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f6      	bne.n	8003ef2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d901      	bls.n	8003f10 <_EncodeStr+0x30>
    Len = Limit;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2bfe      	cmp	r3, #254	; 0xfe
 8003f14:	d806      	bhi.n	8003f24 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	e011      	b.n	8003f48 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	60fa      	str	r2, [r7, #12]
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	60fa      	str	r2, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	0a19      	lsrs	r1, r3, #8
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	60fa      	str	r2, [r7, #12]
 8003f44:	b2ca      	uxtb	r2, r1
 8003f46:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f4c:	e00a      	b.n	8003f64 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	1c53      	adds	r3, r2, #1
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	60f9      	str	r1, [r7, #12]
 8003f5a:	7812      	ldrb	r2, [r2, #0]
 8003f5c:	701a      	strb	r2, [r3, #0]
    n++;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3301      	adds	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3f0      	bcc.n	8003f4e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <_HandleIncomingPacket+0xe0>)
 8003f9c:	7e1b      	ldrb	r3, [r3, #24]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	1cfb      	adds	r3, r7, #3
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7ff fdab 	bl	8003b00 <SEGGER_RTT_ReadNoLock>
 8003faa:	4603      	mov	r3, r0
 8003fac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dd54      	ble.n	800405e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d032      	beq.n	8004020 <_HandleIncomingPacket+0x8c>
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	dc42      	bgt.n	8004044 <_HandleIncomingPacket+0xb0>
 8003fbe:	2b07      	cmp	r3, #7
 8003fc0:	dc16      	bgt.n	8003ff0 <_HandleIncomingPacket+0x5c>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	dd3e      	ble.n	8004044 <_HandleIncomingPacket+0xb0>
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d83b      	bhi.n	8004044 <_HandleIncomingPacket+0xb0>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <_HandleIncomingPacket+0x40>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ff7 	.word	0x08003ff7
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004003 	.word	0x08004003
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff2:	d036      	beq.n	8004062 <_HandleIncomingPacket+0xce>
 8003ff4:	e026      	b.n	8004044 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ff6:	f000 fe3d 	bl	8004c74 <SEGGER_SYSVIEW_Start>
      break;
 8003ffa:	e037      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ffc:	f000 fef6 	bl	8004dec <SEGGER_SYSVIEW_Stop>
      break;
 8004000:	e034      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004002:	f001 f8cf 	bl	80051a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004006:	e031      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004008:	f001 f894 	bl	8005134 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800400c:	e02e      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800400e:	f000 ff13 	bl	8004e38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004012:	e02b      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004014:	f001 faf2 	bl	80055fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004018:	e028      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800401a:	f001 fad1 	bl	80055c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800401e:	e025      	b.n	800406c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <_HandleIncomingPacket+0xe0>)
 8004022:	7e1b      	ldrb	r3, [r3, #24]
 8004024:	4618      	mov	r0, r3
 8004026:	1cfb      	adds	r3, r7, #3
 8004028:	2201      	movs	r2, #1
 800402a:	4619      	mov	r1, r3
 800402c:	f7ff fd68 	bl	8003b00 <SEGGER_RTT_ReadNoLock>
 8004030:	4603      	mov	r3, r0
 8004032:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	dd15      	ble.n	8004066 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fa3f 	bl	80054c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004042:	e010      	b.n	8004066 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	b25b      	sxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	da0e      	bge.n	800406a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <_HandleIncomingPacket+0xe0>)
 800404e:	7e1b      	ldrb	r3, [r3, #24]
 8004050:	4618      	mov	r0, r3
 8004052:	1cfb      	adds	r3, r7, #3
 8004054:	2201      	movs	r2, #1
 8004056:	4619      	mov	r1, r3
 8004058:	f7ff fd52 	bl	8003b00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800405c:	e005      	b.n	800406a <_HandleIncomingPacket+0xd6>
    }
  }
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <_HandleIncomingPacket+0xd8>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <_HandleIncomingPacket+0xd8>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <_HandleIncomingPacket+0xd8>
      break;
 800406a:	bf00      	nop
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	2001a778 	.word	0x2001a778

08004078 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800407e:	2301      	movs	r3, #1
 8004080:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
 8004092:	e00b      	b.n	80040ac <_TrySendOverflowPacket+0x34>
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	b2da      	uxtb	r2, r3
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	1c59      	adds	r1, r3, #1
 800409c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800409e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	09db      	lsrs	r3, r3, #7
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2b7f      	cmp	r3, #127	; 0x7f
 80040b0:	d8f0      	bhi.n	8004094 <_TrySendOverflowPacket+0x1c>
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <_TrySendOverflowPacket+0xe4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	e00b      	b.n	80040f4 <_TrySendOverflowPacket+0x7c>
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	6279      	str	r1, [r7, #36]	; 0x24
 80040e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	09db      	lsrs	r3, r3, #7
 80040f2:	623b      	str	r3, [r7, #32]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b7f      	cmp	r3, #127	; 0x7f
 80040f8:	d8f0      	bhi.n	80040dc <_TrySendOverflowPacket+0x64>
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004100:	6a3a      	ldr	r2, [r7, #32]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	4618      	mov	r0, r3
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	461a      	mov	r2, r3
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	4619      	mov	r1, r3
 800411c:	f7fc f858 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004120:	4603      	mov	r3, r0
 8004122:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004124:	f7ff fbbc 	bl	80038a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e004      	b.n	800414c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	3301      	adds	r3, #1
 8004148:	4a03      	ldr	r2, [pc, #12]	; (8004158 <_TrySendOverflowPacket+0xe0>)
 800414a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800414c:	693b      	ldr	r3, [r7, #16]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3730      	adds	r7, #48	; 0x30
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2001a778 	.word	0x2001a778
 800415c:	e0001004 	.word	0xe0001004

08004160 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800416c:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <_SendPacket+0x1c4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d010      	beq.n	8004196 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004174:	4b6b      	ldr	r3, [pc, #428]	; (8004324 <_SendPacket+0x1c4>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a5 	beq.w	80042c8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800417e:	4b69      	ldr	r3, [pc, #420]	; (8004324 <_SendPacket+0x1c4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d109      	bne.n	800419a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004186:	f7ff ff77 	bl	8004078 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800418a:	4b66      	ldr	r3, [pc, #408]	; (8004324 <_SendPacket+0x1c4>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	f040 809c 	bne.w	80042cc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004194:	e001      	b.n	800419a <_SendPacket+0x3a>
    goto Send;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <_SendPacket+0x3c>
Send:
 800419a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d809      	bhi.n	80041b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041a2:	4b60      	ldr	r3, [pc, #384]	; (8004324 <_SendPacket+0x1c4>)
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 808d 	bne.w	80042d0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b17      	cmp	r3, #23
 80041ba:	d807      	bhi.n	80041cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3b01      	subs	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e03d      	b.n	8004248 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b7f      	cmp	r3, #127	; 0x7f
 80041d8:	d912      	bls.n	8004200 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	09da      	lsrs	r2, r3, #7
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	3a01      	subs	r2, #1
 80041f2:	60fa      	str	r2, [r7, #12]
 80041f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e006      	b.n	800420e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3b01      	subs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b7f      	cmp	r3, #127	; 0x7f
 8004212:	d912      	bls.n	800423a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	09da      	lsrs	r2, r3, #7
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b01      	subs	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	3a01      	subs	r2, #1
 800422c:	60fa      	str	r2, [r7, #12]
 800422e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e006      	b.n	8004248 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b01      	subs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004248:	4b37      	ldr	r3, [pc, #220]	; (8004328 <_SendPacket+0x1c8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <_SendPacket+0x1c4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	e00b      	b.n	800427a <_SendPacket+0x11a>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	6279      	str	r1, [r7, #36]	; 0x24
 800426c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	09db      	lsrs	r3, r3, #7
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2b7f      	cmp	r3, #127	; 0x7f
 800427e:	d8f0      	bhi.n	8004262 <_SendPacket+0x102>
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	627a      	str	r2, [r7, #36]	; 0x24
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <_SendPacket+0x1c4>)
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	4618      	mov	r0, r3
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	461a      	mov	r2, r3
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	f7fb ff96 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042a4:	4603      	mov	r3, r0
 80042a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80042a8:	f7ff fafa 	bl	80038a0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <_SendPacket+0x1c4>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	60d3      	str	r3, [r2, #12]
 80042b8:	e00b      	b.n	80042d2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <_SendPacket+0x1c4>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <_SendPacket+0x1c4>)
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e004      	b.n	80042d2 <_SendPacket+0x172>
    goto SendDone;
 80042c8:	bf00      	nop
 80042ca:	e002      	b.n	80042d2 <_SendPacket+0x172>
      goto SendDone;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <_SendPacket+0x172>
      goto SendDone;
 80042d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <_SendPacket+0x1c4>)
 80042d4:	7e1b      	ldrb	r3, [r3, #24]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <_SendPacket+0x1cc>)
 80042da:	460b      	mov	r3, r1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	440b      	add	r3, r1
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	336c      	adds	r3, #108	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <_SendPacket+0x1c4>)
 80042ea:	7e1b      	ldrb	r3, [r3, #24]
 80042ec:	4618      	mov	r0, r3
 80042ee:	490f      	ldr	r1, [pc, #60]	; (800432c <_SendPacket+0x1cc>)
 80042f0:	4603      	mov	r3, r0
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4403      	add	r3, r0
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	3370      	adds	r3, #112	; 0x70
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d00b      	beq.n	800431a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <_SendPacket+0x1c4>)
 8004304:	789b      	ldrb	r3, [r3, #2]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <_SendPacket+0x1c4>)
 800430c:	2201      	movs	r2, #1
 800430e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004310:	f7ff fe40 	bl	8003f94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <_SendPacket+0x1c4>)
 8004316:	2200      	movs	r2, #0
 8004318:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800431a:	bf00      	nop
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2001a778 	.word	0x2001a778
 8004328:	e0001004 	.word	0xe0001004
 800432c:	200192b8 	.word	0x200192b8

08004330 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3301      	adds	r3, #1
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d80a      	bhi.n	8004360 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6051      	str	r1, [r2, #4]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d15a      	bne.n	800441e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	e00b      	b.n	80043a2 <_StoreChar+0x72>
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	1c59      	adds	r1, r3, #1
 8004392:	6279      	str	r1, [r7, #36]	; 0x24
 8004394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	09db      	lsrs	r3, r3, #7
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	2b7f      	cmp	r3, #127	; 0x7f
 80043a6:	d8f0      	bhi.n	800438a <_StoreChar+0x5a>
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	627a      	str	r2, [r7, #36]	; 0x24
 80043ae:	6a3a      	ldr	r2, [r7, #32]
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e00b      	b.n	80043da <_StoreChar+0xaa>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	61f9      	str	r1, [r7, #28]
 80043cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	09db      	lsrs	r3, r3, #7
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b7f      	cmp	r3, #127	; 0x7f
 80043de:	d8f0      	bhi.n	80043c2 <_StoreChar+0x92>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	61fa      	str	r2, [r7, #28]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	221a      	movs	r2, #26
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff feb1 	bl	8004160 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fdb9 	bl	8003f7a <_PreparePacket>
 8004408:	4602      	mov	r2, r0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  }
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800443a:	2301      	movs	r3, #1
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800443e:	2301      	movs	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004442:	e007      	b.n	8004454 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	623b      	str	r3, [r7, #32]
    Width++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d2f3      	bcs.n	8004444 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	429a      	cmp	r2, r3
 8004462:	d901      	bls.n	8004468 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11f      	bne.n	80044b2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01c      	beq.n	80044b2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <_PrintUnsigned+0x66>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <_PrintUnsigned+0x66>
        c = '0';
 8004488:	2330      	movs	r3, #48	; 0x30
 800448a:	76fb      	strb	r3, [r7, #27]
 800448c:	e001      	b.n	8004492 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800448e:	2320      	movs	r3, #32
 8004490:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004492:	e007      	b.n	80044a4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	3b01      	subs	r3, #1
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800449a:	7efb      	ldrb	r3, [r7, #27]
 800449c:	4619      	mov	r1, r3
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff ff46 	bl	8004330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <_PrintUnsigned+0x8a>
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d3f0      	bcc.n	8004494 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d903      	bls.n	80044c0 <_PrintUnsigned+0x98>
      NumDigits--;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	e009      	b.n	80044d4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d200      	bcs.n	80044d4 <_PrintUnsigned+0xac>
        break;
 80044d2:	e005      	b.n	80044e0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044de:	e7e8      	b.n	80044b2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80044f8:	4a15      	ldr	r2, [pc, #84]	; (8004550 <_PrintUnsigned+0x128>)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4619      	mov	r1, r3
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff14 	bl	8004330 <_StoreChar>
    Digit /= Base;
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e3      	bne.n	80044e0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004528:	e006      	b.n	8004538 <_PrintUnsigned+0x110>
        FieldWidth--;
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	3b01      	subs	r3, #1
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004530:	2120      	movs	r1, #32
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff fefc 	bl	8004330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <_PrintUnsigned+0x11e>
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	429a      	cmp	r2, r3
 8004544:	d3f1      	bcc.n	800452a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	; 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	08006a74 	.word	0x08006a74

08004554 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfb8      	it	lt
 8004568:	425b      	neglt	r3, r3
 800456a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004570:	e007      	b.n	8004582 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	fb92 f3f3 	sdiv	r3, r2, r3
 800457a:	613b      	str	r3, [r7, #16]
    Width++;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3301      	adds	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	429a      	cmp	r2, r3
 8004588:	daf3      	bge.n	8004572 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	429a      	cmp	r2, r3
 8004590:	d901      	bls.n	8004596 <_PrintInt+0x42>
    Width = NumDigits;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <_PrintInt+0x5e>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db04      	blt.n	80045ac <_PrintInt+0x58>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <_PrintInt+0x5e>
    FieldWidth--;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <_PrintInt+0x6e>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d016      	beq.n	80045f0 <_PrintInt+0x9c>
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00e      	beq.n	80045f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045d2:	e006      	b.n	80045e2 <_PrintInt+0x8e>
        FieldWidth--;
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80045da:	2120      	movs	r1, #32
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fea7 	bl	8004330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <_PrintInt+0x9c>
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3f1      	bcc.n	80045d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da07      	bge.n	8004606 <_PrintInt+0xb2>
    v = -v;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	425b      	negs	r3, r3
 80045fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80045fc:	212d      	movs	r1, #45	; 0x2d
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fe96 	bl	8004330 <_StoreChar>
 8004604:	e008      	b.n	8004618 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004610:	212b      	movs	r1, #43	; 0x2b
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fe8c 	bl	8004330 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d019      	beq.n	8004656 <_PrintInt+0x102>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d114      	bne.n	8004656 <_PrintInt+0x102>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d111      	bne.n	8004656 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004638:	e006      	b.n	8004648 <_PrintInt+0xf4>
        FieldWidth--;
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	3b01      	subs	r3, #1
 800463e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004640:	2130      	movs	r1, #48	; 0x30
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fe74 	bl	8004330 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <_PrintInt+0x102>
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	429a      	cmp	r2, r3
 8004654:	d3f1      	bcc.n	800463a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fedf 	bl	8004428 <_PrintUnsigned>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b098      	sub	sp, #96	; 0x60
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004680:	f3ef 8311 	mrs	r3, BASEPRI
 8004684:	f04f 0120 	mov.w	r1, #32
 8004688:	f381 8811 	msr	BASEPRI, r1
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
 800468e:	48b7      	ldr	r0, [pc, #732]	; (800496c <_VPrintTarget+0x2f8>)
 8004690:	f7ff fc73 	bl	8003f7a <_PreparePacket>
 8004694:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004696:	4bb5      	ldr	r3, [pc, #724]	; (800496c <_VPrintTarget+0x2f8>)
 8004698:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80046ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8183 	beq.w	80049ca <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80046c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046c8:	2b25      	cmp	r3, #37	; 0x25
 80046ca:	f040 8170 	bne.w	80049ae <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80046ce:	2300      	movs	r3, #0
 80046d0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80046de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046e2:	3b23      	subs	r3, #35	; 0x23
 80046e4:	2b0d      	cmp	r3, #13
 80046e6:	d83f      	bhi.n	8004768 <_VPrintTarget+0xf4>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <_VPrintTarget+0x7c>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004759 	.word	0x08004759
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004769 	.word	0x08004769
 80046fc:	08004769 	.word	0x08004769
 8004700:	08004769 	.word	0x08004769
 8004704:	08004769 	.word	0x08004769
 8004708:	08004769 	.word	0x08004769
 800470c:	08004769 	.word	0x08004769
 8004710:	08004749 	.word	0x08004749
 8004714:	08004769 	.word	0x08004769
 8004718:	08004729 	.word	0x08004729
 800471c:	08004769 	.word	0x08004769
 8004720:	08004769 	.word	0x08004769
 8004724:	08004739 	.word	0x08004739
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e01a      	b.n	800476e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e012      	b.n	800476e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e00a      	b.n	800476e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e002      	b.n	800476e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004768:	2300      	movs	r3, #0
 800476a:	653b      	str	r3, [r7, #80]	; 0x50
 800476c:	bf00      	nop
        }
      } while (v);
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1b0      	bne.n	80046d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004774:	2300      	movs	r3, #0
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004784:	2b2f      	cmp	r3, #47	; 0x2f
 8004786:	d912      	bls.n	80047ae <_VPrintTarget+0x13a>
 8004788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800478c:	2b39      	cmp	r3, #57	; 0x39
 800478e:	d80e      	bhi.n	80047ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047a6:	4413      	add	r3, r2
 80047a8:	3b30      	subs	r3, #48	; 0x30
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80047ac:	e7e4      	b.n	8004778 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80047ae:	2300      	movs	r3, #0
 80047b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80047ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047be:	2b2e      	cmp	r3, #46	; 0x2e
 80047c0:	d11d      	bne.n	80047fe <_VPrintTarget+0x18a>
        sFormat++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80047d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047d4:	2b2f      	cmp	r3, #47	; 0x2f
 80047d6:	d912      	bls.n	80047fe <_VPrintTarget+0x18a>
 80047d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047dc:	2b39      	cmp	r3, #57	; 0x39
 80047de:	d80e      	bhi.n	80047fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80047e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	461a      	mov	r2, r3
 80047f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047f6:	4413      	add	r3, r2
 80047f8:	3b30      	subs	r3, #48	; 0x30
 80047fa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80047fc:	e7e4      	b.n	80047c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004806:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800480a:	2b6c      	cmp	r3, #108	; 0x6c
 800480c:	d003      	beq.n	8004816 <_VPrintTarget+0x1a2>
 800480e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004812:	2b68      	cmp	r3, #104	; 0x68
 8004814:	d107      	bne.n	8004826 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004824:	e7ef      	b.n	8004806 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800482a:	2b25      	cmp	r3, #37	; 0x25
 800482c:	f000 80b3 	beq.w	8004996 <_VPrintTarget+0x322>
 8004830:	2b25      	cmp	r3, #37	; 0x25
 8004832:	f2c0 80b7 	blt.w	80049a4 <_VPrintTarget+0x330>
 8004836:	2b78      	cmp	r3, #120	; 0x78
 8004838:	f300 80b4 	bgt.w	80049a4 <_VPrintTarget+0x330>
 800483c:	2b58      	cmp	r3, #88	; 0x58
 800483e:	f2c0 80b1 	blt.w	80049a4 <_VPrintTarget+0x330>
 8004842:	3b58      	subs	r3, #88	; 0x58
 8004844:	2b20      	cmp	r3, #32
 8004846:	f200 80ad 	bhi.w	80049a4 <_VPrintTarget+0x330>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <_VPrintTarget+0x1dc>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004947 	.word	0x08004947
 8004854:	080049a5 	.word	0x080049a5
 8004858:	080049a5 	.word	0x080049a5
 800485c:	080049a5 	.word	0x080049a5
 8004860:	080049a5 	.word	0x080049a5
 8004864:	080049a5 	.word	0x080049a5
 8004868:	080049a5 	.word	0x080049a5
 800486c:	080049a5 	.word	0x080049a5
 8004870:	080049a5 	.word	0x080049a5
 8004874:	080049a5 	.word	0x080049a5
 8004878:	080049a5 	.word	0x080049a5
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048fb 	.word	0x080048fb
 8004884:	080049a5 	.word	0x080049a5
 8004888:	080049a5 	.word	0x080049a5
 800488c:	080049a5 	.word	0x080049a5
 8004890:	080049a5 	.word	0x080049a5
 8004894:	080049a5 	.word	0x080049a5
 8004898:	080049a5 	.word	0x080049a5
 800489c:	080049a5 	.word	0x080049a5
 80048a0:	080049a5 	.word	0x080049a5
 80048a4:	080049a5 	.word	0x080049a5
 80048a8:	080049a5 	.word	0x080049a5
 80048ac:	080049a5 	.word	0x080049a5
 80048b0:	08004971 	.word	0x08004971
 80048b4:	080049a5 	.word	0x080049a5
 80048b8:	080049a5 	.word	0x080049a5
 80048bc:	080049a5 	.word	0x080049a5
 80048c0:	080049a5 	.word	0x080049a5
 80048c4:	08004921 	.word	0x08004921
 80048c8:	080049a5 	.word	0x080049a5
 80048cc:	080049a5 	.word	0x080049a5
 80048d0:	08004947 	.word	0x08004947
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6011      	str	r1, [r2, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80048e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80048e8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fd1c 	bl	8004330 <_StoreChar>
        break;
 80048f8:	e055      	b.n	80049a6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	1d19      	adds	r1, r3, #4
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6011      	str	r1, [r2, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004908:	f107 0014 	add.w	r0, r7, #20
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	220a      	movs	r2, #10
 8004918:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800491a:	f7ff fe1b 	bl	8004554 <_PrintInt>
        break;
 800491e:	e042      	b.n	80049a6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1d19      	adds	r1, r3, #4
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800492e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004930:	f107 0014 	add.w	r0, r7, #20
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	220a      	movs	r2, #10
 8004940:	f7ff fd72 	bl	8004428 <_PrintUnsigned>
        break;
 8004944:	e02f      	b.n	80049a6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1d19      	adds	r1, r3, #4
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6011      	str	r1, [r2, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004956:	f107 0014 	add.w	r0, r7, #20
 800495a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	2210      	movs	r2, #16
 8004966:	f7ff fd5f 	bl	8004428 <_PrintUnsigned>
        break;
 800496a:	e01c      	b.n	80049a6 <_VPrintTarget+0x332>
 800496c:	2001a7a8 	.word	0x2001a7a8
      case 'p':
        v = va_arg(*pParamList, int);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1d19      	adds	r1, r3, #4
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800497e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004980:	f107 0014 	add.w	r0, r7, #20
 8004984:	2300      	movs	r3, #0
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	2308      	movs	r3, #8
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2308      	movs	r3, #8
 800498e:	2210      	movs	r2, #16
 8004990:	f7ff fd4a 	bl	8004428 <_PrintUnsigned>
        break;
 8004994:	e007      	b.n	80049a6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004996:	f107 0314 	add.w	r3, r7, #20
 800499a:	2125      	movs	r1, #37	; 0x25
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fcc7 	bl	8004330 <_StoreChar>
        break;
 80049a2:	e000      	b.n	80049a6 <_VPrintTarget+0x332>
      default:
        break;
 80049a4:	bf00      	nop
      }
      sFormat++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e007      	b.n	80049be <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80049ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fcb9 	bl	8004330 <_StoreChar>
    }
  } while (*sFormat);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f47f ae72 	bne.w	80046ac <_VPrintTarget+0x38>
 80049c8:	e000      	b.n	80049cc <_VPrintTarget+0x358>
      break;
 80049ca:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d041      	beq.n	8004a56 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	643b      	str	r3, [r7, #64]	; 0x40
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e2:	e00b      	b.n	80049fc <_VPrintTarget+0x388>
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	6439      	str	r1, [r7, #64]	; 0x40
 80049ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	09db      	lsrs	r3, r3, #7
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004a00:	d8f0      	bhi.n	80049e4 <_VPrintTarget+0x370>
 8004a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	643a      	str	r2, [r7, #64]	; 0x40
 8004a08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a10:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a16:	2300      	movs	r3, #0
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1a:	e00b      	b.n	8004a34 <_VPrintTarget+0x3c0>
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	1c59      	adds	r1, r3, #1
 8004a24:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	09db      	lsrs	r3, r3, #7
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a36:	2b7f      	cmp	r3, #127	; 0x7f
 8004a38:	d8f0      	bhi.n	8004a1c <_VPrintTarget+0x3a8>
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	221a      	movs	r2, #26
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fb85 	bl	8004160 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004a5c:	bf00      	nop
 8004a5e:	3758      	adds	r7, #88	; 0x58
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a72:	2300      	movs	r3, #0
 8004a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a78:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <SEGGER_SYSVIEW_Init+0x74>)
 8004a7a:	4818      	ldr	r0, [pc, #96]	; (8004adc <SEGGER_SYSVIEW_Init+0x78>)
 8004a7c:	f7ff f93c 	bl	8003cf8 <SEGGER_RTT_AllocUpBuffer>
 8004a80:	4603      	mov	r3, r0
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a86:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a8a:	785a      	ldrb	r2, [r3, #1]
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a8e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a92:	7e1b      	ldrb	r3, [r3, #24]
 8004a94:	4618      	mov	r0, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <SEGGER_SYSVIEW_Init+0x80>)
 8004a9e:	490f      	ldr	r1, [pc, #60]	; (8004adc <SEGGER_SYSVIEW_Init+0x78>)
 8004aa0:	f7ff f9ae 	bl	8003e00 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <SEGGER_SYSVIEW_Init+0x84>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ab0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004abe:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20019770 	.word	0x20019770
 8004adc:	08006a40 	.word	0x08006a40
 8004ae0:	2001a778 	.word	0x2001a778
 8004ae4:	2001a770 	.word	0x2001a770
 8004ae8:	e0001004 	.word	0xe0001004

08004aec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004af4:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6113      	str	r3, [r2, #16]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	2001a778 	.word	0x2001a778

08004b0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b14:	f3ef 8311 	mrs	r3, BASEPRI
 8004b18:	f04f 0120 	mov.w	r1, #32
 8004b1c:	f381 8811 	msr	BASEPRI, r1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	4808      	ldr	r0, [pc, #32]	; (8004b44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b24:	f7ff fa29 	bl	8003f7a <_PreparePacket>
 8004b28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7ff fb16 	bl	8004160 <_SendPacket>
  RECORD_END();
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f383 8811 	msr	BASEPRI, r3
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2001a7a8 	.word	0x2001a7a8

08004b48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b52:	f3ef 8311 	mrs	r3, BASEPRI
 8004b56:	f04f 0120 	mov.w	r1, #32
 8004b5a:	f381 8811 	msr	BASEPRI, r1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	4816      	ldr	r0, [pc, #88]	; (8004bbc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b62:	f7ff fa0a 	bl	8003f7a <_PreparePacket>
 8004b66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e00b      	b.n	8004b8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	61f9      	str	r1, [r7, #28]
 8004b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d8f0      	bhi.n	8004b76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff fad9 	bl	8004160 <_SendPacket>
  RECORD_END();
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2001a7a8 	.word	0x2001a7a8

08004bc0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08c      	sub	sp, #48	; 0x30
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd0:	f04f 0120 	mov.w	r1, #32
 8004bd4:	f381 8811 	msr	BASEPRI, r1
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	4825      	ldr	r0, [pc, #148]	; (8004c70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004bdc:	f7ff f9cd 	bl	8003f7a <_PreparePacket>
 8004be0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bee:	e00b      	b.n	8004c08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0c:	d8f0      	bhi.n	8004bf0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e00b      	b.n	8004c40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	6279      	str	r1, [r7, #36]	; 0x24
 8004c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	09db      	lsrs	r3, r3, #7
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b7f      	cmp	r3, #127	; 0x7f
 8004c44:	d8f0      	bhi.n	8004c28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	6979      	ldr	r1, [r7, #20]
 8004c5a:	69b8      	ldr	r0, [r7, #24]
 8004c5c:	f7ff fa80 	bl	8004160 <_SendPacket>
  RECORD_END();
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f383 8811 	msr	BASEPRI, r3
}
 8004c66:	bf00      	nop
 8004c68:	3730      	adds	r7, #48	; 0x30
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	2001a7a8 	.word	0x2001a7a8

08004c74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
 8004c78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004c7a:	4b59      	ldr	r3, [pc, #356]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004c80:	f3ef 8311 	mrs	r3, BASEPRI
 8004c84:	f04f 0120 	mov.w	r1, #32
 8004c88:	f381 8811 	msr	BASEPRI, r1
 8004c8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004c8e:	4b54      	ldr	r3, [pc, #336]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	220a      	movs	r2, #10
 8004c94:	4953      	ldr	r1, [pc, #332]	; (8004de4 <SEGGER_SYSVIEW_Start+0x170>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fb fa9a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004ca2:	f7fe fdfd 	bl	80038a0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ca6:	200a      	movs	r0, #10
 8004ca8:	f7ff ff30 	bl	8004b0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cac:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb0:	f04f 0120 	mov.w	r1, #32
 8004cb4:	f381 8811 	msr	BASEPRI, r1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	484b      	ldr	r0, [pc, #300]	; (8004de8 <SEGGER_SYSVIEW_Start+0x174>)
 8004cbc:	f7ff f95d 	bl	8003f7a <_PreparePacket>
 8004cc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	4b45      	ldr	r3, [pc, #276]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd0:	e00b      	b.n	8004cea <SEGGER_SYSVIEW_Start+0x76>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	1c59      	adds	r1, r3, #1
 8004cda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	09db      	lsrs	r3, r3, #7
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	2b7f      	cmp	r3, #127	; 0x7f
 8004cee:	d8f0      	bhi.n	8004cd2 <SEGGER_SYSVIEW_Start+0x5e>
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	e00b      	b.n	8004d24 <SEGGER_SYSVIEW_Start+0xb0>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	1c59      	adds	r1, r3, #1
 8004d14:	6279      	str	r1, [r7, #36]	; 0x24
 8004d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	09db      	lsrs	r3, r3, #7
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2b7f      	cmp	r3, #127	; 0x7f
 8004d28:	d8f0      	bhi.n	8004d0c <SEGGER_SYSVIEW_Start+0x98>
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e00b      	b.n	8004d5e <SEGGER_SYSVIEW_Start+0xea>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	61f9      	str	r1, [r7, #28]
 8004d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	09db      	lsrs	r3, r3, #7
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b7f      	cmp	r3, #127	; 0x7f
 8004d62:	d8f0      	bhi.n	8004d46 <SEGGER_SYSVIEW_Start+0xd2>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	61fa      	str	r2, [r7, #28]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e00b      	b.n	8004d96 <SEGGER_SYSVIEW_Start+0x122>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1c59      	adds	r1, r3, #1
 8004d86:	6179      	str	r1, [r7, #20]
 8004d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	09db      	lsrs	r3, r3, #7
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9a:	d8f0      	bhi.n	8004d7e <SEGGER_SYSVIEW_Start+0x10a>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	617a      	str	r2, [r7, #20]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004dac:	2218      	movs	r2, #24
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff f9d5 	bl	8004160 <_SendPacket>
      RECORD_END();
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004dca:	f000 f9eb 	bl	80051a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004dce:	f000 f9b1 	bl	8005134 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004dd2:	f000 fc13 	bl	80055fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004dd6:	bf00      	nop
 8004dd8:	3730      	adds	r7, #48	; 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2001a778 	.word	0x2001a778
 8004de4:	08006a68 	.word	0x08006a68
 8004de8:	2001a7a8 	.word	0x2001a7a8

08004dec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004df2:	f3ef 8311 	mrs	r3, BASEPRI
 8004df6:	f04f 0120 	mov.w	r1, #32
 8004dfa:	f381 8811 	msr	BASEPRI, r1
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <SEGGER_SYSVIEW_Stop+0x44>)
 8004e02:	f7ff f8ba 	bl	8003f7a <_PreparePacket>
 8004e06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e10:	220b      	movs	r2, #11
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f7ff f9a3 	bl	8004160 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f383 8811 	msr	BASEPRI, r3
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	2001a7a8 	.word	0x2001a7a8
 8004e34:	2001a778 	.word	0x2001a778

08004e38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08c      	sub	sp, #48	; 0x30
 8004e3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e42:	f04f 0120 	mov.w	r1, #32
 8004e46:	f381 8811 	msr	BASEPRI, r1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4845      	ldr	r0, [pc, #276]	; (8004f64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e4e:	f7ff f894 	bl	8003f7a <_PreparePacket>
 8004e52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5c:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	e00b      	b.n	8004e7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	09db      	lsrs	r3, r3, #7
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e80:	d8f0      	bhi.n	8004e64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	e00b      	b.n	8004eb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	1c59      	adds	r1, r3, #1
 8004ea6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	09db      	lsrs	r3, r3, #7
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eba:	d8f0      	bhi.n	8004e9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e00b      	b.n	8004ef0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	61f9      	str	r1, [r7, #28]
 8004ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	09db      	lsrs	r3, r3, #7
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef4:	d8f0      	bhi.n	8004ed8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	61fa      	str	r2, [r7, #28]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6179      	str	r1, [r7, #20]
 8004f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	617a      	str	r2, [r7, #20]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f3e:	2218      	movs	r2, #24
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f7ff f90c 	bl	8004160 <_SendPacket>
  RECORD_END();
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	4798      	blx	r3
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3730      	adds	r7, #48	; 0x30
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2001a7a8 	.word	0x2001a7a8
 8004f68:	2001a778 	.word	0x2001a778

08004f6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b092      	sub	sp, #72	; 0x48
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004f74:	f3ef 8311 	mrs	r3, BASEPRI
 8004f78:	f04f 0120 	mov.w	r1, #32
 8004f7c:	f381 8811 	msr	BASEPRI, r1
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	486a      	ldr	r0, [pc, #424]	; (800512c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004f84:	f7fe fff9 	bl	8003f7a <_PreparePacket>
 8004f88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b66      	ldr	r3, [pc, #408]	; (8005130 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	e00b      	b.n	8004fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	6479      	str	r1, [r7, #68]	; 0x44
 8004faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb4:	09db      	lsrs	r3, r3, #7
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fba:	2b7f      	cmp	r3, #127	; 0x7f
 8004fbc:	d8f0      	bhi.n	8004fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8004fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005006:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	4619      	mov	r1, r3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7fe ff65 	bl	8003ee0 <_EncodeStr>
 8005016:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005018:	2209      	movs	r2, #9
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	6938      	ldr	r0, [r7, #16]
 800501e:	f7ff f89f 	bl	8004160 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b40      	ldr	r3, [pc, #256]	; (8005130 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	633b      	str	r3, [r7, #48]	; 0x30
 8005036:	e00b      	b.n	8005050 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	b2da      	uxtb	r2, r3
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	6379      	str	r1, [r7, #52]	; 0x34
 8005042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	09db      	lsrs	r3, r3, #7
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b7f      	cmp	r3, #127	; 0x7f
 8005054:	d8f0      	bhi.n	8005038 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	637a      	str	r2, [r7, #52]	; 0x34
 800505c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005070:	e00b      	b.n	800508a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	b2da      	uxtb	r2, r3
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	1c59      	adds	r1, r3, #1
 800507a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800507c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	2b7f      	cmp	r3, #127	; 0x7f
 800508e:	d8f0      	bhi.n	8005072 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	e00b      	b.n	80050c4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	6279      	str	r1, [r7, #36]	; 0x24
 80050b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	09db      	lsrs	r3, r3, #7
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b7f      	cmp	r3, #127	; 0x7f
 80050c8:	d8f0      	bhi.n	80050ac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	627a      	str	r2, [r7, #36]	; 0x24
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e00b      	b.n	80050fc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	61f9      	str	r1, [r7, #28]
 80050ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005112:	2215      	movs	r2, #21
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	6938      	ldr	r0, [r7, #16]
 8005118:	f7ff f822 	bl	8004160 <_SendPacket>
  RECORD_END();
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f383 8811 	msr	BASEPRI, r3
}
 8005122:	bf00      	nop
 8005124:	3748      	adds	r7, #72	; 0x48
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2001a7a8 	.word	0x2001a7a8
 8005130:	2001a778 	.word	0x2001a778

08005134 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4798      	blx	r3
  }
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	2001a778 	.word	0x2001a778

0800515c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005164:	f3ef 8311 	mrs	r3, BASEPRI
 8005168:	f04f 0120 	mov.w	r1, #32
 800516c:	f381 8811 	msr	BASEPRI, r1
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	480b      	ldr	r0, [pc, #44]	; (80051a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005174:	f7fe ff01 	bl	8003f7a <_PreparePacket>
 8005178:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	6938      	ldr	r0, [r7, #16]
 8005180:	f7fe feae 	bl	8003ee0 <_EncodeStr>
 8005184:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005186:	220e      	movs	r2, #14
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f7fe ffe8 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8811 	msr	BASEPRI, r3
}
 8005196:	bf00      	nop
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2001a7a8 	.word	0x2001a7a8

080051a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01a      	beq.n	80051e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80051bc:	4b10      	ldr	r3, [pc, #64]	; (8005200 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4798      	blx	r3
 80051c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051c8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80051ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	000a      	movs	r2, r1
 80051d8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80051da:	4613      	mov	r3, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4621      	mov	r1, r4
 80051e0:	200d      	movs	r0, #13
 80051e2:	f7ff fced 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32x2>
 80051e6:	e006      	b.n	80051f6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	200c      	movs	r0, #12
 80051f0:	f7ff fcaa 	bl	8004b48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd90      	pop	{r4, r7, pc}
 80051fe:	bf00      	nop
 8005200:	2001a778 	.word	0x2001a778
 8005204:	e0001004 	.word	0xe0001004

08005208 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800520e:	f3ef 8311 	mrs	r3, BASEPRI
 8005212:	f04f 0120 	mov.w	r1, #32
 8005216:	f381 8811 	msr	BASEPRI, r1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	4819      	ldr	r0, [pc, #100]	; (8005284 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800521e:	f7fe feac 	bl	8003f7a <_PreparePacket>
 8005222:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e00b      	b.n	8005254 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	6179      	str	r1, [r7, #20]
 8005246:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	09db      	lsrs	r3, r3, #7
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b7f      	cmp	r3, #127	; 0x7f
 8005258:	d8f0      	bhi.n	800523c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	617a      	str	r2, [r7, #20]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800526a:	2202      	movs	r2, #2
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	68b8      	ldr	r0, [r7, #8]
 8005270:	f7fe ff76 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f383 8811 	msr	BASEPRI, r3
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	2001a7a8 	.word	0x2001a7a8
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005292:	f3ef 8311 	mrs	r3, BASEPRI
 8005296:	f04f 0120 	mov.w	r1, #32
 800529a:	f381 8811 	msr	BASEPRI, r1
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	4807      	ldr	r0, [pc, #28]	; (80052c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80052a2:	f7fe fe6a 	bl	8003f7a <_PreparePacket>
 80052a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80052a8:	2203      	movs	r2, #3
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6838      	ldr	r0, [r7, #0]
 80052ae:	f7fe ff57 	bl	8004160 <_SendPacket>
  RECORD_END();
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f383 8811 	msr	BASEPRI, r3
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2001a7a8 	.word	0x2001a7a8

080052c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052ca:	f3ef 8311 	mrs	r3, BASEPRI
 80052ce:	f04f 0120 	mov.w	r1, #32
 80052d2:	f381 8811 	msr	BASEPRI, r1
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	4807      	ldr	r0, [pc, #28]	; (80052f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80052da:	f7fe fe4e 	bl	8003f7a <_PreparePacket>
 80052de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80052e0:	2212      	movs	r2, #18
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6838      	ldr	r0, [r7, #0]
 80052e6:	f7fe ff3b 	bl	8004160 <_SendPacket>
  RECORD_END();
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f383 8811 	msr	BASEPRI, r3
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2001a7a8 	.word	0x2001a7a8

080052fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005302:	f3ef 8311 	mrs	r3, BASEPRI
 8005306:	f04f 0120 	mov.w	r1, #32
 800530a:	f381 8811 	msr	BASEPRI, r1
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	4807      	ldr	r0, [pc, #28]	; (8005330 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005312:	f7fe fe32 	bl	8003f7a <_PreparePacket>
 8005316:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005318:	2211      	movs	r2, #17
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f7fe ff1f 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f383 8811 	msr	BASEPRI, r3
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2001a7a8 	.word	0x2001a7a8

08005334 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800533c:	f3ef 8311 	mrs	r3, BASEPRI
 8005340:	f04f 0120 	mov.w	r1, #32
 8005344:	f381 8811 	msr	BASEPRI, r1
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	4819      	ldr	r0, [pc, #100]	; (80053b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800534c:	f7fe fe15 	bl	8003f7a <_PreparePacket>
 8005350:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e00b      	b.n	8005382 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	61f9      	str	r1, [r7, #28]
 8005374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b7f      	cmp	r3, #127	; 0x7f
 8005386:	d8f0      	bhi.n	800536a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	61fa      	str	r2, [r7, #28]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005398:	2208      	movs	r2, #8
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7fe fedf 	bl	8004160 <_SendPacket>
  RECORD_END();
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f383 8811 	msr	BASEPRI, r3
}
 80053a8:	bf00      	nop
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2001a7a8 	.word	0x2001a7a8
 80053b4:	2001a778 	.word	0x2001a778

080053b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053c0:	f3ef 8311 	mrs	r3, BASEPRI
 80053c4:	f04f 0120 	mov.w	r1, #32
 80053c8:	f381 8811 	msr	BASEPRI, r1
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	4819      	ldr	r0, [pc, #100]	; (8005434 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80053d0:	f7fe fdd3 	bl	8003f7a <_PreparePacket>
 80053d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e00b      	b.n	8005406 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	1c59      	adds	r1, r3, #1
 80053f6:	61f9      	str	r1, [r7, #28]
 80053f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	09db      	lsrs	r3, r3, #7
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b7f      	cmp	r3, #127	; 0x7f
 800540a:	d8f0      	bhi.n	80053ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	61fa      	str	r2, [r7, #28]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800541c:	2204      	movs	r2, #4
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6938      	ldr	r0, [r7, #16]
 8005422:	f7fe fe9d 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f383 8811 	msr	BASEPRI, r3
}
 800542c:	bf00      	nop
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	2001a7a8 	.word	0x2001a7a8
 8005438:	2001a778 	.word	0x2001a778

0800543c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005444:	f3ef 8311 	mrs	r3, BASEPRI
 8005448:	f04f 0120 	mov.w	r1, #32
 800544c:	f381 8811 	msr	BASEPRI, r1
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	4819      	ldr	r0, [pc, #100]	; (80054b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005454:	f7fe fd91 	bl	8003f7a <_PreparePacket>
 8005458:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e00b      	b.n	800548a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	1c59      	adds	r1, r3, #1
 800547a:	61f9      	str	r1, [r7, #28]
 800547c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b7f      	cmp	r3, #127	; 0x7f
 800548e:	d8f0      	bhi.n	8005472 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	61fa      	str	r2, [r7, #28]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80054a0:	2206      	movs	r2, #6
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f7fe fe5b 	bl	8004160 <_SendPacket>
  RECORD_END();
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f383 8811 	msr	BASEPRI, r3
}
 80054b0:	bf00      	nop
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	2001a7a8 	.word	0x2001a7a8
 80054bc:	2001a778 	.word	0x2001a778

080054c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08c      	sub	sp, #48	; 0x30
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80054ca:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06d      	beq.n	80055ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80054d2:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80054d8:	2300      	movs	r3, #0
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	e008      	b.n	80054f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	3301      	adds	r3, #1
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d3f2      	bcc.n	80054de <SEGGER_SYSVIEW_SendModule+0x1e>
 80054f8:	e000      	b.n	80054fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80054fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d055      	beq.n	80055ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005502:	f3ef 8311 	mrs	r3, BASEPRI
 8005506:	f04f 0120 	mov.w	r1, #32
 800550a:	f381 8811 	msr	BASEPRI, r1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	482a      	ldr	r0, [pc, #168]	; (80055bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005512:	f7fe fd32 	bl	8003f7a <_PreparePacket>
 8005516:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	e00b      	b.n	800553e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	6279      	str	r1, [r7, #36]	; 0x24
 8005530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	09db      	lsrs	r3, r3, #7
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2b7f      	cmp	r3, #127	; 0x7f
 8005542:	d8f0      	bhi.n	8005526 <SEGGER_SYSVIEW_SendModule+0x66>
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	627a      	str	r2, [r7, #36]	; 0x24
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e00b      	b.n	8005578 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	61f9      	str	r1, [r7, #28]
 800556a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b7f      	cmp	r3, #127	; 0x7f
 800557c:	d8f0      	bhi.n	8005560 <SEGGER_SYSVIEW_SendModule+0xa0>
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	4619      	mov	r1, r3
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7fe fca2 	bl	8003ee0 <_EncodeStr>
 800559c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800559e:	2216      	movs	r2, #22
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f7fe fddc 	bl	8004160 <_SendPacket>
      RECORD_END();
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80055ae:	bf00      	nop
 80055b0:	3730      	adds	r7, #48	; 0x30
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2001a7a0 	.word	0x2001a7a0
 80055bc:	2001a7a8 	.word	0x2001a7a8

080055c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00f      	beq.n	80055ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f2      	bne.n	80055d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2001a7a0 	.word	0x2001a7a0

080055fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	f04f 0120 	mov.w	r1, #32
 800560a:	f381 8811 	msr	BASEPRI, r1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	4817      	ldr	r0, [pc, #92]	; (8005670 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005612:	f7fe fcb2 	bl	8003f7a <_PreparePacket>
 8005616:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e00b      	b.n	8005640 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	6179      	str	r1, [r7, #20]
 8005632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	09db      	lsrs	r3, r3, #7
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b7f      	cmp	r3, #127	; 0x7f
 8005644:	d8f0      	bhi.n	8005628 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	617a      	str	r2, [r7, #20]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005656:	221b      	movs	r2, #27
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	68b8      	ldr	r0, [r7, #8]
 800565c:	f7fe fd80 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f383 8811 	msr	BASEPRI, r3
}
 8005666:	bf00      	nop
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	2001a7a8 	.word	0x2001a7a8
 8005674:	2001a7a4 	.word	0x2001a7a4

08005678 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005678:	b40f      	push	{r0, r1, r2, r3}
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005680:	f107 0314 	add.w	r3, r7, #20
 8005684:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	461a      	mov	r2, r3
 800568a:	2100      	movs	r1, #0
 800568c:	6938      	ldr	r0, [r7, #16]
 800568e:	f7fe fff1 	bl	8004674 <_VPrintTarget>
  va_end(ParamList);
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800569c:	b004      	add	sp, #16
 800569e:	4770      	bx	lr

080056a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056a8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ac:	f04f 0120 	mov.w	r1, #32
 80056b0:	f381 8811 	msr	BASEPRI, r1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	4827      	ldr	r0, [pc, #156]	; (8005754 <SEGGER_SYSVIEW_Warn+0xb4>)
 80056b8:	f7fe fc5f 	bl	8003f7a <_PreparePacket>
 80056bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6938      	ldr	r0, [r7, #16]
 80056c4:	f7fe fc0c 	bl	8003ee0 <_EncodeStr>
 80056c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	2301      	movs	r3, #1
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	e00b      	b.n	80056ec <SEGGER_SYSVIEW_Warn+0x4c>
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1c59      	adds	r1, r3, #1
 80056dc:	6279      	str	r1, [r7, #36]	; 0x24
 80056de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	09db      	lsrs	r3, r3, #7
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b7f      	cmp	r3, #127	; 0x7f
 80056f0:	d8f0      	bhi.n	80056d4 <SEGGER_SYSVIEW_Warn+0x34>
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	627a      	str	r2, [r7, #36]	; 0x24
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e00b      	b.n	8005724 <SEGGER_SYSVIEW_Warn+0x84>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	61f9      	str	r1, [r7, #28]
 8005716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b7f      	cmp	r3, #127	; 0x7f
 8005728:	d8f0      	bhi.n	800570c <SEGGER_SYSVIEW_Warn+0x6c>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	61fa      	str	r2, [r7, #28]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800573a:	221a      	movs	r2, #26
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f7fe fd0e 	bl	8004160 <_SendPacket>
  RECORD_END();
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f383 8811 	msr	BASEPRI, r3
}
 800574a:	bf00      	nop
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	2001a7a8 	.word	0x2001a7a8

08005758 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	2000      	movs	r0, #0
 800576c:	f7fe fa9e 	bl	8003cac <SEGGER_RTT_Write>
  return len;
 8005770:	683b      	ldr	r3, [r7, #0]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	4d0d      	ldr	r5, [pc, #52]	; (80057b4 <__libc_init_array+0x38>)
 8005780:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	2600      	movs	r6, #0
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	4d0b      	ldr	r5, [pc, #44]	; (80057bc <__libc_init_array+0x40>)
 800578e:	4c0c      	ldr	r4, [pc, #48]	; (80057c0 <__libc_init_array+0x44>)
 8005790:	f001 f8ae 	bl	80068f0 <_init>
 8005794:	1b64      	subs	r4, r4, r5
 8005796:	10a4      	asrs	r4, r4, #2
 8005798:	2600      	movs	r6, #0
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08006b24 	.word	0x08006b24
 80057b8:	08006b24 	.word	0x08006b24
 80057bc:	08006b24 	.word	0x08006b24
 80057c0:	08006b28 	.word	0x08006b28

080057c4 <memcmp>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	3901      	subs	r1, #1
 80057c8:	4402      	add	r2, r0
 80057ca:	4290      	cmp	r0, r2
 80057cc:	d101      	bne.n	80057d2 <memcmp+0xe>
 80057ce:	2000      	movs	r0, #0
 80057d0:	e005      	b.n	80057de <memcmp+0x1a>
 80057d2:	7803      	ldrb	r3, [r0, #0]
 80057d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d001      	beq.n	80057e0 <memcmp+0x1c>
 80057dc:	1b18      	subs	r0, r3, r4
 80057de:	bd10      	pop	{r4, pc}
 80057e0:	3001      	adds	r0, #1
 80057e2:	e7f2      	b.n	80057ca <memcmp+0x6>

080057e4 <memcpy>:
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xc>
 80057ee:	4770      	bx	lr
 80057f0:	b510      	push	{r4, lr}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d1f9      	bne.n	80057f2 <memcpy+0xe>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <_puts_r>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	460e      	mov	r6, r1
 8005814:	4605      	mov	r5, r0
 8005816:	b118      	cbz	r0, 8005820 <_puts_r+0x10>
 8005818:	6983      	ldr	r3, [r0, #24]
 800581a:	b90b      	cbnz	r3, 8005820 <_puts_r+0x10>
 800581c:	f000 fa7c 	bl	8005d18 <__sinit>
 8005820:	69ab      	ldr	r3, [r5, #24]
 8005822:	68ac      	ldr	r4, [r5, #8]
 8005824:	b913      	cbnz	r3, 800582c <_puts_r+0x1c>
 8005826:	4628      	mov	r0, r5
 8005828:	f000 fa76 	bl	8005d18 <__sinit>
 800582c:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <_puts_r+0xd0>)
 800582e:	429c      	cmp	r4, r3
 8005830:	d120      	bne.n	8005874 <_puts_r+0x64>
 8005832:	686c      	ldr	r4, [r5, #4]
 8005834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005836:	07db      	lsls	r3, r3, #31
 8005838:	d405      	bmi.n	8005846 <_puts_r+0x36>
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	0598      	lsls	r0, r3, #22
 800583e:	d402      	bmi.n	8005846 <_puts_r+0x36>
 8005840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005842:	f000 fb07 	bl	8005e54 <__retarget_lock_acquire_recursive>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	0719      	lsls	r1, r3, #28
 800584a:	d51d      	bpl.n	8005888 <_puts_r+0x78>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	b1db      	cbz	r3, 8005888 <_puts_r+0x78>
 8005850:	3e01      	subs	r6, #1
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005858:	3b01      	subs	r3, #1
 800585a:	60a3      	str	r3, [r4, #8]
 800585c:	bb39      	cbnz	r1, 80058ae <_puts_r+0x9e>
 800585e:	2b00      	cmp	r3, #0
 8005860:	da38      	bge.n	80058d4 <_puts_r+0xc4>
 8005862:	4622      	mov	r2, r4
 8005864:	210a      	movs	r1, #10
 8005866:	4628      	mov	r0, r5
 8005868:	f000 f87c 	bl	8005964 <__swbuf_r>
 800586c:	3001      	adds	r0, #1
 800586e:	d011      	beq.n	8005894 <_puts_r+0x84>
 8005870:	250a      	movs	r5, #10
 8005872:	e011      	b.n	8005898 <_puts_r+0x88>
 8005874:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <_puts_r+0xd4>)
 8005876:	429c      	cmp	r4, r3
 8005878:	d101      	bne.n	800587e <_puts_r+0x6e>
 800587a:	68ac      	ldr	r4, [r5, #8]
 800587c:	e7da      	b.n	8005834 <_puts_r+0x24>
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <_puts_r+0xd8>)
 8005880:	429c      	cmp	r4, r3
 8005882:	bf08      	it	eq
 8005884:	68ec      	ldreq	r4, [r5, #12]
 8005886:	e7d5      	b.n	8005834 <_puts_r+0x24>
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f8bc 	bl	8005a08 <__swsetup_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	d0dd      	beq.n	8005850 <_puts_r+0x40>
 8005894:	f04f 35ff 	mov.w	r5, #4294967295
 8005898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800589a:	07da      	lsls	r2, r3, #31
 800589c:	d405      	bmi.n	80058aa <_puts_r+0x9a>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	059b      	lsls	r3, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_puts_r+0x9a>
 80058a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058a6:	f000 fad6 	bl	8005e56 <__retarget_lock_release_recursive>
 80058aa:	4628      	mov	r0, r5
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da04      	bge.n	80058bc <_puts_r+0xac>
 80058b2:	69a2      	ldr	r2, [r4, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	dc06      	bgt.n	80058c6 <_puts_r+0xb6>
 80058b8:	290a      	cmp	r1, #10
 80058ba:	d004      	beq.n	80058c6 <_puts_r+0xb6>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	6022      	str	r2, [r4, #0]
 80058c2:	7019      	strb	r1, [r3, #0]
 80058c4:	e7c5      	b.n	8005852 <_puts_r+0x42>
 80058c6:	4622      	mov	r2, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 f84b 	bl	8005964 <__swbuf_r>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d1bf      	bne.n	8005852 <_puts_r+0x42>
 80058d2:	e7df      	b.n	8005894 <_puts_r+0x84>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	250a      	movs	r5, #10
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	6022      	str	r2, [r4, #0]
 80058dc:	701d      	strb	r5, [r3, #0]
 80058de:	e7db      	b.n	8005898 <_puts_r+0x88>
 80058e0:	08006aa8 	.word	0x08006aa8
 80058e4:	08006ac8 	.word	0x08006ac8
 80058e8:	08006a88 	.word	0x08006a88

080058ec <puts>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <puts+0xc>)
 80058ee:	4601      	mov	r1, r0
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f7ff bf8d 	b.w	8005810 <_puts_r>
 80058f6:	bf00      	nop
 80058f8:	20000014 	.word	0x20000014

080058fc <sniprintf>:
 80058fc:	b40c      	push	{r2, r3}
 80058fe:	b530      	push	{r4, r5, lr}
 8005900:	4b17      	ldr	r3, [pc, #92]	; (8005960 <sniprintf+0x64>)
 8005902:	1e0c      	subs	r4, r1, #0
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	b09d      	sub	sp, #116	; 0x74
 8005908:	da08      	bge.n	800591c <sniprintf+0x20>
 800590a:	238b      	movs	r3, #139	; 0x8b
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	b01d      	add	sp, #116	; 0x74
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	b002      	add	sp, #8
 800591a:	4770      	bx	lr
 800591c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005920:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005924:	bf14      	ite	ne
 8005926:	f104 33ff 	addne.w	r3, r4, #4294967295
 800592a:	4623      	moveq	r3, r4
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005934:	9002      	str	r0, [sp, #8]
 8005936:	9006      	str	r0, [sp, #24]
 8005938:	f8ad 3016 	strh.w	r3, [sp, #22]
 800593c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800593e:	ab21      	add	r3, sp, #132	; 0x84
 8005940:	a902      	add	r1, sp, #8
 8005942:	4628      	mov	r0, r5
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	f000 fc29 	bl	800619c <_svfiprintf_r>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	bfbc      	itt	lt
 800594e:	238b      	movlt	r3, #139	; 0x8b
 8005950:	602b      	strlt	r3, [r5, #0]
 8005952:	2c00      	cmp	r4, #0
 8005954:	d0dd      	beq.n	8005912 <sniprintf+0x16>
 8005956:	9b02      	ldr	r3, [sp, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e7d9      	b.n	8005912 <sniprintf+0x16>
 800595e:	bf00      	nop
 8005960:	20000014 	.word	0x20000014

08005964 <__swbuf_r>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	460e      	mov	r6, r1
 8005968:	4614      	mov	r4, r2
 800596a:	4605      	mov	r5, r0
 800596c:	b118      	cbz	r0, 8005976 <__swbuf_r+0x12>
 800596e:	6983      	ldr	r3, [r0, #24]
 8005970:	b90b      	cbnz	r3, 8005976 <__swbuf_r+0x12>
 8005972:	f000 f9d1 	bl	8005d18 <__sinit>
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <__swbuf_r+0x98>)
 8005978:	429c      	cmp	r4, r3
 800597a:	d12b      	bne.n	80059d4 <__swbuf_r+0x70>
 800597c:	686c      	ldr	r4, [r5, #4]
 800597e:	69a3      	ldr	r3, [r4, #24]
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	071a      	lsls	r2, r3, #28
 8005986:	d52f      	bpl.n	80059e8 <__swbuf_r+0x84>
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	b36b      	cbz	r3, 80059e8 <__swbuf_r+0x84>
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1ac0      	subs	r0, r0, r3
 8005992:	6963      	ldr	r3, [r4, #20]
 8005994:	b2f6      	uxtb	r6, r6
 8005996:	4283      	cmp	r3, r0
 8005998:	4637      	mov	r7, r6
 800599a:	dc04      	bgt.n	80059a6 <__swbuf_r+0x42>
 800599c:	4621      	mov	r1, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f926 	bl	8005bf0 <_fflush_r>
 80059a4:	bb30      	cbnz	r0, 80059f4 <__swbuf_r+0x90>
 80059a6:	68a3      	ldr	r3, [r4, #8]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60a3      	str	r3, [r4, #8]
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	701e      	strb	r6, [r3, #0]
 80059b4:	6963      	ldr	r3, [r4, #20]
 80059b6:	3001      	adds	r0, #1
 80059b8:	4283      	cmp	r3, r0
 80059ba:	d004      	beq.n	80059c6 <__swbuf_r+0x62>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	07db      	lsls	r3, r3, #31
 80059c0:	d506      	bpl.n	80059d0 <__swbuf_r+0x6c>
 80059c2:	2e0a      	cmp	r6, #10
 80059c4:	d104      	bne.n	80059d0 <__swbuf_r+0x6c>
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 f911 	bl	8005bf0 <_fflush_r>
 80059ce:	b988      	cbnz	r0, 80059f4 <__swbuf_r+0x90>
 80059d0:	4638      	mov	r0, r7
 80059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d4:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <__swbuf_r+0x9c>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d101      	bne.n	80059de <__swbuf_r+0x7a>
 80059da:	68ac      	ldr	r4, [r5, #8]
 80059dc:	e7cf      	b.n	800597e <__swbuf_r+0x1a>
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <__swbuf_r+0xa0>)
 80059e0:	429c      	cmp	r4, r3
 80059e2:	bf08      	it	eq
 80059e4:	68ec      	ldreq	r4, [r5, #12]
 80059e6:	e7ca      	b.n	800597e <__swbuf_r+0x1a>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f80c 	bl	8005a08 <__swsetup_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d0cb      	beq.n	800598c <__swbuf_r+0x28>
 80059f4:	f04f 37ff 	mov.w	r7, #4294967295
 80059f8:	e7ea      	b.n	80059d0 <__swbuf_r+0x6c>
 80059fa:	bf00      	nop
 80059fc:	08006aa8 	.word	0x08006aa8
 8005a00:	08006ac8 	.word	0x08006ac8
 8005a04:	08006a88 	.word	0x08006a88

08005a08 <__swsetup_r>:
 8005a08:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <__swsetup_r+0xcc>)
 8005a0a:	b570      	push	{r4, r5, r6, lr}
 8005a0c:	681d      	ldr	r5, [r3, #0]
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	b125      	cbz	r5, 8005a1e <__swsetup_r+0x16>
 8005a14:	69ab      	ldr	r3, [r5, #24]
 8005a16:	b913      	cbnz	r3, 8005a1e <__swsetup_r+0x16>
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f97d 	bl	8005d18 <__sinit>
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <__swsetup_r+0xd0>)
 8005a20:	429c      	cmp	r4, r3
 8005a22:	d10f      	bne.n	8005a44 <__swsetup_r+0x3c>
 8005a24:	686c      	ldr	r4, [r5, #4]
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a2c:	0719      	lsls	r1, r3, #28
 8005a2e:	d42c      	bmi.n	8005a8a <__swsetup_r+0x82>
 8005a30:	06dd      	lsls	r5, r3, #27
 8005a32:	d411      	bmi.n	8005a58 <__swsetup_r+0x50>
 8005a34:	2309      	movs	r3, #9
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	e03e      	b.n	8005ac2 <__swsetup_r+0xba>
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <__swsetup_r+0xd4>)
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d101      	bne.n	8005a4e <__swsetup_r+0x46>
 8005a4a:	68ac      	ldr	r4, [r5, #8]
 8005a4c:	e7eb      	b.n	8005a26 <__swsetup_r+0x1e>
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <__swsetup_r+0xd8>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	bf08      	it	eq
 8005a54:	68ec      	ldreq	r4, [r5, #12]
 8005a56:	e7e6      	b.n	8005a26 <__swsetup_r+0x1e>
 8005a58:	0758      	lsls	r0, r3, #29
 8005a5a:	d512      	bpl.n	8005a82 <__swsetup_r+0x7a>
 8005a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a5e:	b141      	cbz	r1, 8005a72 <__swsetup_r+0x6a>
 8005a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a64:	4299      	cmp	r1, r3
 8005a66:	d002      	beq.n	8005a6e <__swsetup_r+0x66>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f000 fa5b 	bl	8005f24 <_free_r>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6363      	str	r3, [r4, #52]	; 0x34
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f043 0308 	orr.w	r3, r3, #8
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	b94b      	cbnz	r3, 8005aa2 <__swsetup_r+0x9a>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a98:	d003      	beq.n	8005aa2 <__swsetup_r+0x9a>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 fa01 	bl	8005ea4 <__smakebuf_r>
 8005aa2:	89a0      	ldrh	r0, [r4, #12]
 8005aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa8:	f010 0301 	ands.w	r3, r0, #1
 8005aac:	d00a      	beq.n	8005ac4 <__swsetup_r+0xbc>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60a3      	str	r3, [r4, #8]
 8005ab2:	6963      	ldr	r3, [r4, #20]
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	61a3      	str	r3, [r4, #24]
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	b943      	cbnz	r3, 8005ace <__swsetup_r+0xc6>
 8005abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ac0:	d1ba      	bne.n	8005a38 <__swsetup_r+0x30>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	0781      	lsls	r1, r0, #30
 8005ac6:	bf58      	it	pl
 8005ac8:	6963      	ldrpl	r3, [r4, #20]
 8005aca:	60a3      	str	r3, [r4, #8]
 8005acc:	e7f4      	b.n	8005ab8 <__swsetup_r+0xb0>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7f7      	b.n	8005ac2 <__swsetup_r+0xba>
 8005ad2:	bf00      	nop
 8005ad4:	20000014 	.word	0x20000014
 8005ad8:	08006aa8 	.word	0x08006aa8
 8005adc:	08006ac8 	.word	0x08006ac8
 8005ae0:	08006a88 	.word	0x08006a88

08005ae4 <__sflush_r>:
 8005ae4:	898a      	ldrh	r2, [r1, #12]
 8005ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aea:	4605      	mov	r5, r0
 8005aec:	0710      	lsls	r0, r2, #28
 8005aee:	460c      	mov	r4, r1
 8005af0:	d458      	bmi.n	8005ba4 <__sflush_r+0xc0>
 8005af2:	684b      	ldr	r3, [r1, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dc05      	bgt.n	8005b04 <__sflush_r+0x20>
 8005af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dc02      	bgt.n	8005b04 <__sflush_r+0x20>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	d0f9      	beq.n	8005afe <__sflush_r+0x1a>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b10:	682f      	ldr	r7, [r5, #0]
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	d032      	beq.n	8005b7c <__sflush_r+0x98>
 8005b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	075a      	lsls	r2, r3, #29
 8005b1c:	d505      	bpl.n	8005b2a <__sflush_r+0x46>
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b24:	b10b      	cbz	r3, 8005b2a <__sflush_r+0x46>
 8005b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b28:	1ac0      	subs	r0, r0, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b30:	6a21      	ldr	r1, [r4, #32]
 8005b32:	4628      	mov	r0, r5
 8005b34:	47b0      	blx	r6
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	d106      	bne.n	8005b4a <__sflush_r+0x66>
 8005b3c:	6829      	ldr	r1, [r5, #0]
 8005b3e:	291d      	cmp	r1, #29
 8005b40:	d82c      	bhi.n	8005b9c <__sflush_r+0xb8>
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <__sflush_r+0x108>)
 8005b44:	40ca      	lsrs	r2, r1
 8005b46:	07d6      	lsls	r6, r2, #31
 8005b48:	d528      	bpl.n	8005b9c <__sflush_r+0xb8>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	6062      	str	r2, [r4, #4]
 8005b4e:	04d9      	lsls	r1, r3, #19
 8005b50:	6922      	ldr	r2, [r4, #16]
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	d504      	bpl.n	8005b60 <__sflush_r+0x7c>
 8005b56:	1c42      	adds	r2, r0, #1
 8005b58:	d101      	bne.n	8005b5e <__sflush_r+0x7a>
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	b903      	cbnz	r3, 8005b60 <__sflush_r+0x7c>
 8005b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b62:	602f      	str	r7, [r5, #0]
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d0ca      	beq.n	8005afe <__sflush_r+0x1a>
 8005b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	d002      	beq.n	8005b76 <__sflush_r+0x92>
 8005b70:	4628      	mov	r0, r5
 8005b72:	f000 f9d7 	bl	8005f24 <_free_r>
 8005b76:	2000      	movs	r0, #0
 8005b78:	6360      	str	r0, [r4, #52]	; 0x34
 8005b7a:	e7c1      	b.n	8005b00 <__sflush_r+0x1c>
 8005b7c:	6a21      	ldr	r1, [r4, #32]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b0      	blx	r6
 8005b84:	1c41      	adds	r1, r0, #1
 8005b86:	d1c7      	bne.n	8005b18 <__sflush_r+0x34>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c4      	beq.n	8005b18 <__sflush_r+0x34>
 8005b8e:	2b1d      	cmp	r3, #29
 8005b90:	d001      	beq.n	8005b96 <__sflush_r+0xb2>
 8005b92:	2b16      	cmp	r3, #22
 8005b94:	d101      	bne.n	8005b9a <__sflush_r+0xb6>
 8005b96:	602f      	str	r7, [r5, #0]
 8005b98:	e7b1      	b.n	8005afe <__sflush_r+0x1a>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	e7ad      	b.n	8005b00 <__sflush_r+0x1c>
 8005ba4:	690f      	ldr	r7, [r1, #16]
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	d0a9      	beq.n	8005afe <__sflush_r+0x1a>
 8005baa:	0793      	lsls	r3, r2, #30
 8005bac:	680e      	ldr	r6, [r1, #0]
 8005bae:	bf08      	it	eq
 8005bb0:	694b      	ldreq	r3, [r1, #20]
 8005bb2:	600f      	str	r7, [r1, #0]
 8005bb4:	bf18      	it	ne
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	eba6 0807 	sub.w	r8, r6, r7
 8005bbc:	608b      	str	r3, [r1, #8]
 8005bbe:	f1b8 0f00 	cmp.w	r8, #0
 8005bc2:	dd9c      	ble.n	8005afe <__sflush_r+0x1a>
 8005bc4:	6a21      	ldr	r1, [r4, #32]
 8005bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bc8:	4643      	mov	r3, r8
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	dc06      	bgt.n	8005be2 <__sflush_r+0xfe>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	e78e      	b.n	8005b00 <__sflush_r+0x1c>
 8005be2:	4407      	add	r7, r0
 8005be4:	eba8 0800 	sub.w	r8, r8, r0
 8005be8:	e7e9      	b.n	8005bbe <__sflush_r+0xda>
 8005bea:	bf00      	nop
 8005bec:	20400001 	.word	0x20400001

08005bf0 <_fflush_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	b913      	cbnz	r3, 8005c00 <_fflush_r+0x10>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	b118      	cbz	r0, 8005c0a <_fflush_r+0x1a>
 8005c02:	6983      	ldr	r3, [r0, #24]
 8005c04:	b90b      	cbnz	r3, 8005c0a <_fflush_r+0x1a>
 8005c06:	f000 f887 	bl	8005d18 <__sinit>
 8005c0a:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <_fflush_r+0x6c>)
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	d11b      	bne.n	8005c48 <_fflush_r+0x58>
 8005c10:	686c      	ldr	r4, [r5, #4]
 8005c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0ef      	beq.n	8005bfa <_fflush_r+0xa>
 8005c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c1c:	07d0      	lsls	r0, r2, #31
 8005c1e:	d404      	bmi.n	8005c2a <_fflush_r+0x3a>
 8005c20:	0599      	lsls	r1, r3, #22
 8005c22:	d402      	bmi.n	8005c2a <_fflush_r+0x3a>
 8005c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c26:	f000 f915 	bl	8005e54 <__retarget_lock_acquire_recursive>
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	f7ff ff59 	bl	8005ae4 <__sflush_r>
 8005c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c34:	07da      	lsls	r2, r3, #31
 8005c36:	4605      	mov	r5, r0
 8005c38:	d4e0      	bmi.n	8005bfc <_fflush_r+0xc>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	059b      	lsls	r3, r3, #22
 8005c3e:	d4dd      	bmi.n	8005bfc <_fflush_r+0xc>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f000 f908 	bl	8005e56 <__retarget_lock_release_recursive>
 8005c46:	e7d9      	b.n	8005bfc <_fflush_r+0xc>
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <_fflush_r+0x70>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d101      	bne.n	8005c52 <_fflush_r+0x62>
 8005c4e:	68ac      	ldr	r4, [r5, #8]
 8005c50:	e7df      	b.n	8005c12 <_fflush_r+0x22>
 8005c52:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <_fflush_r+0x74>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	bf08      	it	eq
 8005c58:	68ec      	ldreq	r4, [r5, #12]
 8005c5a:	e7da      	b.n	8005c12 <_fflush_r+0x22>
 8005c5c:	08006aa8 	.word	0x08006aa8
 8005c60:	08006ac8 	.word	0x08006ac8
 8005c64:	08006a88 	.word	0x08006a88

08005c68 <std>:
 8005c68:	2300      	movs	r3, #0
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c76:	6083      	str	r3, [r0, #8]
 8005c78:	8181      	strh	r1, [r0, #12]
 8005c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c7c:	81c2      	strh	r2, [r0, #14]
 8005c7e:	6183      	str	r3, [r0, #24]
 8005c80:	4619      	mov	r1, r3
 8005c82:	2208      	movs	r2, #8
 8005c84:	305c      	adds	r0, #92	; 0x5c
 8005c86:	f7ff fdbb 	bl	8005800 <memset>
 8005c8a:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <std+0x38>)
 8005c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <std+0x3c>)
 8005c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <std+0x40>)
 8005c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <std+0x44>)
 8005c98:	6224      	str	r4, [r4, #32]
 8005c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	bf00      	nop
 8005ca0:	080066e5 	.word	0x080066e5
 8005ca4:	08006707 	.word	0x08006707
 8005ca8:	0800673f 	.word	0x0800673f
 8005cac:	08006763 	.word	0x08006763

08005cb0 <_cleanup_r>:
 8005cb0:	4901      	ldr	r1, [pc, #4]	; (8005cb8 <_cleanup_r+0x8>)
 8005cb2:	f000 b8af 	b.w	8005e14 <_fwalk_reent>
 8005cb6:	bf00      	nop
 8005cb8:	08005bf1 	.word	0x08005bf1

08005cbc <__sfmoreglue>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	2268      	movs	r2, #104	; 0x68
 8005cc0:	1e4d      	subs	r5, r1, #1
 8005cc2:	4355      	muls	r5, r2
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cca:	f000 f997 	bl	8005ffc <_malloc_r>
 8005cce:	4604      	mov	r4, r0
 8005cd0:	b140      	cbz	r0, 8005ce4 <__sfmoreglue+0x28>
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005cd8:	300c      	adds	r0, #12
 8005cda:	60a0      	str	r0, [r4, #8]
 8005cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ce0:	f7ff fd8e 	bl	8005800 <memset>
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}

08005ce8 <__sfp_lock_acquire>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__sfp_lock_acquire+0x8>)
 8005cea:	f000 b8b3 	b.w	8005e54 <__retarget_lock_acquire_recursive>
 8005cee:	bf00      	nop
 8005cf0:	2001a88c 	.word	0x2001a88c

08005cf4 <__sfp_lock_release>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__sfp_lock_release+0x8>)
 8005cf6:	f000 b8ae 	b.w	8005e56 <__retarget_lock_release_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	2001a88c 	.word	0x2001a88c

08005d00 <__sinit_lock_acquire>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__sinit_lock_acquire+0x8>)
 8005d02:	f000 b8a7 	b.w	8005e54 <__retarget_lock_acquire_recursive>
 8005d06:	bf00      	nop
 8005d08:	2001a88d 	.word	0x2001a88d

08005d0c <__sinit_lock_release>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__sinit_lock_release+0x8>)
 8005d0e:	f000 b8a2 	b.w	8005e56 <__retarget_lock_release_recursive>
 8005d12:	bf00      	nop
 8005d14:	2001a88d 	.word	0x2001a88d

08005d18 <__sinit>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	f7ff fff0 	bl	8005d00 <__sinit_lock_acquire>
 8005d20:	69a3      	ldr	r3, [r4, #24]
 8005d22:	b11b      	cbz	r3, 8005d2c <__sinit+0x14>
 8005d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d28:	f7ff bff0 	b.w	8005d0c <__sinit_lock_release>
 8005d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d30:	6523      	str	r3, [r4, #80]	; 0x50
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <__sinit+0x68>)
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <__sinit+0x6c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d3a:	42a3      	cmp	r3, r4
 8005d3c:	bf04      	itt	eq
 8005d3e:	2301      	moveq	r3, #1
 8005d40:	61a3      	streq	r3, [r4, #24]
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f820 	bl	8005d88 <__sfp>
 8005d48:	6060      	str	r0, [r4, #4]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 f81c 	bl	8005d88 <__sfp>
 8005d50:	60a0      	str	r0, [r4, #8]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f818 	bl	8005d88 <__sfp>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60e0      	str	r0, [r4, #12]
 8005d5c:	2104      	movs	r1, #4
 8005d5e:	6860      	ldr	r0, [r4, #4]
 8005d60:	f7ff ff82 	bl	8005c68 <std>
 8005d64:	68a0      	ldr	r0, [r4, #8]
 8005d66:	2201      	movs	r2, #1
 8005d68:	2109      	movs	r1, #9
 8005d6a:	f7ff ff7d 	bl	8005c68 <std>
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	2202      	movs	r2, #2
 8005d72:	2112      	movs	r1, #18
 8005d74:	f7ff ff78 	bl	8005c68 <std>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61a3      	str	r3, [r4, #24]
 8005d7c:	e7d2      	b.n	8005d24 <__sinit+0xc>
 8005d7e:	bf00      	nop
 8005d80:	08006a84 	.word	0x08006a84
 8005d84:	08005cb1 	.word	0x08005cb1

08005d88 <__sfp>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	f7ff ffac 	bl	8005ce8 <__sfp_lock_acquire>
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <__sfp+0x84>)
 8005d92:	681e      	ldr	r6, [r3, #0]
 8005d94:	69b3      	ldr	r3, [r6, #24]
 8005d96:	b913      	cbnz	r3, 8005d9e <__sfp+0x16>
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff ffbd 	bl	8005d18 <__sinit>
 8005d9e:	3648      	adds	r6, #72	; 0x48
 8005da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	d503      	bpl.n	8005db0 <__sfp+0x28>
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	b30b      	cbz	r3, 8005df0 <__sfp+0x68>
 8005dac:	6836      	ldr	r6, [r6, #0]
 8005dae:	e7f7      	b.n	8005da0 <__sfp+0x18>
 8005db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005db4:	b9d5      	cbnz	r5, 8005dec <__sfp+0x64>
 8005db6:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <__sfp+0x88>)
 8005db8:	60e3      	str	r3, [r4, #12]
 8005dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005dc0:	f000 f847 	bl	8005e52 <__retarget_lock_init_recursive>
 8005dc4:	f7ff ff96 	bl	8005cf4 <__sfp_lock_release>
 8005dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dd0:	6025      	str	r5, [r4, #0]
 8005dd2:	61a5      	str	r5, [r4, #24]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ddc:	f7ff fd10 	bl	8005800 <memset>
 8005de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005de8:	4620      	mov	r0, r4
 8005dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dec:	3468      	adds	r4, #104	; 0x68
 8005dee:	e7d9      	b.n	8005da4 <__sfp+0x1c>
 8005df0:	2104      	movs	r1, #4
 8005df2:	4638      	mov	r0, r7
 8005df4:	f7ff ff62 	bl	8005cbc <__sfmoreglue>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	6030      	str	r0, [r6, #0]
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d1d5      	bne.n	8005dac <__sfp+0x24>
 8005e00:	f7ff ff78 	bl	8005cf4 <__sfp_lock_release>
 8005e04:	230c      	movs	r3, #12
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	e7ee      	b.n	8005de8 <__sfp+0x60>
 8005e0a:	bf00      	nop
 8005e0c:	08006a84 	.word	0x08006a84
 8005e10:	ffff0001 	.word	0xffff0001

08005e14 <_fwalk_reent>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4606      	mov	r6, r0
 8005e1a:	4688      	mov	r8, r1
 8005e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e20:	2700      	movs	r7, #0
 8005e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e26:	f1b9 0901 	subs.w	r9, r9, #1
 8005e2a:	d505      	bpl.n	8005e38 <_fwalk_reent+0x24>
 8005e2c:	6824      	ldr	r4, [r4, #0]
 8005e2e:	2c00      	cmp	r4, #0
 8005e30:	d1f7      	bne.n	8005e22 <_fwalk_reent+0xe>
 8005e32:	4638      	mov	r0, r7
 8005e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e38:	89ab      	ldrh	r3, [r5, #12]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d907      	bls.n	8005e4e <_fwalk_reent+0x3a>
 8005e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e42:	3301      	adds	r3, #1
 8005e44:	d003      	beq.n	8005e4e <_fwalk_reent+0x3a>
 8005e46:	4629      	mov	r1, r5
 8005e48:	4630      	mov	r0, r6
 8005e4a:	47c0      	blx	r8
 8005e4c:	4307      	orrs	r7, r0
 8005e4e:	3568      	adds	r5, #104	; 0x68
 8005e50:	e7e9      	b.n	8005e26 <_fwalk_reent+0x12>

08005e52 <__retarget_lock_init_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <__retarget_lock_acquire_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <__retarget_lock_release_recursive>:
 8005e56:	4770      	bx	lr

08005e58 <__swhatbuf_r>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	460e      	mov	r6, r1
 8005e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e60:	2900      	cmp	r1, #0
 8005e62:	b096      	sub	sp, #88	; 0x58
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	da08      	bge.n	8005e7c <__swhatbuf_r+0x24>
 8005e6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	061a      	lsls	r2, r3, #24
 8005e74:	d410      	bmi.n	8005e98 <__swhatbuf_r+0x40>
 8005e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e7a:	e00e      	b.n	8005e9a <__swhatbuf_r+0x42>
 8005e7c:	466a      	mov	r2, sp
 8005e7e:	f000 fc85 	bl	800678c <_fstat_r>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	dbf1      	blt.n	8005e6a <__swhatbuf_r+0x12>
 8005e86:	9a01      	ldr	r2, [sp, #4]
 8005e88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e90:	425a      	negs	r2, r3
 8005e92:	415a      	adcs	r2, r3
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	e7ee      	b.n	8005e76 <__swhatbuf_r+0x1e>
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	b016      	add	sp, #88	; 0x58
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ea4 <__smakebuf_r>:
 8005ea4:	898b      	ldrh	r3, [r1, #12]
 8005ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ea8:	079d      	lsls	r5, r3, #30
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	d507      	bpl.n	8005ec0 <__smakebuf_r+0x1c>
 8005eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	6163      	str	r3, [r4, #20]
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	ab01      	add	r3, sp, #4
 8005ec2:	466a      	mov	r2, sp
 8005ec4:	f7ff ffc8 	bl	8005e58 <__swhatbuf_r>
 8005ec8:	9900      	ldr	r1, [sp, #0]
 8005eca:	4605      	mov	r5, r0
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f895 	bl	8005ffc <_malloc_r>
 8005ed2:	b948      	cbnz	r0, 8005ee8 <__smakebuf_r+0x44>
 8005ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed8:	059a      	lsls	r2, r3, #22
 8005eda:	d4ef      	bmi.n	8005ebc <__smakebuf_r+0x18>
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	e7e3      	b.n	8005eb0 <__smakebuf_r+0xc>
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <__smakebuf_r+0x7c>)
 8005eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	6020      	str	r0, [r4, #0]
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	6163      	str	r3, [r4, #20]
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	6120      	str	r0, [r4, #16]
 8005efe:	b15b      	cbz	r3, 8005f18 <__smakebuf_r+0x74>
 8005f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f04:	4630      	mov	r0, r6
 8005f06:	f000 fc53 	bl	80067b0 <_isatty_r>
 8005f0a:	b128      	cbz	r0, 8005f18 <__smakebuf_r+0x74>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	89a0      	ldrh	r0, [r4, #12]
 8005f1a:	4305      	orrs	r5, r0
 8005f1c:	81a5      	strh	r5, [r4, #12]
 8005f1e:	e7cd      	b.n	8005ebc <__smakebuf_r+0x18>
 8005f20:	08005cb1 	.word	0x08005cb1

08005f24 <_free_r>:
 8005f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f26:	2900      	cmp	r1, #0
 8005f28:	d044      	beq.n	8005fb4 <_free_r+0x90>
 8005f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f2e:	9001      	str	r0, [sp, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f1a1 0404 	sub.w	r4, r1, #4
 8005f36:	bfb8      	it	lt
 8005f38:	18e4      	addlt	r4, r4, r3
 8005f3a:	f000 fc75 	bl	8006828 <__malloc_lock>
 8005f3e:	4a1e      	ldr	r2, [pc, #120]	; (8005fb8 <_free_r+0x94>)
 8005f40:	9801      	ldr	r0, [sp, #4]
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	b933      	cbnz	r3, 8005f54 <_free_r+0x30>
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	b003      	add	sp, #12
 8005f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f50:	f000 bc70 	b.w	8006834 <__malloc_unlock>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d908      	bls.n	8005f6a <_free_r+0x46>
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	1961      	adds	r1, r4, r5
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf01      	itttt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	1949      	addeq	r1, r1, r5
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	e7ed      	b.n	8005f46 <_free_r+0x22>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b10b      	cbz	r3, 8005f74 <_free_r+0x50>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x46>
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	1855      	adds	r5, r2, r1
 8005f78:	42a5      	cmp	r5, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x70>
 8005f7c:	6824      	ldr	r4, [r4, #0]
 8005f7e:	4421      	add	r1, r4
 8005f80:	1854      	adds	r4, r2, r1
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	d1e0      	bne.n	8005f4a <_free_r+0x26>
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	4421      	add	r1, r4
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	e7da      	b.n	8005f4a <_free_r+0x26>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x78>
 8005f96:	230c      	movs	r3, #12
 8005f98:	6003      	str	r3, [r0, #0]
 8005f9a:	e7d6      	b.n	8005f4a <_free_r+0x26>
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	1961      	adds	r1, r4, r5
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1949      	addeq	r1, r1, r5
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	6054      	str	r4, [r2, #4]
 8005fb2:	e7ca      	b.n	8005f4a <_free_r+0x26>
 8005fb4:	b003      	add	sp, #12
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	2001a890 	.word	0x2001a890

08005fbc <sbrk_aligned>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4e0e      	ldr	r6, [pc, #56]	; (8005ff8 <sbrk_aligned+0x3c>)
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	6831      	ldr	r1, [r6, #0]
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	b911      	cbnz	r1, 8005fce <sbrk_aligned+0x12>
 8005fc8:	f000 fb7c 	bl	80066c4 <_sbrk_r>
 8005fcc:	6030      	str	r0, [r6, #0]
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f000 fb77 	bl	80066c4 <_sbrk_r>
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d00a      	beq.n	8005ff0 <sbrk_aligned+0x34>
 8005fda:	1cc4      	adds	r4, r0, #3
 8005fdc:	f024 0403 	bic.w	r4, r4, #3
 8005fe0:	42a0      	cmp	r0, r4
 8005fe2:	d007      	beq.n	8005ff4 <sbrk_aligned+0x38>
 8005fe4:	1a21      	subs	r1, r4, r0
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f000 fb6c 	bl	80066c4 <_sbrk_r>
 8005fec:	3001      	adds	r0, #1
 8005fee:	d101      	bne.n	8005ff4 <sbrk_aligned+0x38>
 8005ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	2001a894 	.word	0x2001a894

08005ffc <_malloc_r>:
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	1ccd      	adds	r5, r1, #3
 8006002:	f025 0503 	bic.w	r5, r5, #3
 8006006:	3508      	adds	r5, #8
 8006008:	2d0c      	cmp	r5, #12
 800600a:	bf38      	it	cc
 800600c:	250c      	movcc	r5, #12
 800600e:	2d00      	cmp	r5, #0
 8006010:	4607      	mov	r7, r0
 8006012:	db01      	blt.n	8006018 <_malloc_r+0x1c>
 8006014:	42a9      	cmp	r1, r5
 8006016:	d905      	bls.n	8006024 <_malloc_r+0x28>
 8006018:	230c      	movs	r3, #12
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	2600      	movs	r6, #0
 800601e:	4630      	mov	r0, r6
 8006020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006024:	4e2e      	ldr	r6, [pc, #184]	; (80060e0 <_malloc_r+0xe4>)
 8006026:	f000 fbff 	bl	8006828 <__malloc_lock>
 800602a:	6833      	ldr	r3, [r6, #0]
 800602c:	461c      	mov	r4, r3
 800602e:	bb34      	cbnz	r4, 800607e <_malloc_r+0x82>
 8006030:	4629      	mov	r1, r5
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff ffc2 	bl	8005fbc <sbrk_aligned>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	4604      	mov	r4, r0
 800603c:	d14d      	bne.n	80060da <_malloc_r+0xde>
 800603e:	6834      	ldr	r4, [r6, #0]
 8006040:	4626      	mov	r6, r4
 8006042:	2e00      	cmp	r6, #0
 8006044:	d140      	bne.n	80060c8 <_malloc_r+0xcc>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	4631      	mov	r1, r6
 800604a:	4638      	mov	r0, r7
 800604c:	eb04 0803 	add.w	r8, r4, r3
 8006050:	f000 fb38 	bl	80066c4 <_sbrk_r>
 8006054:	4580      	cmp	r8, r0
 8006056:	d13a      	bne.n	80060ce <_malloc_r+0xd2>
 8006058:	6821      	ldr	r1, [r4, #0]
 800605a:	3503      	adds	r5, #3
 800605c:	1a6d      	subs	r5, r5, r1
 800605e:	f025 0503 	bic.w	r5, r5, #3
 8006062:	3508      	adds	r5, #8
 8006064:	2d0c      	cmp	r5, #12
 8006066:	bf38      	it	cc
 8006068:	250c      	movcc	r5, #12
 800606a:	4629      	mov	r1, r5
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ffa5 	bl	8005fbc <sbrk_aligned>
 8006072:	3001      	adds	r0, #1
 8006074:	d02b      	beq.n	80060ce <_malloc_r+0xd2>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	442b      	add	r3, r5
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	e00e      	b.n	800609c <_malloc_r+0xa0>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	1b52      	subs	r2, r2, r5
 8006082:	d41e      	bmi.n	80060c2 <_malloc_r+0xc6>
 8006084:	2a0b      	cmp	r2, #11
 8006086:	d916      	bls.n	80060b6 <_malloc_r+0xba>
 8006088:	1961      	adds	r1, r4, r5
 800608a:	42a3      	cmp	r3, r4
 800608c:	6025      	str	r5, [r4, #0]
 800608e:	bf18      	it	ne
 8006090:	6059      	strne	r1, [r3, #4]
 8006092:	6863      	ldr	r3, [r4, #4]
 8006094:	bf08      	it	eq
 8006096:	6031      	streq	r1, [r6, #0]
 8006098:	5162      	str	r2, [r4, r5]
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	4638      	mov	r0, r7
 800609e:	f104 060b 	add.w	r6, r4, #11
 80060a2:	f000 fbc7 	bl	8006834 <__malloc_unlock>
 80060a6:	f026 0607 	bic.w	r6, r6, #7
 80060aa:	1d23      	adds	r3, r4, #4
 80060ac:	1af2      	subs	r2, r6, r3
 80060ae:	d0b6      	beq.n	800601e <_malloc_r+0x22>
 80060b0:	1b9b      	subs	r3, r3, r6
 80060b2:	50a3      	str	r3, [r4, r2]
 80060b4:	e7b3      	b.n	800601e <_malloc_r+0x22>
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	bf0c      	ite	eq
 80060bc:	6032      	streq	r2, [r6, #0]
 80060be:	605a      	strne	r2, [r3, #4]
 80060c0:	e7ec      	b.n	800609c <_malloc_r+0xa0>
 80060c2:	4623      	mov	r3, r4
 80060c4:	6864      	ldr	r4, [r4, #4]
 80060c6:	e7b2      	b.n	800602e <_malloc_r+0x32>
 80060c8:	4634      	mov	r4, r6
 80060ca:	6876      	ldr	r6, [r6, #4]
 80060cc:	e7b9      	b.n	8006042 <_malloc_r+0x46>
 80060ce:	230c      	movs	r3, #12
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4638      	mov	r0, r7
 80060d4:	f000 fbae 	bl	8006834 <__malloc_unlock>
 80060d8:	e7a1      	b.n	800601e <_malloc_r+0x22>
 80060da:	6025      	str	r5, [r4, #0]
 80060dc:	e7de      	b.n	800609c <_malloc_r+0xa0>
 80060de:	bf00      	nop
 80060e0:	2001a890 	.word	0x2001a890

080060e4 <__ssputs_r>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	688e      	ldr	r6, [r1, #8]
 80060ea:	429e      	cmp	r6, r3
 80060ec:	4682      	mov	sl, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4690      	mov	r8, r2
 80060f2:	461f      	mov	r7, r3
 80060f4:	d838      	bhi.n	8006168 <__ssputs_r+0x84>
 80060f6:	898a      	ldrh	r2, [r1, #12]
 80060f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060fc:	d032      	beq.n	8006164 <__ssputs_r+0x80>
 80060fe:	6825      	ldr	r5, [r4, #0]
 8006100:	6909      	ldr	r1, [r1, #16]
 8006102:	eba5 0901 	sub.w	r9, r5, r1
 8006106:	6965      	ldr	r5, [r4, #20]
 8006108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800610c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006110:	3301      	adds	r3, #1
 8006112:	444b      	add	r3, r9
 8006114:	106d      	asrs	r5, r5, #1
 8006116:	429d      	cmp	r5, r3
 8006118:	bf38      	it	cc
 800611a:	461d      	movcc	r5, r3
 800611c:	0553      	lsls	r3, r2, #21
 800611e:	d531      	bpl.n	8006184 <__ssputs_r+0xa0>
 8006120:	4629      	mov	r1, r5
 8006122:	f7ff ff6b 	bl	8005ffc <_malloc_r>
 8006126:	4606      	mov	r6, r0
 8006128:	b950      	cbnz	r0, 8006140 <__ssputs_r+0x5c>
 800612a:	230c      	movs	r3, #12
 800612c:	f8ca 3000 	str.w	r3, [sl]
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	6921      	ldr	r1, [r4, #16]
 8006142:	464a      	mov	r2, r9
 8006144:	f7ff fb4e 	bl	80057e4 <memcpy>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	6126      	str	r6, [r4, #16]
 8006156:	6165      	str	r5, [r4, #20]
 8006158:	444e      	add	r6, r9
 800615a:	eba5 0509 	sub.w	r5, r5, r9
 800615e:	6026      	str	r6, [r4, #0]
 8006160:	60a5      	str	r5, [r4, #8]
 8006162:	463e      	mov	r6, r7
 8006164:	42be      	cmp	r6, r7
 8006166:	d900      	bls.n	800616a <__ssputs_r+0x86>
 8006168:	463e      	mov	r6, r7
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	4632      	mov	r2, r6
 800616e:	4641      	mov	r1, r8
 8006170:	f000 fb40 	bl	80067f4 <memmove>
 8006174:	68a3      	ldr	r3, [r4, #8]
 8006176:	1b9b      	subs	r3, r3, r6
 8006178:	60a3      	str	r3, [r4, #8]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	4433      	add	r3, r6
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	2000      	movs	r0, #0
 8006182:	e7db      	b.n	800613c <__ssputs_r+0x58>
 8006184:	462a      	mov	r2, r5
 8006186:	f000 fb5b 	bl	8006840 <_realloc_r>
 800618a:	4606      	mov	r6, r0
 800618c:	2800      	cmp	r0, #0
 800618e:	d1e1      	bne.n	8006154 <__ssputs_r+0x70>
 8006190:	6921      	ldr	r1, [r4, #16]
 8006192:	4650      	mov	r0, sl
 8006194:	f7ff fec6 	bl	8005f24 <_free_r>
 8006198:	e7c7      	b.n	800612a <__ssputs_r+0x46>
	...

0800619c <_svfiprintf_r>:
 800619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	4698      	mov	r8, r3
 80061a2:	898b      	ldrh	r3, [r1, #12]
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	b09d      	sub	sp, #116	; 0x74
 80061a8:	4607      	mov	r7, r0
 80061aa:	460d      	mov	r5, r1
 80061ac:	4614      	mov	r4, r2
 80061ae:	d50e      	bpl.n	80061ce <_svfiprintf_r+0x32>
 80061b0:	690b      	ldr	r3, [r1, #16]
 80061b2:	b963      	cbnz	r3, 80061ce <_svfiprintf_r+0x32>
 80061b4:	2140      	movs	r1, #64	; 0x40
 80061b6:	f7ff ff21 	bl	8005ffc <_malloc_r>
 80061ba:	6028      	str	r0, [r5, #0]
 80061bc:	6128      	str	r0, [r5, #16]
 80061be:	b920      	cbnz	r0, 80061ca <_svfiprintf_r+0x2e>
 80061c0:	230c      	movs	r3, #12
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	f04f 30ff 	mov.w	r0, #4294967295
 80061c8:	e0d1      	b.n	800636e <_svfiprintf_r+0x1d2>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	616b      	str	r3, [r5, #20]
 80061ce:	2300      	movs	r3, #0
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	2320      	movs	r3, #32
 80061d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061dc:	2330      	movs	r3, #48	; 0x30
 80061de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006388 <_svfiprintf_r+0x1ec>
 80061e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e6:	f04f 0901 	mov.w	r9, #1
 80061ea:	4623      	mov	r3, r4
 80061ec:	469a      	mov	sl, r3
 80061ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f2:	b10a      	cbz	r2, 80061f8 <_svfiprintf_r+0x5c>
 80061f4:	2a25      	cmp	r2, #37	; 0x25
 80061f6:	d1f9      	bne.n	80061ec <_svfiprintf_r+0x50>
 80061f8:	ebba 0b04 	subs.w	fp, sl, r4
 80061fc:	d00b      	beq.n	8006216 <_svfiprintf_r+0x7a>
 80061fe:	465b      	mov	r3, fp
 8006200:	4622      	mov	r2, r4
 8006202:	4629      	mov	r1, r5
 8006204:	4638      	mov	r0, r7
 8006206:	f7ff ff6d 	bl	80060e4 <__ssputs_r>
 800620a:	3001      	adds	r0, #1
 800620c:	f000 80aa 	beq.w	8006364 <_svfiprintf_r+0x1c8>
 8006210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006212:	445a      	add	r2, fp
 8006214:	9209      	str	r2, [sp, #36]	; 0x24
 8006216:	f89a 3000 	ldrb.w	r3, [sl]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80a2 	beq.w	8006364 <_svfiprintf_r+0x1c8>
 8006220:	2300      	movs	r3, #0
 8006222:	f04f 32ff 	mov.w	r2, #4294967295
 8006226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800622a:	f10a 0a01 	add.w	sl, sl, #1
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	9307      	str	r3, [sp, #28]
 8006232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006236:	931a      	str	r3, [sp, #104]	; 0x68
 8006238:	4654      	mov	r4, sl
 800623a:	2205      	movs	r2, #5
 800623c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006240:	4851      	ldr	r0, [pc, #324]	; (8006388 <_svfiprintf_r+0x1ec>)
 8006242:	f7fa f815 	bl	8000270 <memchr>
 8006246:	9a04      	ldr	r2, [sp, #16]
 8006248:	b9d8      	cbnz	r0, 8006282 <_svfiprintf_r+0xe6>
 800624a:	06d0      	lsls	r0, r2, #27
 800624c:	bf44      	itt	mi
 800624e:	2320      	movmi	r3, #32
 8006250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006254:	0711      	lsls	r1, r2, #28
 8006256:	bf44      	itt	mi
 8006258:	232b      	movmi	r3, #43	; 0x2b
 800625a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625e:	f89a 3000 	ldrb.w	r3, [sl]
 8006262:	2b2a      	cmp	r3, #42	; 0x2a
 8006264:	d015      	beq.n	8006292 <_svfiprintf_r+0xf6>
 8006266:	9a07      	ldr	r2, [sp, #28]
 8006268:	4654      	mov	r4, sl
 800626a:	2000      	movs	r0, #0
 800626c:	f04f 0c0a 	mov.w	ip, #10
 8006270:	4621      	mov	r1, r4
 8006272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006276:	3b30      	subs	r3, #48	; 0x30
 8006278:	2b09      	cmp	r3, #9
 800627a:	d94e      	bls.n	800631a <_svfiprintf_r+0x17e>
 800627c:	b1b0      	cbz	r0, 80062ac <_svfiprintf_r+0x110>
 800627e:	9207      	str	r2, [sp, #28]
 8006280:	e014      	b.n	80062ac <_svfiprintf_r+0x110>
 8006282:	eba0 0308 	sub.w	r3, r0, r8
 8006286:	fa09 f303 	lsl.w	r3, r9, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	46a2      	mov	sl, r4
 8006290:	e7d2      	b.n	8006238 <_svfiprintf_r+0x9c>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	1d19      	adds	r1, r3, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	9103      	str	r1, [sp, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfbb      	ittet	lt
 800629e:	425b      	neglt	r3, r3
 80062a0:	f042 0202 	orrlt.w	r2, r2, #2
 80062a4:	9307      	strge	r3, [sp, #28]
 80062a6:	9307      	strlt	r3, [sp, #28]
 80062a8:	bfb8      	it	lt
 80062aa:	9204      	strlt	r2, [sp, #16]
 80062ac:	7823      	ldrb	r3, [r4, #0]
 80062ae:	2b2e      	cmp	r3, #46	; 0x2e
 80062b0:	d10c      	bne.n	80062cc <_svfiprintf_r+0x130>
 80062b2:	7863      	ldrb	r3, [r4, #1]
 80062b4:	2b2a      	cmp	r3, #42	; 0x2a
 80062b6:	d135      	bne.n	8006324 <_svfiprintf_r+0x188>
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	9203      	str	r2, [sp, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bfb8      	it	lt
 80062c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062c8:	3402      	adds	r4, #2
 80062ca:	9305      	str	r3, [sp, #20]
 80062cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006398 <_svfiprintf_r+0x1fc>
 80062d0:	7821      	ldrb	r1, [r4, #0]
 80062d2:	2203      	movs	r2, #3
 80062d4:	4650      	mov	r0, sl
 80062d6:	f7f9 ffcb 	bl	8000270 <memchr>
 80062da:	b140      	cbz	r0, 80062ee <_svfiprintf_r+0x152>
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	eba0 000a 	sub.w	r0, r0, sl
 80062e2:	fa03 f000 	lsl.w	r0, r3, r0
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	4303      	orrs	r3, r0
 80062ea:	3401      	adds	r4, #1
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f2:	4826      	ldr	r0, [pc, #152]	; (800638c <_svfiprintf_r+0x1f0>)
 80062f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062f8:	2206      	movs	r2, #6
 80062fa:	f7f9 ffb9 	bl	8000270 <memchr>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d038      	beq.n	8006374 <_svfiprintf_r+0x1d8>
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <_svfiprintf_r+0x1f4>)
 8006304:	bb1b      	cbnz	r3, 800634e <_svfiprintf_r+0x1b2>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	3307      	adds	r3, #7
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	3308      	adds	r3, #8
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006314:	4433      	add	r3, r6
 8006316:	9309      	str	r3, [sp, #36]	; 0x24
 8006318:	e767      	b.n	80061ea <_svfiprintf_r+0x4e>
 800631a:	fb0c 3202 	mla	r2, ip, r2, r3
 800631e:	460c      	mov	r4, r1
 8006320:	2001      	movs	r0, #1
 8006322:	e7a5      	b.n	8006270 <_svfiprintf_r+0xd4>
 8006324:	2300      	movs	r3, #0
 8006326:	3401      	adds	r4, #1
 8006328:	9305      	str	r3, [sp, #20]
 800632a:	4619      	mov	r1, r3
 800632c:	f04f 0c0a 	mov.w	ip, #10
 8006330:	4620      	mov	r0, r4
 8006332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006336:	3a30      	subs	r2, #48	; 0x30
 8006338:	2a09      	cmp	r2, #9
 800633a:	d903      	bls.n	8006344 <_svfiprintf_r+0x1a8>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0c5      	beq.n	80062cc <_svfiprintf_r+0x130>
 8006340:	9105      	str	r1, [sp, #20]
 8006342:	e7c3      	b.n	80062cc <_svfiprintf_r+0x130>
 8006344:	fb0c 2101 	mla	r1, ip, r1, r2
 8006348:	4604      	mov	r4, r0
 800634a:	2301      	movs	r3, #1
 800634c:	e7f0      	b.n	8006330 <_svfiprintf_r+0x194>
 800634e:	ab03      	add	r3, sp, #12
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	462a      	mov	r2, r5
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <_svfiprintf_r+0x1f8>)
 8006356:	a904      	add	r1, sp, #16
 8006358:	4638      	mov	r0, r7
 800635a:	f3af 8000 	nop.w
 800635e:	1c42      	adds	r2, r0, #1
 8006360:	4606      	mov	r6, r0
 8006362:	d1d6      	bne.n	8006312 <_svfiprintf_r+0x176>
 8006364:	89ab      	ldrh	r3, [r5, #12]
 8006366:	065b      	lsls	r3, r3, #25
 8006368:	f53f af2c 	bmi.w	80061c4 <_svfiprintf_r+0x28>
 800636c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800636e:	b01d      	add	sp, #116	; 0x74
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	ab03      	add	r3, sp, #12
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	462a      	mov	r2, r5
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <_svfiprintf_r+0x1f8>)
 800637c:	a904      	add	r1, sp, #16
 800637e:	4638      	mov	r0, r7
 8006380:	f000 f87a 	bl	8006478 <_printf_i>
 8006384:	e7eb      	b.n	800635e <_svfiprintf_r+0x1c2>
 8006386:	bf00      	nop
 8006388:	08006ae8 	.word	0x08006ae8
 800638c:	08006af2 	.word	0x08006af2
 8006390:	00000000 	.word	0x00000000
 8006394:	080060e5 	.word	0x080060e5
 8006398:	08006aee 	.word	0x08006aee

0800639c <_printf_common>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	4616      	mov	r6, r2
 80063a2:	4699      	mov	r9, r3
 80063a4:	688a      	ldr	r2, [r1, #8]
 80063a6:	690b      	ldr	r3, [r1, #16]
 80063a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bfb8      	it	lt
 80063b0:	4613      	movlt	r3, r2
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b8:	4607      	mov	r7, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b10a      	cbz	r2, 80063c2 <_printf_common+0x26>
 80063be:	3301      	adds	r3, #1
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	0699      	lsls	r1, r3, #26
 80063c6:	bf42      	ittt	mi
 80063c8:	6833      	ldrmi	r3, [r6, #0]
 80063ca:	3302      	addmi	r3, #2
 80063cc:	6033      	strmi	r3, [r6, #0]
 80063ce:	6825      	ldr	r5, [r4, #0]
 80063d0:	f015 0506 	ands.w	r5, r5, #6
 80063d4:	d106      	bne.n	80063e4 <_printf_common+0x48>
 80063d6:	f104 0a19 	add.w	sl, r4, #25
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	6832      	ldr	r2, [r6, #0]
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	dc26      	bgt.n	8006432 <_printf_common+0x96>
 80063e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e8:	1e13      	subs	r3, r2, #0
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	bf18      	it	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	0692      	lsls	r2, r2, #26
 80063f2:	d42b      	bmi.n	800644c <_printf_common+0xb0>
 80063f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f8:	4649      	mov	r1, r9
 80063fa:	4638      	mov	r0, r7
 80063fc:	47c0      	blx	r8
 80063fe:	3001      	adds	r0, #1
 8006400:	d01e      	beq.n	8006440 <_printf_common+0xa4>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	68e5      	ldr	r5, [r4, #12]
 8006406:	6832      	ldr	r2, [r6, #0]
 8006408:	f003 0306 	and.w	r3, r3, #6
 800640c:	2b04      	cmp	r3, #4
 800640e:	bf08      	it	eq
 8006410:	1aad      	subeq	r5, r5, r2
 8006412:	68a3      	ldr	r3, [r4, #8]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	bf0c      	ite	eq
 8006418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800641c:	2500      	movne	r5, #0
 800641e:	4293      	cmp	r3, r2
 8006420:	bfc4      	itt	gt
 8006422:	1a9b      	subgt	r3, r3, r2
 8006424:	18ed      	addgt	r5, r5, r3
 8006426:	2600      	movs	r6, #0
 8006428:	341a      	adds	r4, #26
 800642a:	42b5      	cmp	r5, r6
 800642c:	d11a      	bne.n	8006464 <_printf_common+0xc8>
 800642e:	2000      	movs	r0, #0
 8006430:	e008      	b.n	8006444 <_printf_common+0xa8>
 8006432:	2301      	movs	r3, #1
 8006434:	4652      	mov	r2, sl
 8006436:	4649      	mov	r1, r9
 8006438:	4638      	mov	r0, r7
 800643a:	47c0      	blx	r8
 800643c:	3001      	adds	r0, #1
 800643e:	d103      	bne.n	8006448 <_printf_common+0xac>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	3501      	adds	r5, #1
 800644a:	e7c6      	b.n	80063da <_printf_common+0x3e>
 800644c:	18e1      	adds	r1, r4, r3
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	2030      	movs	r0, #48	; 0x30
 8006452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006456:	4422      	add	r2, r4
 8006458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800645c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006460:	3302      	adds	r3, #2
 8006462:	e7c7      	b.n	80063f4 <_printf_common+0x58>
 8006464:	2301      	movs	r3, #1
 8006466:	4622      	mov	r2, r4
 8006468:	4649      	mov	r1, r9
 800646a:	4638      	mov	r0, r7
 800646c:	47c0      	blx	r8
 800646e:	3001      	adds	r0, #1
 8006470:	d0e6      	beq.n	8006440 <_printf_common+0xa4>
 8006472:	3601      	adds	r6, #1
 8006474:	e7d9      	b.n	800642a <_printf_common+0x8e>
	...

08006478 <_printf_i>:
 8006478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	7e0f      	ldrb	r7, [r1, #24]
 800647e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006480:	2f78      	cmp	r7, #120	; 0x78
 8006482:	4691      	mov	r9, r2
 8006484:	4680      	mov	r8, r0
 8006486:	460c      	mov	r4, r1
 8006488:	469a      	mov	sl, r3
 800648a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800648e:	d807      	bhi.n	80064a0 <_printf_i+0x28>
 8006490:	2f62      	cmp	r7, #98	; 0x62
 8006492:	d80a      	bhi.n	80064aa <_printf_i+0x32>
 8006494:	2f00      	cmp	r7, #0
 8006496:	f000 80d8 	beq.w	800664a <_printf_i+0x1d2>
 800649a:	2f58      	cmp	r7, #88	; 0x58
 800649c:	f000 80a3 	beq.w	80065e6 <_printf_i+0x16e>
 80064a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a8:	e03a      	b.n	8006520 <_printf_i+0xa8>
 80064aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ae:	2b15      	cmp	r3, #21
 80064b0:	d8f6      	bhi.n	80064a0 <_printf_i+0x28>
 80064b2:	a101      	add	r1, pc, #4	; (adr r1, 80064b8 <_printf_i+0x40>)
 80064b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006525 	.word	0x08006525
 80064c0:	080064a1 	.word	0x080064a1
 80064c4:	080064a1 	.word	0x080064a1
 80064c8:	080064a1 	.word	0x080064a1
 80064cc:	080064a1 	.word	0x080064a1
 80064d0:	08006525 	.word	0x08006525
 80064d4:	080064a1 	.word	0x080064a1
 80064d8:	080064a1 	.word	0x080064a1
 80064dc:	080064a1 	.word	0x080064a1
 80064e0:	080064a1 	.word	0x080064a1
 80064e4:	08006631 	.word	0x08006631
 80064e8:	08006555 	.word	0x08006555
 80064ec:	08006613 	.word	0x08006613
 80064f0:	080064a1 	.word	0x080064a1
 80064f4:	080064a1 	.word	0x080064a1
 80064f8:	08006653 	.word	0x08006653
 80064fc:	080064a1 	.word	0x080064a1
 8006500:	08006555 	.word	0x08006555
 8006504:	080064a1 	.word	0x080064a1
 8006508:	080064a1 	.word	0x080064a1
 800650c:	0800661b 	.word	0x0800661b
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	1d1a      	adds	r2, r3, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	602a      	str	r2, [r5, #0]
 8006518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800651c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006520:	2301      	movs	r3, #1
 8006522:	e0a3      	b.n	800666c <_printf_i+0x1f4>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	6829      	ldr	r1, [r5, #0]
 8006528:	0606      	lsls	r6, r0, #24
 800652a:	f101 0304 	add.w	r3, r1, #4
 800652e:	d50a      	bpl.n	8006546 <_printf_i+0xce>
 8006530:	680e      	ldr	r6, [r1, #0]
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	2e00      	cmp	r6, #0
 8006536:	da03      	bge.n	8006540 <_printf_i+0xc8>
 8006538:	232d      	movs	r3, #45	; 0x2d
 800653a:	4276      	negs	r6, r6
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006540:	485e      	ldr	r0, [pc, #376]	; (80066bc <_printf_i+0x244>)
 8006542:	230a      	movs	r3, #10
 8006544:	e019      	b.n	800657a <_printf_i+0x102>
 8006546:	680e      	ldr	r6, [r1, #0]
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800654e:	bf18      	it	ne
 8006550:	b236      	sxthne	r6, r6
 8006552:	e7ef      	b.n	8006534 <_printf_i+0xbc>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	1d19      	adds	r1, r3, #4
 800655a:	6029      	str	r1, [r5, #0]
 800655c:	0601      	lsls	r1, r0, #24
 800655e:	d501      	bpl.n	8006564 <_printf_i+0xec>
 8006560:	681e      	ldr	r6, [r3, #0]
 8006562:	e002      	b.n	800656a <_printf_i+0xf2>
 8006564:	0646      	lsls	r6, r0, #25
 8006566:	d5fb      	bpl.n	8006560 <_printf_i+0xe8>
 8006568:	881e      	ldrh	r6, [r3, #0]
 800656a:	4854      	ldr	r0, [pc, #336]	; (80066bc <_printf_i+0x244>)
 800656c:	2f6f      	cmp	r7, #111	; 0x6f
 800656e:	bf0c      	ite	eq
 8006570:	2308      	moveq	r3, #8
 8006572:	230a      	movne	r3, #10
 8006574:	2100      	movs	r1, #0
 8006576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800657a:	6865      	ldr	r5, [r4, #4]
 800657c:	60a5      	str	r5, [r4, #8]
 800657e:	2d00      	cmp	r5, #0
 8006580:	bfa2      	ittt	ge
 8006582:	6821      	ldrge	r1, [r4, #0]
 8006584:	f021 0104 	bicge.w	r1, r1, #4
 8006588:	6021      	strge	r1, [r4, #0]
 800658a:	b90e      	cbnz	r6, 8006590 <_printf_i+0x118>
 800658c:	2d00      	cmp	r5, #0
 800658e:	d04d      	beq.n	800662c <_printf_i+0x1b4>
 8006590:	4615      	mov	r5, r2
 8006592:	fbb6 f1f3 	udiv	r1, r6, r3
 8006596:	fb03 6711 	mls	r7, r3, r1, r6
 800659a:	5dc7      	ldrb	r7, [r0, r7]
 800659c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065a0:	4637      	mov	r7, r6
 80065a2:	42bb      	cmp	r3, r7
 80065a4:	460e      	mov	r6, r1
 80065a6:	d9f4      	bls.n	8006592 <_printf_i+0x11a>
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d10b      	bne.n	80065c4 <_printf_i+0x14c>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	07de      	lsls	r6, r3, #31
 80065b0:	d508      	bpl.n	80065c4 <_printf_i+0x14c>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	6861      	ldr	r1, [r4, #4]
 80065b6:	4299      	cmp	r1, r3
 80065b8:	bfde      	ittt	le
 80065ba:	2330      	movle	r3, #48	; 0x30
 80065bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065c4:	1b52      	subs	r2, r2, r5
 80065c6:	6122      	str	r2, [r4, #16]
 80065c8:	f8cd a000 	str.w	sl, [sp]
 80065cc:	464b      	mov	r3, r9
 80065ce:	aa03      	add	r2, sp, #12
 80065d0:	4621      	mov	r1, r4
 80065d2:	4640      	mov	r0, r8
 80065d4:	f7ff fee2 	bl	800639c <_printf_common>
 80065d8:	3001      	adds	r0, #1
 80065da:	d14c      	bne.n	8006676 <_printf_i+0x1fe>
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	b004      	add	sp, #16
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	4835      	ldr	r0, [pc, #212]	; (80066bc <_printf_i+0x244>)
 80065e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065ec:	6829      	ldr	r1, [r5, #0]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065f4:	6029      	str	r1, [r5, #0]
 80065f6:	061d      	lsls	r5, r3, #24
 80065f8:	d514      	bpl.n	8006624 <_printf_i+0x1ac>
 80065fa:	07df      	lsls	r7, r3, #31
 80065fc:	bf44      	itt	mi
 80065fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006602:	6023      	strmi	r3, [r4, #0]
 8006604:	b91e      	cbnz	r6, 800660e <_printf_i+0x196>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f023 0320 	bic.w	r3, r3, #32
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	2310      	movs	r3, #16
 8006610:	e7b0      	b.n	8006574 <_printf_i+0xfc>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f043 0320 	orr.w	r3, r3, #32
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	2378      	movs	r3, #120	; 0x78
 800661c:	4828      	ldr	r0, [pc, #160]	; (80066c0 <_printf_i+0x248>)
 800661e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006622:	e7e3      	b.n	80065ec <_printf_i+0x174>
 8006624:	0659      	lsls	r1, r3, #25
 8006626:	bf48      	it	mi
 8006628:	b2b6      	uxthmi	r6, r6
 800662a:	e7e6      	b.n	80065fa <_printf_i+0x182>
 800662c:	4615      	mov	r5, r2
 800662e:	e7bb      	b.n	80065a8 <_printf_i+0x130>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	6826      	ldr	r6, [r4, #0]
 8006634:	6961      	ldr	r1, [r4, #20]
 8006636:	1d18      	adds	r0, r3, #4
 8006638:	6028      	str	r0, [r5, #0]
 800663a:	0635      	lsls	r5, r6, #24
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	d501      	bpl.n	8006644 <_printf_i+0x1cc>
 8006640:	6019      	str	r1, [r3, #0]
 8006642:	e002      	b.n	800664a <_printf_i+0x1d2>
 8006644:	0670      	lsls	r0, r6, #25
 8006646:	d5fb      	bpl.n	8006640 <_printf_i+0x1c8>
 8006648:	8019      	strh	r1, [r3, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	4615      	mov	r5, r2
 8006650:	e7ba      	b.n	80065c8 <_printf_i+0x150>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	1d1a      	adds	r2, r3, #4
 8006656:	602a      	str	r2, [r5, #0]
 8006658:	681d      	ldr	r5, [r3, #0]
 800665a:	6862      	ldr	r2, [r4, #4]
 800665c:	2100      	movs	r1, #0
 800665e:	4628      	mov	r0, r5
 8006660:	f7f9 fe06 	bl	8000270 <memchr>
 8006664:	b108      	cbz	r0, 800666a <_printf_i+0x1f2>
 8006666:	1b40      	subs	r0, r0, r5
 8006668:	6060      	str	r0, [r4, #4]
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	2300      	movs	r3, #0
 8006670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006674:	e7a8      	b.n	80065c8 <_printf_i+0x150>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	462a      	mov	r2, r5
 800667a:	4649      	mov	r1, r9
 800667c:	4640      	mov	r0, r8
 800667e:	47d0      	blx	sl
 8006680:	3001      	adds	r0, #1
 8006682:	d0ab      	beq.n	80065dc <_printf_i+0x164>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	079b      	lsls	r3, r3, #30
 8006688:	d413      	bmi.n	80066b2 <_printf_i+0x23a>
 800668a:	68e0      	ldr	r0, [r4, #12]
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	4298      	cmp	r0, r3
 8006690:	bfb8      	it	lt
 8006692:	4618      	movlt	r0, r3
 8006694:	e7a4      	b.n	80065e0 <_printf_i+0x168>
 8006696:	2301      	movs	r3, #1
 8006698:	4632      	mov	r2, r6
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	47d0      	blx	sl
 80066a0:	3001      	adds	r0, #1
 80066a2:	d09b      	beq.n	80065dc <_printf_i+0x164>
 80066a4:	3501      	adds	r5, #1
 80066a6:	68e3      	ldr	r3, [r4, #12]
 80066a8:	9903      	ldr	r1, [sp, #12]
 80066aa:	1a5b      	subs	r3, r3, r1
 80066ac:	42ab      	cmp	r3, r5
 80066ae:	dcf2      	bgt.n	8006696 <_printf_i+0x21e>
 80066b0:	e7eb      	b.n	800668a <_printf_i+0x212>
 80066b2:	2500      	movs	r5, #0
 80066b4:	f104 0619 	add.w	r6, r4, #25
 80066b8:	e7f5      	b.n	80066a6 <_printf_i+0x22e>
 80066ba:	bf00      	nop
 80066bc:	08006af9 	.word	0x08006af9
 80066c0:	08006b0a 	.word	0x08006b0a

080066c4 <_sbrk_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d06      	ldr	r5, [pc, #24]	; (80066e0 <_sbrk_r+0x1c>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f000 f900 	bl	80068d4 <_sbrk>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_sbrk_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_sbrk_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	2001a898 	.word	0x2001a898

080066e4 <__sread>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	460c      	mov	r4, r1
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	f000 f8d8 	bl	80068a0 <_read_r>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	bfab      	itete	ge
 80066f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066f6:	89a3      	ldrhlt	r3, [r4, #12]
 80066f8:	181b      	addge	r3, r3, r0
 80066fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066fe:	bfac      	ite	ge
 8006700:	6563      	strge	r3, [r4, #84]	; 0x54
 8006702:	81a3      	strhlt	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__swrite>:
 8006706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670a:	461f      	mov	r7, r3
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	05db      	lsls	r3, r3, #23
 8006710:	4605      	mov	r5, r0
 8006712:	460c      	mov	r4, r1
 8006714:	4616      	mov	r6, r2
 8006716:	d505      	bpl.n	8006724 <__swrite+0x1e>
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	2302      	movs	r3, #2
 800671e:	2200      	movs	r2, #0
 8006720:	f000 f856 	bl	80067d0 <_lseek_r>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800672a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800672e:	81a3      	strh	r3, [r4, #12]
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	4628      	mov	r0, r5
 8006736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	f7ff b80d 	b.w	8005758 <_write_r>

0800673e <__sseek>:
 800673e:	b510      	push	{r4, lr}
 8006740:	460c      	mov	r4, r1
 8006742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006746:	f000 f843 	bl	80067d0 <_lseek_r>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	bf15      	itete	ne
 8006750:	6560      	strne	r0, [r4, #84]	; 0x54
 8006752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800675a:	81a3      	strheq	r3, [r4, #12]
 800675c:	bf18      	it	ne
 800675e:	81a3      	strhne	r3, [r4, #12]
 8006760:	bd10      	pop	{r4, pc}

08006762 <__sclose>:
 8006762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006766:	f000 b801 	b.w	800676c <_close_r>
	...

0800676c <_close_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d06      	ldr	r5, [pc, #24]	; (8006788 <_close_r+0x1c>)
 8006770:	2300      	movs	r3, #0
 8006772:	4604      	mov	r4, r0
 8006774:	4608      	mov	r0, r1
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	f7fa fabf 	bl	8000cfa <_close>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d102      	bne.n	8006786 <_close_r+0x1a>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	b103      	cbz	r3, 8006786 <_close_r+0x1a>
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	2001a898 	.word	0x2001a898

0800678c <_fstat_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d07      	ldr	r5, [pc, #28]	; (80067ac <_fstat_r+0x20>)
 8006790:	2300      	movs	r3, #0
 8006792:	4604      	mov	r4, r0
 8006794:	4608      	mov	r0, r1
 8006796:	4611      	mov	r1, r2
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	f7fa faba 	bl	8000d12 <_fstat>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d102      	bne.n	80067a8 <_fstat_r+0x1c>
 80067a2:	682b      	ldr	r3, [r5, #0]
 80067a4:	b103      	cbz	r3, 80067a8 <_fstat_r+0x1c>
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	2001a898 	.word	0x2001a898

080067b0 <_isatty_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4d06      	ldr	r5, [pc, #24]	; (80067cc <_isatty_r+0x1c>)
 80067b4:	2300      	movs	r3, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	4608      	mov	r0, r1
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	f7fa fab9 	bl	8000d32 <_isatty>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_isatty_r+0x1a>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_isatty_r+0x1a>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	2001a898 	.word	0x2001a898

080067d0 <_lseek_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	; (80067f0 <_lseek_r+0x20>)
 80067d4:	4604      	mov	r4, r0
 80067d6:	4608      	mov	r0, r1
 80067d8:	4611      	mov	r1, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f7fa fab2 	bl	8000d48 <_lseek>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_lseek_r+0x1e>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_lseek_r+0x1e>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	2001a898 	.word	0x2001a898

080067f4 <memmove>:
 80067f4:	4288      	cmp	r0, r1
 80067f6:	b510      	push	{r4, lr}
 80067f8:	eb01 0402 	add.w	r4, r1, r2
 80067fc:	d902      	bls.n	8006804 <memmove+0x10>
 80067fe:	4284      	cmp	r4, r0
 8006800:	4623      	mov	r3, r4
 8006802:	d807      	bhi.n	8006814 <memmove+0x20>
 8006804:	1e43      	subs	r3, r0, #1
 8006806:	42a1      	cmp	r1, r4
 8006808:	d008      	beq.n	800681c <memmove+0x28>
 800680a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800680e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006812:	e7f8      	b.n	8006806 <memmove+0x12>
 8006814:	4402      	add	r2, r0
 8006816:	4601      	mov	r1, r0
 8006818:	428a      	cmp	r2, r1
 800681a:	d100      	bne.n	800681e <memmove+0x2a>
 800681c:	bd10      	pop	{r4, pc}
 800681e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006826:	e7f7      	b.n	8006818 <memmove+0x24>

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__malloc_lock+0x8>)
 800682a:	f7ff bb13 	b.w	8005e54 <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	2001a88b 	.word	0x2001a88b

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__malloc_unlock+0x8>)
 8006836:	f7ff bb0e 	b.w	8005e56 <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	2001a88b 	.word	0x2001a88b

08006840 <_realloc_r>:
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	4680      	mov	r8, r0
 8006846:	4614      	mov	r4, r2
 8006848:	460e      	mov	r6, r1
 800684a:	b921      	cbnz	r1, 8006856 <_realloc_r+0x16>
 800684c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006850:	4611      	mov	r1, r2
 8006852:	f7ff bbd3 	b.w	8005ffc <_malloc_r>
 8006856:	b92a      	cbnz	r2, 8006864 <_realloc_r+0x24>
 8006858:	f7ff fb64 	bl	8005f24 <_free_r>
 800685c:	4625      	mov	r5, r4
 800685e:	4628      	mov	r0, r5
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	f000 f82e 	bl	80068c4 <_malloc_usable_size_r>
 8006868:	4284      	cmp	r4, r0
 800686a:	4607      	mov	r7, r0
 800686c:	d802      	bhi.n	8006874 <_realloc_r+0x34>
 800686e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006872:	d812      	bhi.n	800689a <_realloc_r+0x5a>
 8006874:	4621      	mov	r1, r4
 8006876:	4640      	mov	r0, r8
 8006878:	f7ff fbc0 	bl	8005ffc <_malloc_r>
 800687c:	4605      	mov	r5, r0
 800687e:	2800      	cmp	r0, #0
 8006880:	d0ed      	beq.n	800685e <_realloc_r+0x1e>
 8006882:	42bc      	cmp	r4, r7
 8006884:	4622      	mov	r2, r4
 8006886:	4631      	mov	r1, r6
 8006888:	bf28      	it	cs
 800688a:	463a      	movcs	r2, r7
 800688c:	f7fe ffaa 	bl	80057e4 <memcpy>
 8006890:	4631      	mov	r1, r6
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff fb46 	bl	8005f24 <_free_r>
 8006898:	e7e1      	b.n	800685e <_realloc_r+0x1e>
 800689a:	4635      	mov	r5, r6
 800689c:	e7df      	b.n	800685e <_realloc_r+0x1e>
	...

080068a0 <_read_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d07      	ldr	r5, [pc, #28]	; (80068c0 <_read_r+0x20>)
 80068a4:	4604      	mov	r4, r0
 80068a6:	4608      	mov	r0, r1
 80068a8:	4611      	mov	r1, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	602a      	str	r2, [r5, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f7fa fa06 	bl	8000cc0 <_read>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_read_r+0x1e>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_read_r+0x1e>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	2001a898 	.word	0x2001a898

080068c4 <_malloc_usable_size_r>:
 80068c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c8:	1f18      	subs	r0, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfbc      	itt	lt
 80068ce:	580b      	ldrlt	r3, [r1, r0]
 80068d0:	18c0      	addlt	r0, r0, r3
 80068d2:	4770      	bx	lr

080068d4 <_sbrk>:
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <_sbrk+0x14>)
 80068d6:	6811      	ldr	r1, [r2, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	b909      	cbnz	r1, 80068e0 <_sbrk+0xc>
 80068dc:	4903      	ldr	r1, [pc, #12]	; (80068ec <_sbrk+0x18>)
 80068de:	6011      	str	r1, [r2, #0]
 80068e0:	6810      	ldr	r0, [r2, #0]
 80068e2:	4403      	add	r3, r0
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4770      	bx	lr
 80068e8:	2001a89c 	.word	0x2001a89c
 80068ec:	2001a8a0 	.word	0x2001a8a0

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
