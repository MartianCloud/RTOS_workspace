
BMI160_GyroAcc_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006748  08006748  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006750  08006750  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00019860  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019874  20019874  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b56  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324d  00000000  00000000  00037b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002400a  00000000  00000000  0003d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001782e  00000000  00000000  000615ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da1b4  00000000  00000000  00078e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152fcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005794  00000000  00000000  0015301c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800667c 	.word	0x0800667c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800667c 	.word	0x0800667c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192a8 	.word	0x200192a8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	; 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	3c01      	subs	r4, #1
 80003b0:	bf28      	it	cs
 80003b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b6:	d2e9      	bcs.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_uldivmod>:
 80005ec:	b953      	cbnz	r3, 8000604 <__aeabi_uldivmod+0x18>
 80005ee:	b94a      	cbnz	r2, 8000604 <__aeabi_uldivmod+0x18>
 80005f0:	2900      	cmp	r1, #0
 80005f2:	bf08      	it	eq
 80005f4:	2800      	cmpeq	r0, #0
 80005f6:	bf1c      	itt	ne
 80005f8:	f04f 31ff 	movne.w	r1, #4294967295
 80005fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000600:	f000 b974 	b.w	80008ec <__aeabi_idiv0>
 8000604:	f1ad 0c08 	sub.w	ip, sp, #8
 8000608:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800060c:	f000 f806 	bl	800061c <__udivmoddi4>
 8000610:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr

0800061c <__udivmoddi4>:
 800061c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000620:	9d08      	ldr	r5, [sp, #32]
 8000622:	4604      	mov	r4, r0
 8000624:	468e      	mov	lr, r1
 8000626:	2b00      	cmp	r3, #0
 8000628:	d14d      	bne.n	80006c6 <__udivmoddi4+0xaa>
 800062a:	428a      	cmp	r2, r1
 800062c:	4694      	mov	ip, r2
 800062e:	d969      	bls.n	8000704 <__udivmoddi4+0xe8>
 8000630:	fab2 f282 	clz	r2, r2
 8000634:	b152      	cbz	r2, 800064c <__udivmoddi4+0x30>
 8000636:	fa01 f302 	lsl.w	r3, r1, r2
 800063a:	f1c2 0120 	rsb	r1, r2, #32
 800063e:	fa20 f101 	lsr.w	r1, r0, r1
 8000642:	fa0c fc02 	lsl.w	ip, ip, r2
 8000646:	ea41 0e03 	orr.w	lr, r1, r3
 800064a:	4094      	lsls	r4, r2
 800064c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000650:	0c21      	lsrs	r1, r4, #16
 8000652:	fbbe f6f8 	udiv	r6, lr, r8
 8000656:	fa1f f78c 	uxth.w	r7, ip
 800065a:	fb08 e316 	mls	r3, r8, r6, lr
 800065e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000662:	fb06 f107 	mul.w	r1, r6, r7
 8000666:	4299      	cmp	r1, r3
 8000668:	d90a      	bls.n	8000680 <__udivmoddi4+0x64>
 800066a:	eb1c 0303 	adds.w	r3, ip, r3
 800066e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000672:	f080 811f 	bcs.w	80008b4 <__udivmoddi4+0x298>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 811c 	bls.w	80008b4 <__udivmoddi4+0x298>
 800067c:	3e02      	subs	r6, #2
 800067e:	4463      	add	r3, ip
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0f8 	udiv	r0, r3, r8
 8000688:	fb08 3310 	mls	r3, r8, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 f707 	mul.w	r7, r0, r7
 8000694:	42a7      	cmp	r7, r4
 8000696:	d90a      	bls.n	80006ae <__udivmoddi4+0x92>
 8000698:	eb1c 0404 	adds.w	r4, ip, r4
 800069c:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a0:	f080 810a 	bcs.w	80008b8 <__udivmoddi4+0x29c>
 80006a4:	42a7      	cmp	r7, r4
 80006a6:	f240 8107 	bls.w	80008b8 <__udivmoddi4+0x29c>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b2:	1be4      	subs	r4, r4, r7
 80006b4:	2600      	movs	r6, #0
 80006b6:	b11d      	cbz	r5, 80006c0 <__udivmoddi4+0xa4>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c5 4300 	strd	r4, r3, [r5]
 80006c0:	4631      	mov	r1, r6
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xc2>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	f000 80ef 	beq.w	80008ae <__udivmoddi4+0x292>
 80006d0:	2600      	movs	r6, #0
 80006d2:	e9c5 0100 	strd	r0, r1, [r5]
 80006d6:	4630      	mov	r0, r6
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f683 	clz	r6, r3
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d14a      	bne.n	800077c <__udivmoddi4+0x160>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd4>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80f9 	bhi.w	80008e2 <__udivmoddi4+0x2c6>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	469e      	mov	lr, r3
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa4>
 80006fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa4>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xec>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 8092 	bne.w	8000836 <__udivmoddi4+0x21a>
 8000712:	eba1 010c 	sub.w	r1, r1, ip
 8000716:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071a:	fa1f fe8c 	uxth.w	lr, ip
 800071e:	2601      	movs	r6, #1
 8000720:	0c20      	lsrs	r0, r4, #16
 8000722:	fbb1 f3f7 	udiv	r3, r1, r7
 8000726:	fb07 1113 	mls	r1, r7, r3, r1
 800072a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800072e:	fb0e f003 	mul.w	r0, lr, r3
 8000732:	4288      	cmp	r0, r1
 8000734:	d908      	bls.n	8000748 <__udivmoddi4+0x12c>
 8000736:	eb1c 0101 	adds.w	r1, ip, r1
 800073a:	f103 38ff 	add.w	r8, r3, #4294967295
 800073e:	d202      	bcs.n	8000746 <__udivmoddi4+0x12a>
 8000740:	4288      	cmp	r0, r1
 8000742:	f200 80cb 	bhi.w	80008dc <__udivmoddi4+0x2c0>
 8000746:	4643      	mov	r3, r8
 8000748:	1a09      	subs	r1, r1, r0
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000750:	fb07 1110 	mls	r1, r7, r0, r1
 8000754:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000758:	fb0e fe00 	mul.w	lr, lr, r0
 800075c:	45a6      	cmp	lr, r4
 800075e:	d908      	bls.n	8000772 <__udivmoddi4+0x156>
 8000760:	eb1c 0404 	adds.w	r4, ip, r4
 8000764:	f100 31ff 	add.w	r1, r0, #4294967295
 8000768:	d202      	bcs.n	8000770 <__udivmoddi4+0x154>
 800076a:	45a6      	cmp	lr, r4
 800076c:	f200 80bb 	bhi.w	80008e6 <__udivmoddi4+0x2ca>
 8000770:	4608      	mov	r0, r1
 8000772:	eba4 040e 	sub.w	r4, r4, lr
 8000776:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800077a:	e79c      	b.n	80006b6 <__udivmoddi4+0x9a>
 800077c:	f1c6 0720 	rsb	r7, r6, #32
 8000780:	40b3      	lsls	r3, r6
 8000782:	fa22 fc07 	lsr.w	ip, r2, r7
 8000786:	ea4c 0c03 	orr.w	ip, ip, r3
 800078a:	fa20 f407 	lsr.w	r4, r0, r7
 800078e:	fa01 f306 	lsl.w	r3, r1, r6
 8000792:	431c      	orrs	r4, r3
 8000794:	40f9      	lsrs	r1, r7
 8000796:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079a:	fa00 f306 	lsl.w	r3, r0, r6
 800079e:	fbb1 f8f9 	udiv	r8, r1, r9
 80007a2:	0c20      	lsrs	r0, r4, #16
 80007a4:	fa1f fe8c 	uxth.w	lr, ip
 80007a8:	fb09 1118 	mls	r1, r9, r8, r1
 80007ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b0:	fb08 f00e 	mul.w	r0, r8, lr
 80007b4:	4288      	cmp	r0, r1
 80007b6:	fa02 f206 	lsl.w	r2, r2, r6
 80007ba:	d90b      	bls.n	80007d4 <__udivmoddi4+0x1b8>
 80007bc:	eb1c 0101 	adds.w	r1, ip, r1
 80007c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c4:	f080 8088 	bcs.w	80008d8 <__udivmoddi4+0x2bc>
 80007c8:	4288      	cmp	r0, r1
 80007ca:	f240 8085 	bls.w	80008d8 <__udivmoddi4+0x2bc>
 80007ce:	f1a8 0802 	sub.w	r8, r8, #2
 80007d2:	4461      	add	r1, ip
 80007d4:	1a09      	subs	r1, r1, r0
 80007d6:	b2a4      	uxth	r4, r4
 80007d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80007dc:	fb09 1110 	mls	r1, r9, r0, r1
 80007e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80007e8:	458e      	cmp	lr, r1
 80007ea:	d908      	bls.n	80007fe <__udivmoddi4+0x1e2>
 80007ec:	eb1c 0101 	adds.w	r1, ip, r1
 80007f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f4:	d26c      	bcs.n	80008d0 <__udivmoddi4+0x2b4>
 80007f6:	458e      	cmp	lr, r1
 80007f8:	d96a      	bls.n	80008d0 <__udivmoddi4+0x2b4>
 80007fa:	3802      	subs	r0, #2
 80007fc:	4461      	add	r1, ip
 80007fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000802:	fba0 9402 	umull	r9, r4, r0, r2
 8000806:	eba1 010e 	sub.w	r1, r1, lr
 800080a:	42a1      	cmp	r1, r4
 800080c:	46c8      	mov	r8, r9
 800080e:	46a6      	mov	lr, r4
 8000810:	d356      	bcc.n	80008c0 <__udivmoddi4+0x2a4>
 8000812:	d053      	beq.n	80008bc <__udivmoddi4+0x2a0>
 8000814:	b15d      	cbz	r5, 800082e <__udivmoddi4+0x212>
 8000816:	ebb3 0208 	subs.w	r2, r3, r8
 800081a:	eb61 010e 	sbc.w	r1, r1, lr
 800081e:	fa01 f707 	lsl.w	r7, r1, r7
 8000822:	fa22 f306 	lsr.w	r3, r2, r6
 8000826:	40f1      	lsrs	r1, r6
 8000828:	431f      	orrs	r7, r3
 800082a:	e9c5 7100 	strd	r7, r1, [r5]
 800082e:	2600      	movs	r6, #0
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	f1c2 0320 	rsb	r3, r2, #32
 800083a:	40d8      	lsrs	r0, r3
 800083c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000840:	fa21 f303 	lsr.w	r3, r1, r3
 8000844:	4091      	lsls	r1, r2
 8000846:	4301      	orrs	r1, r0
 8000848:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800084c:	fa1f fe8c 	uxth.w	lr, ip
 8000850:	fbb3 f0f7 	udiv	r0, r3, r7
 8000854:	fb07 3610 	mls	r6, r7, r0, r3
 8000858:	0c0b      	lsrs	r3, r1, #16
 800085a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800085e:	fb00 f60e 	mul.w	r6, r0, lr
 8000862:	429e      	cmp	r6, r3
 8000864:	fa04 f402 	lsl.w	r4, r4, r2
 8000868:	d908      	bls.n	800087c <__udivmoddi4+0x260>
 800086a:	eb1c 0303 	adds.w	r3, ip, r3
 800086e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000872:	d22f      	bcs.n	80008d4 <__udivmoddi4+0x2b8>
 8000874:	429e      	cmp	r6, r3
 8000876:	d92d      	bls.n	80008d4 <__udivmoddi4+0x2b8>
 8000878:	3802      	subs	r0, #2
 800087a:	4463      	add	r3, ip
 800087c:	1b9b      	subs	r3, r3, r6
 800087e:	b289      	uxth	r1, r1
 8000880:	fbb3 f6f7 	udiv	r6, r3, r7
 8000884:	fb07 3316 	mls	r3, r7, r6, r3
 8000888:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088c:	fb06 f30e 	mul.w	r3, r6, lr
 8000890:	428b      	cmp	r3, r1
 8000892:	d908      	bls.n	80008a6 <__udivmoddi4+0x28a>
 8000894:	eb1c 0101 	adds.w	r1, ip, r1
 8000898:	f106 38ff 	add.w	r8, r6, #4294967295
 800089c:	d216      	bcs.n	80008cc <__udivmoddi4+0x2b0>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d914      	bls.n	80008cc <__udivmoddi4+0x2b0>
 80008a2:	3e02      	subs	r6, #2
 80008a4:	4461      	add	r1, ip
 80008a6:	1ac9      	subs	r1, r1, r3
 80008a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008ac:	e738      	b.n	8000720 <__udivmoddi4+0x104>
 80008ae:	462e      	mov	r6, r5
 80008b0:	4628      	mov	r0, r5
 80008b2:	e705      	b.n	80006c0 <__udivmoddi4+0xa4>
 80008b4:	4606      	mov	r6, r0
 80008b6:	e6e3      	b.n	8000680 <__udivmoddi4+0x64>
 80008b8:	4618      	mov	r0, r3
 80008ba:	e6f8      	b.n	80006ae <__udivmoddi4+0x92>
 80008bc:	454b      	cmp	r3, r9
 80008be:	d2a9      	bcs.n	8000814 <__udivmoddi4+0x1f8>
 80008c0:	ebb9 0802 	subs.w	r8, r9, r2
 80008c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008c8:	3801      	subs	r0, #1
 80008ca:	e7a3      	b.n	8000814 <__udivmoddi4+0x1f8>
 80008cc:	4646      	mov	r6, r8
 80008ce:	e7ea      	b.n	80008a6 <__udivmoddi4+0x28a>
 80008d0:	4620      	mov	r0, r4
 80008d2:	e794      	b.n	80007fe <__udivmoddi4+0x1e2>
 80008d4:	4640      	mov	r0, r8
 80008d6:	e7d1      	b.n	800087c <__udivmoddi4+0x260>
 80008d8:	46d0      	mov	r8, sl
 80008da:	e77b      	b.n	80007d4 <__udivmoddi4+0x1b8>
 80008dc:	3b02      	subs	r3, #2
 80008de:	4461      	add	r1, ip
 80008e0:	e732      	b.n	8000748 <__udivmoddi4+0x12c>
 80008e2:	4630      	mov	r0, r6
 80008e4:	e709      	b.n	80006fa <__udivmoddi4+0xde>
 80008e6:	4464      	add	r4, ip
 80008e8:	3802      	subs	r0, #2
 80008ea:	e742      	b.n	8000772 <__udivmoddi4+0x156>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <bmi_read_address>:

uint8_t data;
 uint8_t Acc_Val[6];

void bmi_read_address (uint8_t reg)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	 I2C1_byteRead( DEVICE_ADDR, reg, &data);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <bmi_read_address+0x20>)
 80008fe:	4619      	mov	r1, r3
 8000900:	2069      	movs	r0, #105	; 0x69
 8000902:	f000 f8ed 	bl	8000ae0 <I2C1_byteRead>

}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000030 	.word	0x20000030

08000914 <bmi_write>:

void bmi_write (uint8_t reg, char value)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0] = value;
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	733b      	strb	r3, [r7, #12]

	I2C1_burstWrite( DEVICE_ADDR, reg,1, data) ;
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	79f9      	ldrb	r1, [r7, #7]
 800092e:	2201      	movs	r2, #1
 8000930:	2069      	movs	r0, #105	; 0x69
 8000932:	f000 f9e5 	bl	8000d00 <I2C1_burstWrite>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <bmi_read_values>:

void bmi_read_values (uint8_t reg)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	I2C1_burstRead(DEVICE_ADDR, reg, 6,(char *)Acc_Val);
 800094a:	79f9      	ldrb	r1, [r7, #7]
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <bmi_read_values+0x20>)
 800094e:	2206      	movs	r2, #6
 8000950:	2069      	movs	r0, #105	; 0x69
 8000952:	f000 f939 	bl	8000bc8 <I2C1_burstRead>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000034 	.word	0x20000034

08000964 <bmi_init>:


void bmi_init (void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	I2C1_init();
 8000968:	f000 f81a 	bl	80009a0 <I2C1_init>

	/*Read the CHIP_ID, this should return 0xD1*/
	bmi_read_address(CHIP_ID);
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ffbf 	bl	80008f0 <bmi_read_address>

	/*power mode control register to enable the acc*/
	bmi_write (CMD_R, CMD_CODE);
 8000972:	2111      	movs	r1, #17
 8000974:	207e      	movs	r0, #126	; 0x7e
 8000976:	f7ff ffcd 	bl	8000914 <bmi_write>

	/*To set the freq and bandwidth */
	bmi_write (ACC_CONF_R,ACC_CONF_VALUE);
 800097a:	2105      	movs	r1, #5
 800097c:	2040      	movs	r0, #64	; 0x40
 800097e:	f7ff ffc9 	bl	8000914 <bmi_write>

	/*Set data format range to +-8g*/
	bmi_write (ACC_RANGE_R, EIGHT_G);
 8000982:	2108      	movs	r1, #8
 8000984:	2041      	movs	r0, #65	; 0x41
 8000986:	f7ff ffc5 	bl	8000914 <bmi_write>

	bmi_write(INT_EN_R, INT_EN_VALUE);
 800098a:	2101      	movs	r1, #1
 800098c:	2050      	movs	r0, #80	; 0x50
 800098e:	f7ff ffc1 	bl	8000914 <bmi_write>

	bmi_write(INT_MAP_R, INT_MAP_VALUE);
 8000992:	2101      	movs	r1, #1
 8000994:	2056      	movs	r0, #86	; 0x56
 8000996:	f7ff ffbd 	bl	8000914 <bmi_write>





}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <I2C1_init>:
// PB6 ---- SCL
// PB7 ----- SDA


void I2C1_init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

	 RCC->AHB1ENR |=GPIOBEN;
 80009a4:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <I2C1_init+0x134>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <I2C1_init+0x134>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PB6 and PB7 mode to alternate function
	GPIOB->MODER &=~(1U<<12);
 80009b0:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <I2C1_init+0x138>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <I2C1_init+0x138>)
 80009b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<13);
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <I2C1_init+0x138>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <I2C1_init+0x138>)
 80009c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~(1U<<14);
 80009c8:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <I2C1_init+0x138>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a42      	ldr	r2, [pc, #264]	; (8000ad8 <I2C1_init+0x138>)
 80009ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<15);
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <I2C1_init+0x138>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a3f      	ldr	r2, [pc, #252]	; (8000ad8 <I2C1_init+0x138>)
 80009da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009de:	6013      	str	r3, [r2, #0]

	//Set PB6 and PB7 output type to  open drain
	GPIOB->OTYPER |=(1U<<6);
 80009e0:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <I2C1_init+0x138>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a3c      	ldr	r2, [pc, #240]	; (8000ad8 <I2C1_init+0x138>)
 80009e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ea:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |=(1U<<7);
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <I2C1_init+0x138>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <I2C1_init+0x138>)
 80009f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f6:	6053      	str	r3, [r2, #4]

	//Pull-up/down setup
	GPIOB->PUPDR &=~(1U<<12);
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <I2C1_init+0x138>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <I2C1_init+0x138>)
 80009fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a02:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<13);
 8000a04:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <I2C1_init+0x138>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <I2C1_init+0x138>)
 8000a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a0e:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &=~(1U<<14);
 8000a10:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <I2C1_init+0x138>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <I2C1_init+0x138>)
 8000a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a1a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<15);
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <I2C1_init+0x138>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <I2C1_init+0x138>)
 8000a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a26:	60d3      	str	r3, [r2, #12]

	//Set PB6 and PB7 alternate function type to I2C (AF4)
	GPIOB->AFR[0] &=~(1U<<24);
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <I2C1_init+0x138>)
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <I2C1_init+0x138>)
 8000a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a32:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &=~(1U<<25);
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <I2C1_init+0x138>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <I2C1_init+0x138>)
 8000a3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=(1U<<26);
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <I2C1_init+0x138>)
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <I2C1_init+0x138>)
 8000a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a4a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &=~(1U<<27);
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <I2C1_init+0x138>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <I2C1_init+0x138>)
 8000a52:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a56:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &=~(1U<<28);
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <I2C1_init+0x138>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <I2C1_init+0x138>)
 8000a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a62:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &=~(1U<<29);
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <I2C1_init+0x138>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <I2C1_init+0x138>)
 8000a6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a6e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=(1U<<30);
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <I2C1_init+0x138>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <I2C1_init+0x138>)
 8000a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a7a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &=~(1U<<31);
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <I2C1_init+0x138>)
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <I2C1_init+0x138>)
 8000a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	6213      	str	r3, [r2, #32]


	//Enabling clock for APB1
	 RCC->APB1ENR |= I2C1EN;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <I2C1_init+0x134>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <I2C1_init+0x134>)
 8000a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40

	//Enter reset/not reset mode
	I2C1->CR1 |= (1U<<15);
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <I2C1_init+0x13c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <I2C1_init+0x13c>)
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~(1U<<15);
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <I2C1_init+0x13c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <I2C1_init+0x13c>)
 8000aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aaa:	6013      	str	r3, [r2, #0]

	//Set Peripheral clock frequency
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <I2C1_init+0x13c>)
 8000aae:	2210      	movs	r2, #16
 8000ab0:	605a      	str	r2, [r3, #4]

	//Set I2C to standard mode, 100kHz clock
	I2C1->CCR = I2C_100KHZ;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <I2C1_init+0x13c>)
 8000ab4:	2250      	movs	r2, #80	; 0x50
 8000ab6:	61da      	str	r2, [r3, #28]

	//Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <I2C1_init+0x13c>)
 8000aba:	2211      	movs	r2, #17
 8000abc:	621a      	str	r2, [r3, #32]

	//Enable I2C1 module
	I2C1->CR1 |= CR1_PE;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <I2C1_init+0x13c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <I2C1_init+0x13c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]


}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40005400 	.word	0x40005400

08000ae0 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	603a      	str	r2, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	460b      	mov	r3, r1
 8000aee:	71bb      	strb	r3, [r7, #6]

      volatile int tmp;

	  // Wait until bus not busy -
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8000af0:	bf00      	nop
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f9      	bne.n	8000af2 <I2C1_byteRead+0x12>

	  // Generate start -
	  I2C1->CR1 |= CR1_START;
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6013      	str	r3, [r2, #0]

	  // Wait until start flag is set -
	  while (!(I2C1->SR1 & (SR1_SB))){}
 8000b0a:	bf00      	nop
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f9      	beq.n	8000b0c <I2C1_byteRead+0x2c>

	  // Transmit slave address + Write -
	   I2C1->DR = saddr << 1;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	005a      	lsls	r2, r3, #1
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b1e:	611a      	str	r2, [r3, #16]

	  // Wait until addr flag is set -
	   while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000b20:	bf00      	nop
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f9      	beq.n	8000b22 <I2C1_byteRead+0x42>

	  // Clear addr flag -
	  tmp = I2C1->SR2;
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	60fb      	str	r3, [r7, #12]

      // Send memory address -
      I2C1->DR = maddr;
 8000b34:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	6113      	str	r3, [r2, #16]

      //Wait until transmitter empty -
     while (!(I2C1->SR1 & SR1_TXE)){}
 8000b3a:	bf00      	nop
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f9      	beq.n	8000b3c <I2C1_byteRead+0x5c>

     //Generate restart -
      I2C1->CR1 |= CR1_START;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]

      // Wait until start flag is set -
     while (!(I2C1->SR1 & SR1_SB)){}
 8000b54:	bf00      	nop
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f9      	beq.n	8000b56 <I2C1_byteRead+0x76>

     // Transmit slave address + Read -
     I2C1->DR = saddr << 1 | 1;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	f043 0201 	orr.w	r2, r3, #1
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b6c:	611a      	str	r2, [r3, #16]

     // Wait until addr flag is set -
    while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000b6e:	bf00      	nop
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0f9      	beq.n	8000b70 <I2C1_byteRead+0x90>

    // Disable Acknowledge -
    I2C1->CR1 &= ~CR1_ACK;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]

    // Clear addr flag -
    tmp = I2C1->SR2;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	60fb      	str	r3, [r7, #12]

    // Generate stop after data received -
     I2C1->CR1 |= CR1_STOP;
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b98:	6013      	str	r3, [r2, #0]

    // Wait until RXNE flag is set -
    while (!(I2C1->SR1 & SR1_RXNE)){}
 8000b9a:	bf00      	nop
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f9      	beq.n	8000b9c <I2C1_byteRead+0xbc>

    // Read data from DR -
      *data++ = I2C1->DR;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <I2C1_byteRead+0xe4>)
 8000baa:	6919      	ldr	r1, [r3, #16]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400

08000bc8 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60ba      	str	r2, [r7, #8]
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	73bb      	strb	r3, [r7, #14]

	volatile int tmp;

	 // Wait until bus not busy -
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8000bda:	bf00      	nop
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <I2C1_burstRead+0x134>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f9      	bne.n	8000bdc <I2C1_burstRead+0x14>

      // Generate start -
    I2C1->CR1 |= CR1_START;
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <I2C1_burstRead+0x134>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a43      	ldr	r2, [pc, #268]	; (8000cfc <I2C1_burstRead+0x134>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]

    // Wait until start flag is set -
     while (!(I2C1->SR1 & SR1_SB)){}
 8000bf4:	bf00      	nop
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <I2C1_burstRead+0x134>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <I2C1_burstRead+0x2e>

     // Transmit slave address + Write -
     I2C1->DR = saddr << 1;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	005a      	lsls	r2, r3, #1
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c08:	611a      	str	r2, [r3, #16]

     // Wait until addr flag is set -
    while (!(I2C1->SR1 & SR1_ADDR)){}
 8000c0a:	bf00      	nop
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f9      	beq.n	8000c0c <I2C1_burstRead+0x44>

    // Clear addr flag -
     tmp = I2C1->SR2;
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	617b      	str	r3, [r7, #20]

     // Wait until transmitter empty -
    while (!(I2C1->SR1 & SR1_TXE)){}
 8000c1e:	bf00      	nop
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f9      	beq.n	8000c20 <I2C1_burstRead+0x58>

    //Send memory address -
    I2C1->DR = maddr;
 8000c2c:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	6113      	str	r3, [r2, #16]

    //Wait until transmitter empty -
    while (!(I2C1->SR1 & SR1_TXE)){}
 8000c32:	bf00      	nop
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f9      	beq.n	8000c34 <I2C1_burstRead+0x6c>

    //Generate restart -
    I2C1->CR1 |= CR1_START;
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]

    // Wait until start flag is set -
    while (!(I2C1->SR1 & SR1_SB)){}
 8000c4c:	bf00      	nop
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f9      	beq.n	8000c4e <I2C1_burstRead+0x86>

    // Transmit slave address + Read -
    I2C1->DR = saddr << 1 | 1;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c64:	611a      	str	r2, [r3, #16]

    // Wait until addr flag is set -
    while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000c66:	bf00      	nop
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f9      	beq.n	8000c68 <I2C1_burstRead+0xa0>

    // Clear addr flag -
    tmp = I2C1->SR2;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	617b      	str	r3, [r7, #20]

    // Enable Acknowledge -
      I2C1->CR1 |=  CR1_ACK;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c84:	6013      	str	r3, [r2, #0]

    while(n > 0U)
 8000c86:	e02e      	b.n	8000ce6 <I2C1_burstRead+0x11e>
    {
    	//if one byte-
    	if(n == 1U)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d11a      	bne.n	8000cc4 <I2C1_burstRead+0xfc>
    	{
    		// Disable Acknowledge -
    	    I2C1->CR1 &= ~CR1_ACK;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c98:	6013      	str	r3, [r2, #0]

    	    // Generate Stop -
    	    I2C1->CR1 |= CR1_STOP;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <I2C1_burstRead+0x134>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <I2C1_burstRead+0x134>)
 8000ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca4:	6013      	str	r3, [r2, #0]

 			// Wait for RXNE flag set -
            while (!(I2C1->SR1 & SR1_RXNE)){}
 8000ca6:	bf00      	nop
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <I2C1_burstRead+0x134>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <I2C1_burstRead+0xe0>

            // Read data from DR -
            *data++ = I2C1->DR;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <I2C1_burstRead+0x134>)
 8000cb6:	6919      	ldr	r1, [r3, #16]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
            break;
 8000cc2:	e014      	b.n	8000cee <I2C1_burstRead+0x126>
    	}
    	else
    	{
       	 // Wait until RXNE flag is set -
           while (!(I2C1->SR1 & SR1_RXNE)){}
 8000cc4:	bf00      	nop
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <I2C1_burstRead+0x134>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f9      	beq.n	8000cc6 <I2C1_burstRead+0xfe>

           // Read data from DR -
           (*data++) = I2C1->DR;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <I2C1_burstRead+0x134>)
 8000cd4:	6919      	ldr	r1, [r3, #16]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]

           n--;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
    while(n > 0U)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1cd      	bne.n	8000c88 <I2C1_burstRead+0xc0>
    	}
    }

}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40005400 	.word	0x40005400

08000d00 <I2C1_burstWrite>:


void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	73bb      	strb	r3, [r7, #14]

	volatile int tmp;

	 // Wait until bus not busy -
	 while (I2C1->SR2 & (SR2_BUSY)){}
 8000d12:	bf00      	nop
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f9      	bne.n	8000d14 <I2C1_burstWrite+0x14>

     // Generate start -
    I2C1->CR1 |= CR1_START;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]

    // Wait until start flag is set -
    while (!(I2C1->SR1 & (SR1_SB))){}
 8000d2c:	bf00      	nop
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <I2C1_burstWrite+0x2e>

    // Transmit slave address -
    I2C1->DR = saddr << 1;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	005a      	lsls	r2, r3, #1
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d40:	611a      	str	r2, [r3, #16]

    // Wait until addr flag is set -
    while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000d42:	bf00      	nop
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f9      	beq.n	8000d44 <I2C1_burstWrite+0x44>

    // Clear addr flag -
    tmp = I2C1->SR2;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	613b      	str	r3, [r7, #16]

    // Wait until data register empty -
    while (!(I2C1->SR1 & (SR1_TXE))){}
 8000d56:	bf00      	nop
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f9      	beq.n	8000d58 <I2C1_burstWrite+0x58>

    // Send memory address -
    I2C1->DR = maddr;
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	6113      	str	r3, [r2, #16]

    for (int i = 0; i < n; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e00f      	b.n	8000d90 <I2C1_burstWrite+0x90>

     // Wait until data register empty -
        while (!(I2C1->SR1 & (SR1_TXE))){}
 8000d70:	bf00      	nop
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f9      	beq.n	8000d72 <I2C1_burstWrite+0x72>

      // Transmit memory address -
      I2C1->DR = *data++;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d88:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < n; i++) {
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbeb      	blt.n	8000d70 <I2C1_burstWrite+0x70>
    }

    // Wait until transfer finished -
    while (!(I2C1->SR1 & (SR1_BTF))){}
 8000d98:	bf00      	nop
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <I2C1_burstWrite+0x9a>

    // Generate stop -
   I2C1->CR1 |= CR1_STOP;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <I2C1_burstWrite+0xc0>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40005400 	.word	0x40005400

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t xAccelerometerTaskHandle = NULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
	TaskHandle_t xUARTTaskHandle = NULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fbf3 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f82d 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f8bf 	bl	8000f5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dde:	f000 f893 	bl	8000f08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
     // Create the queue to hold accelerometer data
     xQueue = xQueueCreate(QUEUE_LENGTH, ITEM_SIZE);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2108      	movs	r1, #8
 8000de6:	200a      	movs	r0, #10
 8000de8:	f002 fb0b 	bl	8003402 <xQueueGenericCreate>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <main+0x5c>)
 8000df0:	6013      	str	r3, [r2, #0]

      // Create the accelerometer task
      xTaskCreate(vAccelerometerTask, "Accelerometer", 200, NULL, 2, &xAccelerometerTaskHandle);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	2302      	movs	r3, #2
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	22c8      	movs	r2, #200	; 0xc8
 8000dfe:	4909      	ldr	r1, [pc, #36]	; (8000e24 <main+0x60>)
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <main+0x64>)
 8000e02:	f002 fe7b 	bl	8003afc <xTaskCreate>

      // Create the UART task
      xTaskCreate(vUARTTask, "UART", 200, NULL, 1, &xUARTTaskHandle);
 8000e06:	463b      	mov	r3, r7
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	22c8      	movs	r2, #200	; 0xc8
 8000e12:	4906      	ldr	r1, [pc, #24]	; (8000e2c <main+0x68>)
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <main+0x6c>)
 8000e16:	f002 fe71 	bl	8003afc <xTaskCreate>

      // Start the FreeRTOS scheduler
      vTaskStartScheduler();
 8000e1a:	f002 ffc5 	bl	8003da8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <main+0x5a>
 8000e20:	20000080 	.word	0x20000080
 8000e24:	08006694 	.word	0x08006694
 8000e28:	08001219 	.word	0x08001219
 8000e2c:	080066a4 	.word	0x080066a4
 8000e30:	080012b5 	.word	0x080012b5

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fc12 	bl	800666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea8:	23a8      	movs	r3, #168	; 0xa8
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fe59 	bl	8001b70 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec4:	f000 fa2c 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 f8ba 	bl	8002060 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ef2:	f000 fa15 	bl	8001320 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART2_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f30:	220c      	movs	r2, #12
 8000f32:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f42:	f001 fd8d 	bl	8002a60 <HAL_UART_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000f4c:	f000 f9e8 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4ba2      	ldr	r3, [pc, #648]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4aa1      	ldr	r2, [pc, #644]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b9f      	ldr	r3, [pc, #636]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b9b      	ldr	r3, [pc, #620]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a9a      	ldr	r2, [pc, #616]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b98      	ldr	r3, [pc, #608]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b94      	ldr	r3, [pc, #592]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a93      	ldr	r2, [pc, #588]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b91      	ldr	r3, [pc, #580]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b8d      	ldr	r3, [pc, #564]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a8c      	ldr	r2, [pc, #560]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b8a      	ldr	r3, [pc, #552]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b86      	ldr	r3, [pc, #536]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a85      	ldr	r2, [pc, #532]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b83      	ldr	r3, [pc, #524]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b7f      	ldr	r3, [pc, #508]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a7e      	ldr	r2, [pc, #504]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <MX_GPIO_Init+0x2a4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	4879      	ldr	r0, [pc, #484]	; (8001204 <MX_GPIO_Init+0x2a8>)
 8001020:	f000 fd8c 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2101      	movs	r1, #1
 8001028:	4877      	ldr	r0, [pc, #476]	; (8001208 <MX_GPIO_Init+0x2ac>)
 800102a:	f000 fd87 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800102e:	2200      	movs	r2, #0
 8001030:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001034:	4875      	ldr	r0, [pc, #468]	; (800120c <MX_GPIO_Init+0x2b0>)
 8001036:	f000 fd81 	bl	8001b3c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	486c      	ldr	r0, [pc, #432]	; (8001204 <MX_GPIO_Init+0x2a8>)
 8001052:	f000 fbd7 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4866      	ldr	r0, [pc, #408]	; (8001208 <MX_GPIO_Init+0x2ac>)
 800106e:	f000 fbc9 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001072:	2308      	movs	r3, #8
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001082:	2305      	movs	r3, #5
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	485e      	ldr	r0, [pc, #376]	; (8001208 <MX_GPIO_Init+0x2ac>)
 800108e:	f000 fbb9 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	485a      	ldr	r0, [pc, #360]	; (8001210 <MX_GPIO_Init+0x2b4>)
 80010a8:	f000 fbac 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ac:	2310      	movs	r3, #16
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4852      	ldr	r0, [pc, #328]	; (8001210 <MX_GPIO_Init+0x2b4>)
 80010c8:	f000 fb9c 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010cc:	23e0      	movs	r3, #224	; 0xe0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010dc:	2305      	movs	r3, #5
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	484a      	ldr	r0, [pc, #296]	; (8001210 <MX_GPIO_Init+0x2b4>)
 80010e8:	f000 fb8c 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010ec:	2304      	movs	r3, #4
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4845      	ldr	r0, [pc, #276]	; (8001214 <MX_GPIO_Init+0x2b8>)
 8001100:	f000 fb80 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001116:	2305      	movs	r3, #5
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	483c      	ldr	r0, [pc, #240]	; (8001214 <MX_GPIO_Init+0x2b8>)
 8001122:	f000 fb6f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001126:	f24f 0310 	movw	r3, #61456	; 0xf010
 800112a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4833      	ldr	r0, [pc, #204]	; (800120c <MX_GPIO_Init+0x2b0>)
 8001140:	f000 fb60 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001144:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001156:	2306      	movs	r3, #6
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <MX_GPIO_Init+0x2ac>)
 8001162:	f000 fb4f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <MX_GPIO_Init+0x2b4>)
 800117c:	f000 fb42 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001180:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001192:	230a      	movs	r3, #10
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <MX_GPIO_Init+0x2b4>)
 800119e:	f000 fb31 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011a2:	2320      	movs	r3, #32
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <MX_GPIO_Init+0x2b0>)
 80011b6:	f000 fb25 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c0:	2312      	movs	r3, #18
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <MX_GPIO_Init+0x2b8>)
 80011d8:	f000 fb14 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_GPIO_Init+0x2a8>)
 80011f2:	f000 fb07 	bl	8001804 <HAL_GPIO_Init>

}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	; 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40021000 	.word	0x40021000
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400

08001218 <vAccelerometerTask>:

/* USER CODE BEGIN 4 */

static void vAccelerometerTask(void *pvParameters)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    int16_t x, y, z;
    extern uint8_t Acc_Val[6];

    bmi_init();
 8001220:	f7ff fba0 	bl	8000964 <bmi_init>

    while (1)
    {
        bmi_read_values(DATA_START_ADDR);
 8001224:	2012      	movs	r0, #18
 8001226:	f7ff fb8b 	bl	8000940 <bmi_read_values>

        x = ((Acc_Val[1] << 8) | Acc_Val[0]);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <vAccelerometerTask+0x94>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <vAccelerometerTask+0x94>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	84fb      	strh	r3, [r7, #38]	; 0x26
        y = ((Acc_Val[3] << 8) | Acc_Val[2]);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <vAccelerometerTask+0x94>)
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <vAccelerometerTask+0x94>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	84bb      	strh	r3, [r7, #36]	; 0x24
        z = ((Acc_Val[5] << 8) | Acc_Val[4]);
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <vAccelerometerTask+0x94>)
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <vAccelerometerTask+0x94>)
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	847b      	strh	r3, [r7, #34]	; 0x22


        // Send data to the queue
        double accelData[3] = {x, y, z};
 8001260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f957 	bl	8000518 <__aeabi_i2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001272:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f94e 	bl	8000518 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001284:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f945 	bl	8000518 <__aeabi_i2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	e9c7 2306 	strd	r2, r3, [r7, #24]
        xQueueSend(xQueue, (void *)accelData, portMAX_DELAY);
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <vAccelerometerTask+0x98>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	f107 0108 	add.w	r1, r7, #8
 800129e:	2300      	movs	r3, #0
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	f002 f936 	bl	8003514 <xQueueGenericSend>
    {
 80012a8:	e7bc      	b.n	8001224 <vAccelerometerTask+0xc>
 80012aa:	bf00      	nop
 80012ac:	20000034 	.word	0x20000034
 80012b0:	20000080 	.word	0x20000080

080012b4 <vUARTTask>:
    }
}


static void vUARTTask(void *pvParameters)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    double accelData[3];

    while (1)
    {
        // Receive data from the queue
        if (xQueueReceive(xQueue, &accelData, portMAX_DELAY) == pdPASS)
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <vUARTTask+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fa19 	bl	8003700 <xQueueReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1f3      	bne.n	80012bc <vUARTTask+0x8>
            // Convert data to string
            char str[50];
           // sprintf(str, "x:%f, y:%f, z:%f\r\n", accelData[0], accelData[1], accelData[2]);

            // Send data to UART
            HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ffc3 	bl	8000264 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <vUARTTask+0x44>)
 80012ec:	f001 fc05 	bl	8002afa <HAL_UART_Transmit>
        if (xQueueReceive(xQueue, &accelData, portMAX_DELAY) == pdPASS)
 80012f0:	e7e4      	b.n	80012bc <vUARTTask+0x8>
 80012f2:	bf00      	nop
 80012f4:	20000080 	.word	0x20000080
 80012f8:	2000003c 	.word	0x2000003c

080012fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130e:	f000 f977 	bl	8001600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40001000 	.word	0x40001000

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12b      	bne.n	80013f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e6:	2307      	movs	r3, #7
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013f2:	f000 fa07 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40004400 	.word	0x40004400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_InitTick+0xe4>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <HAL_InitTick+0xe4>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_InitTick+0xe4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 0210 	add.w	r2, r7, #16
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f82c 	bl	80024a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001452:	f000 fffd 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8001456:	6378      	str	r0, [r7, #52]	; 0x34
 8001458:	e004      	b.n	8001464 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145a:	f000 fff9 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_InitTick+0xe8>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	3b01      	subs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_InitTick+0xec>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_InitTick+0xf0>)
 8001476:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_InitTick+0xec>)
 800147a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_InitTick+0xec>)
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_InitTick+0xec>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_InitTick+0xec>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_InitTick+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001498:	4817      	ldr	r0, [pc, #92]	; (80014f8 <HAL_InitTick+0xec>)
 800149a:	f001 f833 	bl	8002504 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11b      	bne.n	80014e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014ac:	4812      	ldr	r0, [pc, #72]	; (80014f8 <HAL_InitTick+0xec>)
 80014ae:	f001 f883 	bl	80025b8 <HAL_TIM_Base_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c0:	2036      	movs	r0, #54	; 0x36
 80014c2:	f000 f991 	bl	80017e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d808      	bhi.n	80014de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	2036      	movs	r0, #54	; 0x36
 80014d2:	f000 f96d 	bl	80017b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_InitTick+0xf4>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e002      	b.n	80014e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	20000084 	.word	0x20000084
 80014fc:	40001000 	.word	0x40001000
 8001500:	20000004 	.word	0x20000004

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM6_DAC_IRQHandler+0x10>)
 8001536:	f001 f8af 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000084 	.word	0x20000084

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001592:	f7ff ffd7 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f005 f827 	bl	80065e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fc13 	bl	8000dc4 <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015ac:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 80015b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80015b4:	20019874 	.word	0x20019874

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f8d8 	bl	800179a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ff0e 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fe9c 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	200000cc 	.word	0x200000cc

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000cc 	.word	0x200000cc

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff4c 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c2:	f7ff ff61 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6978      	ldr	r0, [r7, #20]
 80017ce:	f7ff ffb1 	bl	8001734 <NVIC_EncodePriority>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff80 	bl	80016e0 <__NVIC_SetPriority>
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff54 	bl	80016a4 <__NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e16b      	b.n	8001af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 815a 	bne.w	8001af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80b4 	beq.w	8001af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a5f      	ldr	r2, [pc, #380]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a5b      	ldr	r2, [pc, #364]	; (8001b14 <HAL_GPIO_Init+0x310>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_GPIO_Init+0x314>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d02b      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <HAL_GPIO_Init+0x318>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d025      	beq.n	8001a26 <HAL_GPIO_Init+0x222>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_GPIO_Init+0x31c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01f      	beq.n	8001a22 <HAL_GPIO_Init+0x21e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <HAL_GPIO_Init+0x320>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d019      	beq.n	8001a1e <HAL_GPIO_Init+0x21a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <HAL_GPIO_Init+0x324>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0x216>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x328>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00d      	beq.n	8001a16 <HAL_GPIO_Init+0x212>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_GPIO_Init+0x32c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_GPIO_Init+0x20a>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00e      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a0e:	2308      	movs	r3, #8
 8001a10:	e00c      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00a      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a16:	2305      	movs	r3, #5
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3c:	4935      	ldr	r1, [pc, #212]	; (8001b14 <HAL_GPIO_Init+0x310>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f ae90 	bls.w	8001820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021c00 	.word	0x40021c00
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e267      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b85      	ldr	r3, [pc, #532]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b7e      	ldr	r3, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e242      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a75      	ldr	r2, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b70      	ldr	r3, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6f      	ldr	r2, [pc, #444]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6c      	ldr	r2, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b69      	ldr	r3, [pc, #420]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a68      	ldr	r2, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fcfe 	bl	8001628 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fcfa 	bl	8001628 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e207      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fcea 	bl	8001628 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fce6 	bl	8001628 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1f3      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c7      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x244>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fc9f 	bl	8001628 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fc9b 	bl	8001628 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a8      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4925      	ldr	r1, [pc, #148]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x244>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fc7e 	bl	8001628 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fc7a 	bl	8001628 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e187      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d036      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x248>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fc5e 	bl	8001628 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc5a 	bl	8001628 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e167      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
 8001d8e:	e01b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x248>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fc47 	bl	8001628 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e00e      	b.n	8001dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fc43 	bl	8001628 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d907      	bls.n	8001dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e150      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
 8001db0:	40023800 	.word	0x40023800
 8001db4:	42470000 	.word	0x42470000
 8001db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ea      	bne.n	8001d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8097 	beq.w	8001f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dda:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a7c      	ldr	r2, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e06:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a73      	ldr	r2, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fc03 	bl	8001628 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7ff fbff 	bl	8001628 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e10c      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x474>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2ea>
 8001e4c:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x324>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x30c>
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a5e      	ldr	r2, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5b      	ldr	r2, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x324>
 8001e7c:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a54      	ldr	r2, [pc, #336]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 0304 	bic.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fbc4 	bl	8001628 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fbc0 	bl	8001628 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0cb      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	4b49      	ldr	r3, [pc, #292]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ee      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x334>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fbae 	bl	8001628 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fbaa 	bl	8001628 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0b5      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ee      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a1 	beq.w	8002050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d05c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d141      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb7e 	bl	8001628 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fb7a 	bl	8001628 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e087      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fb53 	bl	8001628 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff fb4f 	bl	8001628 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e05c      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x416>
 8001fa4:	e054      	b.n	8002050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x478>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb3c 	bl	8001628 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fb38 	bl	8001628 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e045      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x444>
 8001fd2:	e03d      	b.n	8002050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e038      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d028      	beq.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d121      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d11a      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	3b01      	subs	r3, #1
 8002036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff fa6a 	bl	8001628 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff fa66 	bl	8001628 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f900 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08006724 	.word	0x08006724
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002230:	b094      	sub	sp, #80	; 0x50
 8002232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800223c:	2300      	movs	r3, #0
 800223e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002244:	4b79      	ldr	r3, [pc, #484]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d00d      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x40>
 8002250:	2b08      	cmp	r3, #8
 8002252:	f200 80e1 	bhi.w	8002418 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x34>
 800225a:	2b04      	cmp	r3, #4
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x3a>
 800225e:	e0db      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b73      	ldr	r3, [pc, #460]	; (8002430 <HAL_RCC_GetSysClockFreq+0x204>)
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002264:	e0db      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_GetSysClockFreq+0x208>)
 8002268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800226a:	e0d8      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4b6f      	ldr	r3, [pc, #444]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b6d      	ldr	r3, [pc, #436]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
 800228c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800229e:	4622      	mov	r2, r4
 80022a0:	462b      	mov	r3, r5
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4621      	mov	r1, r4
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	6139      	str	r1, [r7, #16]
 80022bc:	4629      	mov	r1, r5
 80022be:	eb63 0301 	sbc.w	r3, r3, r1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d0:	4659      	mov	r1, fp
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	4651      	mov	r1, sl
 80022d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022da:	4651      	mov	r1, sl
 80022dc:	018a      	lsls	r2, r1, #6
 80022de:	4651      	mov	r1, sl
 80022e0:	ebb2 0801 	subs.w	r8, r2, r1
 80022e4:	4659      	mov	r1, fp
 80022e6:	eb63 0901 	sbc.w	r9, r3, r1
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fe:	4690      	mov	r8, r2
 8002300:	4699      	mov	r9, r3
 8002302:	4623      	mov	r3, r4
 8002304:	eb18 0303 	adds.w	r3, r8, r3
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	462b      	mov	r3, r5
 800230c:	eb49 0303 	adc.w	r3, r9, r3
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800231e:	4629      	mov	r1, r5
 8002320:	024b      	lsls	r3, r1, #9
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002328:	4621      	mov	r1, r4
 800232a:	024a      	lsls	r2, r1, #9
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
 8002336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002338:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800233c:	f7fe f956 	bl	80005ec <__aeabi_uldivmod>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4613      	mov	r3, r2
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002348:	e058      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	2200      	movs	r2, #0
 8002352:	4618      	mov	r0, r3
 8002354:	4611      	mov	r1, r2
 8002356:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	0159      	lsls	r1, r3, #5
 8002372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002376:	0150      	lsls	r0, r2, #5
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4641      	mov	r1, r8
 800237e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002382:	4649      	mov	r1, r9
 8002384:	eb63 0b01 	sbc.w	fp, r3, r1
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002394:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002398:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800239c:	ebb2 040a 	subs.w	r4, r2, sl
 80023a0:	eb63 050b 	sbc.w	r5, r3, fp
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	00eb      	lsls	r3, r5, #3
 80023ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023b2:	00e2      	lsls	r2, r4, #3
 80023b4:	4614      	mov	r4, r2
 80023b6:	461d      	mov	r5, r3
 80023b8:	4643      	mov	r3, r8
 80023ba:	18e3      	adds	r3, r4, r3
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	464b      	mov	r3, r9
 80023c0:	eb45 0303 	adc.w	r3, r5, r3
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023d2:	4629      	mov	r1, r5
 80023d4:	028b      	lsls	r3, r1, #10
 80023d6:	4621      	mov	r1, r4
 80023d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023dc:	4621      	mov	r1, r4
 80023de:	028a      	lsls	r2, r1, #10
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e6:	2200      	movs	r2, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	61fa      	str	r2, [r7, #28]
 80023ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f0:	f7fe f8fc 	bl	80005ec <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4613      	mov	r3, r2
 80023fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	3301      	adds	r3, #1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800240c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002416:	e002      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetSysClockFreq+0x204>)
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002420:	4618      	mov	r0, r3
 8002422:	3750      	adds	r7, #80	; 0x50
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	00f42400 	.word	0x00f42400
 8002434:	007a1200 	.word	0x007a1200

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_RCC_GetHCLKFreq+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002454:	f7ff fff0 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0a9b      	lsrs	r3, r3, #10
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	08006734 	.word	0x08006734

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800247c:	f7ff ffdc 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0b5b      	lsrs	r3, r3, #13
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	08006734 	.word	0x08006734

080024a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	220f      	movs	r2, #15
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCC_GetClockConfig+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f839 	bl	80025a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 f9d8 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d001      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e04e      	b.n	800266e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_TIM_Base_Start_IT+0xc4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d022      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d01d      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_TIM_Base_Start_IT+0xc8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d018      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_TIM_Base_Start_IT+0xcc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_TIM_Base_Start_IT+0xd0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00e      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_TIM_Base_Start_IT+0xd4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_TIM_Base_Start_IT+0xd8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x80>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_TIM_Base_Start_IT+0xdc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d010      	beq.n	800266c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265a:	e007      	b.n	800266c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	40010400 	.word	0x40010400
 8002690:	40014000 	.word	0x40014000
 8002694:	40001800 	.word	0x40001800

08002698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0202 	mvn.w	r2, #2
 80026c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8ee 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8e0 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8f1 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0204 	mvn.w	r2, #4
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c4 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8b6 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8c7 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0208 	mvn.w	r2, #8
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f89a 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f88c 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f89d 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f870 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f862 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f873 	bl	80028d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0201 	mvn.w	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fd70 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f902 	bl	8002a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f838 	bl	80028e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0220 	mvn.w	r2, #32
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8cc 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <TIM_Base_SetConfig+0x114>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d00f      	beq.n	8002938 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <TIM_Base_SetConfig+0x118>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00b      	beq.n	8002938 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <TIM_Base_SetConfig+0x11c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <TIM_Base_SetConfig+0x120>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3a      	ldr	r2, [pc, #232]	; (8002a1c <TIM_Base_SetConfig+0x124>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d108      	bne.n	800294a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <TIM_Base_SetConfig+0x114>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02b      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d027      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <TIM_Base_SetConfig+0x118>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d023      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <TIM_Base_SetConfig+0x11c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <TIM_Base_SetConfig+0x120>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01b      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <TIM_Base_SetConfig+0x124>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d017      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <TIM_Base_SetConfig+0x128>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <TIM_Base_SetConfig+0x12c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00f      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <TIM_Base_SetConfig+0x130>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <TIM_Base_SetConfig+0x134>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <TIM_Base_SetConfig+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <TIM_Base_SetConfig+0x13c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <TIM_Base_SetConfig+0x114>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0xf8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <TIM_Base_SetConfig+0x124>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d103      	bne.n	80029f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	615a      	str	r2, [r3, #20]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40010400 	.word	0x40010400
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800
 8002a2c:	40001800 	.word	0x40001800
 8002a30:	40001c00 	.word	0x40001c00
 8002a34:	40002000 	.word	0x40002000

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e03f      	b.n	8002af2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fc78 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f929 	bl	8002cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d17c      	bne.n	8002c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x2c>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e075      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Transmit+0x3e>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06e      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	; 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fd6b 	bl	8001628 <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d108      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e003      	b.n	8002b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b8c:	e02a      	b.n	8002be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f840 	bl	8002c1e <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e036      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e007      	b.n	8002bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cf      	bne.n	8002b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f810 	bl	8002c1e <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b090      	sub	sp, #64	; 0x40
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	e050      	b.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d04c      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3e:	f7fe fcf3 	bl	8001628 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d241      	bcs.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e5      	bne.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	613b      	str	r3, [r7, #16]
   return(result);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca2:	623a      	str	r2, [r7, #32]
 8002ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	69f9      	ldr	r1, [r7, #28]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e5      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d09f      	beq.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3740      	adds	r7, #64	; 0x40
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b0c0      	sub	sp, #256	; 0x100
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	ea40 0301 	orr.w	r3, r0, r1
 8002d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d54:	f021 010c 	bic.w	r1, r1, #12
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	6999      	ldr	r1, [r3, #24]
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	ea40 0301 	orr.w	r3, r0, r1
 8002d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <UART_SetConfig+0x2cc>)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d005      	beq.n	8002d9c <UART_SetConfig+0xa0>
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <UART_SetConfig+0x2d0>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d104      	bne.n	8002da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7ff fb6c 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8002da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002da4:	e003      	b.n	8002dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da6:	f7ff fb53 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8002daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db8:	f040 810c 	bne.w	8002fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	1891      	adds	r1, r2, r2
 8002dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd6:	415b      	adcs	r3, r3
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dde:	4621      	mov	r1, r4
 8002de0:	eb12 0801 	adds.w	r8, r2, r1
 8002de4:	4629      	mov	r1, r5
 8002de6:	eb43 0901 	adc.w	r9, r3, r1
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfe:	4690      	mov	r8, r2
 8002e00:	4699      	mov	r9, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	eb18 0303 	adds.w	r3, r8, r3
 8002e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	eb49 0303 	adc.w	r3, r9, r3
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	18db      	adds	r3, r3, r3
 8002e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e30:	4613      	mov	r3, r2
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e40:	f7fd fbd4 	bl	80005ec <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	011c      	lsls	r4, r3, #4
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	1891      	adds	r1, r2, r2
 8002e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e6c:	415b      	adcs	r3, r3
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e74:	4641      	mov	r1, r8
 8002e76:	eb12 0a01 	adds.w	sl, r2, r1
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e94:	4692      	mov	sl, r2
 8002e96:	469b      	mov	fp, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	18db      	adds	r3, r3, r3
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	eb42 0303 	adc.w	r3, r2, r3
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ed6:	f7fd fb89 	bl	80005ec <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2264      	movs	r2, #100	; 0x64
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	1acb      	subs	r3, r1, r3
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f04:	441c      	add	r4, r3
 8002f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	1891      	adds	r1, r2, r2
 8002f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f20:	415b      	adcs	r3, r3
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f28:	4641      	mov	r1, r8
 8002f2a:	1851      	adds	r1, r2, r1
 8002f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f2e:	4649      	mov	r1, r9
 8002f30:	414b      	adcs	r3, r1
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f40:	4659      	mov	r1, fp
 8002f42:	00cb      	lsls	r3, r1, #3
 8002f44:	4651      	mov	r1, sl
 8002f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	00ca      	lsls	r2, r1, #3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	4642      	mov	r2, r8
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	460a      	mov	r2, r1
 8002f60:	eb42 0303 	adc.w	r3, r2, r3
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	18db      	adds	r3, r3, r3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	4613      	mov	r3, r2
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f92:	f7fd fb2b 	bl	80005ec <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	2164      	movs	r1, #100	; 0x64
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	3332      	adds	r3, #50	; 0x32
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4422      	add	r2, r4
 8002fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc4:	e105      	b.n	80031d2 <UART_SetConfig+0x4d6>
 8002fc6:	bf00      	nop
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	464b      	mov	r3, r9
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	6239      	str	r1, [r7, #32]
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1854      	adds	r4, r2, r1
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	eb43 0501 	adc.w	r5, r3, r1
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	00eb      	lsls	r3, r5, #3
 800300a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300e:	00e2      	lsls	r2, r4, #3
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	4643      	mov	r3, r8
 8003016:	18e3      	adds	r3, r4, r3
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800301c:	464b      	mov	r3, r9
 800301e:	eb45 0303 	adc.w	r3, r5, r3
 8003022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003042:	4629      	mov	r1, r5
 8003044:	008b      	lsls	r3, r1, #2
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304c:	4621      	mov	r1, r4
 800304e:	008a      	lsls	r2, r1, #2
 8003050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003054:	f7fd faca 	bl	80005ec <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <UART_SetConfig+0x4e4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	61b9      	str	r1, [r7, #24]
 8003080:	415b      	adcs	r3, r3
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	4641      	mov	r1, r8
 800308a:	1851      	adds	r1, r2, r1
 800308c:	6139      	str	r1, [r7, #16]
 800308e:	4649      	mov	r1, r9
 8003090:	414b      	adcs	r3, r1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a0:	4659      	mov	r1, fp
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4651      	mov	r1, sl
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4642      	mov	r2, r8
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030bc:	464b      	mov	r3, r9
 80030be:	460a      	mov	r2, r1
 80030c0:	eb42 0303 	adc.w	r3, r2, r3
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030f2:	f7fd fa7b 	bl	80005ec <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311a:	441c      	add	r4, r3
 800311c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003120:	2200      	movs	r2, #0
 8003122:	673b      	str	r3, [r7, #112]	; 0x70
 8003124:	677a      	str	r2, [r7, #116]	; 0x74
 8003126:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1891      	adds	r1, r2, r2
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	415b      	adcs	r3, r3
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313a:	4641      	mov	r1, r8
 800313c:	1851      	adds	r1, r2, r1
 800313e:	6039      	str	r1, [r7, #0]
 8003140:	4649      	mov	r1, r9
 8003142:	414b      	adcs	r3, r1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003152:	4659      	mov	r1, fp
 8003154:	00cb      	lsls	r3, r1, #3
 8003156:	4651      	mov	r1, sl
 8003158:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315c:	4651      	mov	r1, sl
 800315e:	00ca      	lsls	r2, r1, #3
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	4603      	mov	r3, r0
 8003166:	4642      	mov	r2, r8
 8003168:	189b      	adds	r3, r3, r2
 800316a:	66bb      	str	r3, [r7, #104]	; 0x68
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
 8003180:	667a      	str	r2, [r7, #100]	; 0x64
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800318e:	4649      	mov	r1, r9
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4641      	mov	r1, r8
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4641      	mov	r1, r8
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031a0:	f7fd fa24 	bl	80005ec <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031aa:	fba3 1302 	umull	r1, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2164      	movs	r1, #100	; 0x64
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4422      	add	r2, r4
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031de:	bf00      	nop
 80031e0:	51eb851f 	.word	0x51eb851f

080031e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f103 0208 	add.w	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f103 0208 	add.w	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f103 0208 	add.w	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d103      	bne.n	80032a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e00c      	b.n	80032c0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3308      	adds	r3, #8
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e002      	b.n	80032b4 <vListInsert+0x2e>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d2f6      	bcs.n	80032ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6852      	ldr	r2, [r2, #4]
 8003318:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d103      	bne.n	800332c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1e5a      	subs	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003376:	f001 faff 	bl	8004978 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	3b01      	subs	r3, #1
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	441a      	add	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	22ff      	movs	r2, #255	; 0xff
 80033c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00f      	beq.n	80033f4 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3310      	adds	r3, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 ff09 	bl	80041f0 <xTaskRemoveFromEventList>
 80033de:	e009      	b.n	80033f4 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3310      	adds	r3, #16
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fefd 	bl	80031e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3324      	adds	r3, #36	; 0x24
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fef8 	bl	80031e4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80033f4:	f001 faf0 	bl	80049d8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80033f8:	2301      	movs	r3, #1
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003402:	b580      	push	{r7, lr}
 8003404:	b08c      	sub	sp, #48	; 0x30
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <xQueueGenericCreate+0x2a>
        __asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	61bb      	str	r3, [r7, #24]
    }
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d006      	beq.n	800344a <xQueueGenericCreate+0x48>
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	429a      	cmp	r2, r3
 8003448:	d101      	bne.n	800344e <xQueueGenericCreate+0x4c>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <xQueueGenericCreate+0x4e>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericCreate+0x68>
        __asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	617b      	str	r3, [r7, #20]
    }
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003470:	d90a      	bls.n	8003488 <xQueueGenericCreate+0x86>
        __asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	613b      	str	r3, [r7, #16]
    }
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	3350      	adds	r3, #80	; 0x50
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fb5d 	bl	8004b4c <pvPortMalloc>
 8003492:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3350      	adds	r3, #80	; 0x50
 80034a2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f805 	bl	80034c0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80034b6:	6a3b      	ldr	r3, [r7, #32]
    }
 80034b8:	4618      	mov	r0, r3
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e002      	b.n	80034e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034ee:	2101      	movs	r1, #1
 80034f0:	69b8      	ldr	r0, [r7, #24]
 80034f2:	f7ff ff2b 	bl	800334c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	2073      	movs	r0, #115	; 0x73
 8003506:	f002 f9bd 	bl	8005884 <SEGGER_SYSVIEW_RecordU32x3>
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08e      	sub	sp, #56	; 0x38
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003522:	2300      	movs	r3, #0
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xQueueGenericSend+0x32>
        __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	623b      	str	r3, [r7, #32]
    }
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <xQueueGenericSend+0x40>
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <xQueueGenericSend+0x44>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <xQueueGenericSend+0x46>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <xQueueGenericSend+0x60>
        __asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61fb      	str	r3, [r7, #28]
    }
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d103      	bne.n	8003582 <xQueueGenericSend+0x6e>
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <xQueueGenericSend+0x72>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueGenericSend+0x74>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xQueueGenericSend+0x8e>
        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	61bb      	str	r3, [r7, #24]
    }
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80035a2:	f001 f9e9 	bl	8004978 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <xQueueGenericSend+0xa4>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d11f      	bne.n	80035f8 <xQueueGenericSend+0xe4>
            {
                traceQUEUE_SEND( pxQueue );
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	4618      	mov	r0, r3
 80035bc:	f002 fecc 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	4601      	mov	r1, r0
 80035cc:	205a      	movs	r0, #90	; 0x5a
 80035ce:	f002 f9cf 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035d8:	f000 f980 	bl	80038dc <prvCopyDataToQueue>
 80035dc:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <xQueueGenericSend+0xdc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	3324      	adds	r3, #36	; 0x24
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fe00 	bl	80041f0 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80035f0:	f001 f9f2 	bl	80049d8 <vPortExitCritical>
                return pdPASS;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e07d      	b.n	80036f4 <xQueueGenericSend+0x1e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d110      	bne.n	8003620 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80035fe:	f001 f9eb 	bl	80049d8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fea7 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	460b      	mov	r3, r1
 8003614:	4601      	mov	r1, r0
 8003616:	205a      	movs	r0, #90	; 0x5a
 8003618:	f002 f9aa 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800361c:	2300      	movs	r3, #0
 800361e:	e069      	b.n	80036f4 <xQueueGenericSend+0x1e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003626:	f107 0310 	add.w	r3, r7, #16
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fe46 	bl	80042bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003634:	f001 f9d0 	bl	80049d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003638:	f000 fc12 	bl	8003e60 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800363c:	f001 f99c 	bl	8004978 <vPortEnterCritical>
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003646:	b25b      	sxtb	r3, r3
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d103      	bne.n	8003656 <xQueueGenericSend+0x142>
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365c:	b25b      	sxtb	r3, r3
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d103      	bne.n	800366c <xQueueGenericSend+0x158>
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366c:	f001 f9b4 	bl	80049d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003670:	1d3a      	adds	r2, r7, #4
 8003672:	f107 0310 	add.w	r3, r7, #16
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fe35 	bl	80042e8 <xTaskCheckForTimeOut>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d124      	bne.n	80036ce <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003686:	f000 fa21 	bl	8003acc <prvIsQueueFull>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	3310      	adds	r3, #16
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fd85 	bl	80041a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800369e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a0:	f000 f9ac 	bl	80039fc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80036a4:	f000 fbea 	bl	8003e7c <xTaskResumeAll>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f47f af79 	bne.w	80035a2 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <xQueueGenericSend+0x1e8>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e76f      	b.n	80035a2 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80036c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c4:	f000 f99a 	bl	80039fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036c8:	f000 fbd8 	bl	8003e7c <xTaskResumeAll>
 80036cc:	e769      	b.n	80035a2 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80036ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d0:	f000 f994 	bl	80039fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036d4:	f000 fbd2 	bl	8003e7c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fe3c 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	460b      	mov	r3, r1
 80036ea:	4601      	mov	r1, r0
 80036ec:	205a      	movs	r0, #90	; 0x5a
 80036ee:	f002 f93f 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80036f2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3730      	adds	r7, #48	; 0x30
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b08f      	sub	sp, #60	; 0x3c
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xQueueReceive+0x30>
        __asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	623b      	str	r3, [r7, #32]
    }
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <xQueueReceive+0x3e>
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <xQueueReceive+0x42>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueReceive+0x44>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueReceive+0x5e>
        __asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61fb      	str	r3, [r7, #28]
    }
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800375e:	f001 f90b 	bl	8004978 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d024      	beq.n	80037b8 <xQueueReceive+0xb8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003772:	f000 f91d 	bl	80039b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fded 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 800377e:	4604      	mov	r4, r0
 8003780:	2000      	movs	r0, #0
 8003782:	f002 fde9 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2101      	movs	r1, #1
 800378c:	9100      	str	r1, [sp, #0]
 800378e:	4621      	mov	r1, r4
 8003790:	205c      	movs	r0, #92	; 0x5c
 8003792:	f002 f8ed 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1e5a      	subs	r2, r3, #1
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <xQueueReceive+0xb0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	3310      	adds	r3, #16
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fd20 	bl	80041f0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037b0:	f001 f912 	bl	80049d8 <vPortExitCritical>
                return pdPASS;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e08a      	b.n	80038ce <xQueueReceive+0x1ce>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d113      	bne.n	80037e6 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037be:	f001 f90b 	bl	80049d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	4618      	mov	r0, r3
 80037c6:	f002 fdc7 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80037ca:	4604      	mov	r4, r0
 80037cc:	2000      	movs	r0, #0
 80037ce:	f002 fdc3 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2101      	movs	r1, #1
 80037d8:	9100      	str	r1, [sp, #0]
 80037da:	4621      	mov	r1, r4
 80037dc:	205c      	movs	r0, #92	; 0x5c
 80037de:	f002 f8c7 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e073      	b.n	80038ce <xQueueReceive+0x1ce>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd63 	bl	80042bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037fa:	f001 f8ed 	bl	80049d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037fe:	f000 fb2f 	bl	8003e60 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003802:	f001 f8b9 	bl	8004978 <vPortEnterCritical>
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380c:	b25b      	sxtb	r3, r3
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d103      	bne.n	800381c <xQueueReceive+0x11c>
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d103      	bne.n	8003832 <xQueueReceive+0x132>
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003832:	f001 f8d1 	bl	80049d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003836:	1d3a      	adds	r2, r7, #4
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fd52 	bl	80042e8 <xTaskCheckForTimeOut>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d124      	bne.n	8003894 <xQueueReceive+0x194>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800384a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384c:	f000 f928 	bl	8003aa0 <prvIsQueueEmpty>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <xQueueReceive+0x188>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fca2 	bl	80041a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f8c9 	bl	80039fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800386a:	f000 fb07 	bl	8003e7c <xTaskResumeAll>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af74 	bne.w	800375e <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <xQueueReceive+0x1d8>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e76a      	b.n	800375e <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800388a:	f000 f8b7 	bl	80039fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800388e:	f000 faf5 	bl	8003e7c <xTaskResumeAll>
 8003892:	e764      	b.n	800375e <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003896:	f000 f8b1 	bl	80039fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800389a:	f000 faef 	bl	8003e7c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800389e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a0:	f000 f8fe 	bl	8003aa0 <prvIsQueueEmpty>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f43f af59 	beq.w	800375e <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fd52 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80038b4:	4604      	mov	r4, r0
 80038b6:	2000      	movs	r0, #0
 80038b8:	f002 fd4e 	bl	8006358 <SEGGER_SYSVIEW_ShrinkId>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2101      	movs	r1, #1
 80038c2:	9100      	str	r1, [sp, #0]
 80038c4:	4621      	mov	r1, r4
 80038c6:	205c      	movs	r0, #92	; 0x5c
 80038c8:	f002 f852 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80038cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3734      	adds	r7, #52	; 0x34
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14d      	bne.n	800399e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe0c 	bl	8004524 <xTaskPriorityDisinherit>
 800390c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e043      	b.n	800399e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d119      	bne.n	8003950 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6858      	ldr	r0, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	461a      	mov	r2, r3
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	f002 fe92 	bl	8006650 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d32b      	bcc.n	800399e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e026      	b.n	800399e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68d8      	ldr	r0, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	f002 fe78 	bl	8006650 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	425b      	negs	r3, r3
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	425b      	negs	r3, r3
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d105      	bne.n	800399e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3b01      	subs	r3, #1
 800399c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d303      	bcc.n	80039e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f002 fe2e 	bl	8006650 <memcpy>
    }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a04:	f000 ffb8 	bl	8004978 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a10:	e011      	b.n	8003a36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbe6 	bl	80041f0 <xTaskRemoveFromEventList>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a2a:	f000 fcc3 	bl	80043b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dce9      	bgt.n	8003a12 <prvUnlockQueue+0x16>
 8003a3e:	e000      	b.n	8003a42 <prvUnlockQueue+0x46>
                        break;
 8003a40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a4a:	f000 ffc5 	bl	80049d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a4e:	f000 ff93 	bl	8004978 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a5a:	e011      	b.n	8003a80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3310      	adds	r3, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fbc1 	bl	80041f0 <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a74:	f000 fc9e 	bl	80043b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dce9      	bgt.n	8003a5c <prvUnlockQueue+0x60>
 8003a88:	e000      	b.n	8003a8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a94:	f000 ffa0 	bl	80049d8 <vPortExitCritical>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003aa8:	f000 ff66 	bl	8004978 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e001      	b.n	8003abe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003abe:	f000 ff8b 	bl	80049d8 <vPortExitCritical>

    return xReturn;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ad4:	f000 ff50 	bl	8004978 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d102      	bne.n	8003aea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e001      	b.n	8003aee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003aee:	f000 ff73 	bl	80049d8 <vPortExitCritical>

    return xReturn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f81b 	bl	8004b4c <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1e:	2058      	movs	r0, #88	; 0x58
 8003b20:	f001 f814 	bl	8004b4c <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
 8003b32:	e005      	b.n	8003b40 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f001 f8e9 	bl	8004d0c <vPortFree>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d013      	beq.n	8003b6e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f80e 	bl	8003b7e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003b62:	69f8      	ldr	r0, [r7, #28]
 8003b64:	f000 f8a2 	bl	8003cac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e002      	b.n	8003b74 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003b74:	69bb      	ldr	r3, [r7, #24]
    }
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	21a5      	movs	r1, #165	; 0xa5
 8003b98:	f002 fd68 	bl	800666c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f023 0307 	bic.w	r3, r3, #7
 8003bb4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	617b      	str	r3, [r7, #20]
    }
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01f      	beq.n	8003c1c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e012      	b.n	8003c08 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	7819      	ldrb	r1, [r3, #0]
 8003bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3334      	adds	r3, #52	; 0x34
 8003bf2:	460a      	mov	r2, r1
 8003bf4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3301      	adds	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d9e9      	bls.n	8003be2 <prvInitialiseNewTask+0x64>
 8003c0e:	e000      	b.n	8003c12 <prvInitialiseNewTask+0x94>
            {
                break;
 8003c10:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c1a:	e003      	b.n	8003c24 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d901      	bls.n	8003c2e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c38:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff faed 	bl	8003224 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fae8 	bl	8003224 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c58:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	f1c3 0205 	rsb	r2, r3, #5
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	3350      	adds	r3, #80	; 0x50
 8003c6e:	2204      	movs	r2, #4
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 fcfa 	bl	800666c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	3354      	adds	r3, #84	; 0x54
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f002 fcf3 	bl	800666c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	69b8      	ldr	r0, [r7, #24]
 8003c8c:	f000 fd42 	bl	8004714 <pxPortInitialiseStack>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ca2:	bf00      	nop
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003cb4:	f000 fe60 	bl	8004978 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <prvAddNewTaskToReadyList+0xe4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <prvAddNewTaskToReadyList+0xe4>)
 8003cc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <prvAddNewTaskToReadyList+0xe8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <prvAddNewTaskToReadyList+0xe8>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <prvAddNewTaskToReadyList+0xe4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003cd8:	f000 fb8a 	bl	80043f0 <prvInitialiseTaskLists>
 8003cdc:	e00d      	b.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <prvAddNewTaskToReadyList+0xec>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <prvAddNewTaskToReadyList+0xe8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d802      	bhi.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <prvAddNewTaskToReadyList+0xe8>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <prvAddNewTaskToReadyList+0xf0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <prvAddNewTaskToReadyList+0xf0>)
 8003d02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <prvAddNewTaskToReadyList+0xf0>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <prvAddNewTaskToReadyList+0x94>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f002 f9f9 	bl	800610c <SEGGER_SYSVIEW_OnTaskCreate>
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461c      	mov	r4, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	1ae3      	subs	r3, r4, r3
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	f001 f904 	bl	8004f48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f002 fa66 	bl	8006214 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <prvAddNewTaskToReadyList+0xf4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <prvAddNewTaskToReadyList+0xf4>)
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <prvAddNewTaskToReadyList+0xf8>)
 8003d68:	441a      	add	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7ff fa64 	bl	800323e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003d76:	f000 fe2f 	bl	80049d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <prvAddNewTaskToReadyList+0xec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <prvAddNewTaskToReadyList+0xe8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200001a8 	.word	0x200001a8
 8003d94:	200000d0 	.word	0x200000d0
 8003d98:	200001b4 	.word	0x200001b4
 8003d9c:	200001c4 	.word	0x200001c4
 8003da0:	200001b0 	.word	0x200001b0
 8003da4:	200000d4 	.word	0x200000d4

08003da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <vTaskStartScheduler+0x98>)
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	2282      	movs	r2, #130	; 0x82
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <vTaskStartScheduler+0x9c>)
 8003dbc:	4822      	ldr	r0, [pc, #136]	; (8003e48 <vTaskStartScheduler+0xa0>)
 8003dbe:	f7ff fe9d 	bl	8003afc <xTaskCreate>
 8003dc2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d124      	bne.n	8003e14 <vTaskStartScheduler+0x6c>
        __asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
    }
 8003ddc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <vTaskStartScheduler+0xa4>)
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <vTaskStartScheduler+0xa8>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <vTaskStartScheduler+0xac>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <vTaskStartScheduler+0xb0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <vTaskStartScheduler+0x98>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d102      	bne.n	8003e04 <vTaskStartScheduler+0x5c>
 8003dfe:	f002 f969 	bl	80060d4 <SEGGER_SYSVIEW_OnIdle>
 8003e02:	e004      	b.n	8003e0e <vTaskStartScheduler+0x66>
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <vTaskStartScheduler+0xb0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 f9c1 	bl	8006190 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003e0e:	f000 fd11 	bl	8004834 <xPortStartScheduler>
 8003e12:	e00e      	b.n	8003e32 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d10a      	bne.n	8003e32 <vTaskStartScheduler+0x8a>
        __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	607b      	str	r3, [r7, #4]
    }
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <vTaskStartScheduler+0xb4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200001cc 	.word	0x200001cc
 8003e44:	080066ac 	.word	0x080066ac
 8003e48:	080043cd 	.word	0x080043cd
 8003e4c:	200001c8 	.word	0x200001c8
 8003e50:	200001b4 	.word	0x200001b4
 8003e54:	200001ac 	.word	0x200001ac
 8003e58:	200000d0 	.word	0x200000d0
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <vTaskSuspendAll+0x18>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <vTaskSuspendAll+0x18>)
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	200001d0 	.word	0x200001d0

08003e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <xTaskResumeAll+0x104>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	603b      	str	r3, [r7, #0]
    }
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ea8:	f000 fd66 	bl	8004978 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <xTaskResumeAll+0x104>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <xTaskResumeAll+0x104>)
 8003eb4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <xTaskResumeAll+0x104>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d159      	bne.n	8003f72 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <xTaskResumeAll+0x108>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d055      	beq.n	8003f72 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec6:	e032      	b.n	8003f2e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <xTaskResumeAll+0x10c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3318      	adds	r3, #24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fa0f 	bl	80032f8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fa0a 	bl	80032f8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f002 f994 	bl	8006214 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <xTaskResumeAll+0x110>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <xTaskResumeAll+0x110>)
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <xTaskResumeAll+0x114>)
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7ff f992 	bl	800323e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <xTaskResumeAll+0x118>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <xTaskResumeAll+0x11c>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <xTaskResumeAll+0x10c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1c8      	bne.n	8003ec8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f3c:	f000 fad6 	bl	80044ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <xTaskResumeAll+0x120>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f4c:	f000 f828 	bl	8003fa0 <xTaskIncrementTick>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <xTaskResumeAll+0x11c>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f1      	bne.n	8003f4c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <xTaskResumeAll+0x120>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <xTaskResumeAll+0x11c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f72:	f000 fd31 	bl	80049d8 <vPortExitCritical>

    return xAlreadyYielded;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200001d0 	.word	0x200001d0
 8003f84:	200001a8 	.word	0x200001a8
 8003f88:	20000168 	.word	0x20000168
 8003f8c:	200001b0 	.word	0x200001b0
 8003f90:	200000d4 	.word	0x200000d4
 8003f94:	200000d0 	.word	0x200000d0
 8003f98:	200001bc 	.word	0x200001bc
 8003f9c:	200001b8 	.word	0x200001b8

08003fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <xTaskIncrementTick+0x110>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d173      	bne.n	800409a <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb2:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <xTaskIncrementTick+0x114>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fba:	4a3e      	ldr	r2, [pc, #248]	; (80040b4 <xTaskIncrementTick+0x114>)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d120      	bne.n	8004008 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <xTaskIncrementTick+0x118>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <xTaskIncrementTick+0x46>
        __asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	603b      	str	r3, [r7, #0]
    }
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskIncrementTick+0x44>
 8003fe6:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <xTaskIncrementTick+0x118>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	4b33      	ldr	r3, [pc, #204]	; (80040bc <xTaskIncrementTick+0x11c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <xTaskIncrementTick+0x118>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4a31      	ldr	r2, [pc, #196]	; (80040bc <xTaskIncrementTick+0x11c>)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <xTaskIncrementTick+0x120>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <xTaskIncrementTick+0x120>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	f000 fa72 	bl	80044ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <xTaskIncrementTick+0x124>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d348      	bcc.n	80040a4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <xTaskIncrementTick+0x118>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <xTaskIncrementTick+0x124>)
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	601a      	str	r2, [r3, #0]
                    break;
 8004024:	e03e      	b.n	80040a4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <xTaskIncrementTick+0x118>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d203      	bcs.n	8004046 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800403e:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <xTaskIncrementTick+0x124>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004044:	e02e      	b.n	80040a4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff f954 	bl	80032f8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3318      	adds	r3, #24
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff f94b 	bl	80032f8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f002 f8d5 	bl	8006214 <SEGGER_SYSVIEW_OnTaskStartReady>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	2201      	movs	r2, #1
 8004070:	409a      	lsls	r2, r3
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <xTaskIncrementTick+0x128>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <xTaskIncrementTick+0x128>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a10      	ldr	r2, [pc, #64]	; (80040cc <xTaskIncrementTick+0x12c>)
 800408a:	441a      	add	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f7ff f8d3 	bl	800323e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004098:	e7bb      	b.n	8004012 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <xTaskIncrementTick+0x130>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <xTaskIncrementTick+0x130>)
 80040a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80040a4:	697b      	ldr	r3, [r7, #20]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200001d0 	.word	0x200001d0
 80040b4:	200001ac 	.word	0x200001ac
 80040b8:	20000160 	.word	0x20000160
 80040bc:	20000164 	.word	0x20000164
 80040c0:	200001c0 	.word	0x200001c0
 80040c4:	200001c8 	.word	0x200001c8
 80040c8:	200001b0 	.word	0x200001b0
 80040cc:	200000d4 	.word	0x200000d4
 80040d0:	200001b8 	.word	0x200001b8

080040d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040da:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <vTaskSwitchContext+0xbc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80040e2:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <vTaskSwitchContext+0xc0>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80040e8:	e04d      	b.n	8004186 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80040ea:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <vTaskSwitchContext+0xc0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <vTaskSwitchContext+0xc4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	f1c3 031f 	rsb	r3, r3, #31
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	4925      	ldr	r1, [pc, #148]	; (800419c <vTaskSwitchContext+0xc8>)
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <vTaskSwitchContext+0x5c>
        __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	607b      	str	r3, [r7, #4]
    }
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vTaskSwitchContext+0x5a>
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a18      	ldr	r2, [pc, #96]	; (800419c <vTaskSwitchContext+0xc8>)
 800413c:	4413      	add	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3308      	adds	r3, #8
 8004152:	429a      	cmp	r2, r3
 8004154:	d104      	bne.n	8004160 <vTaskSwitchContext+0x8c>
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <vTaskSwitchContext+0xcc>)
 8004168:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <vTaskSwitchContext+0xcc>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <vTaskSwitchContext+0xd0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d102      	bne.n	800417c <vTaskSwitchContext+0xa8>
 8004176:	f001 ffad 	bl	80060d4 <SEGGER_SYSVIEW_OnIdle>
}
 800417a:	e004      	b.n	8004186 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <vTaskSwitchContext+0xcc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 f805 	bl	8006190 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200001d0 	.word	0x200001d0
 8004194:	200001bc 	.word	0x200001bc
 8004198:	200001b0 	.word	0x200001b0
 800419c:	200000d4 	.word	0x200000d4
 80041a0:	200000d0 	.word	0x200000d0
 80041a4:	200001cc 	.word	0x200001cc

080041a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
    }
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <vTaskPlaceOnEventList+0x44>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3318      	adds	r3, #24
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff f855 	bl	8003286 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041dc:	2101      	movs	r1, #1
 80041de:	6838      	ldr	r0, [r7, #0]
 80041e0:	f000 fa20 	bl	8004624 <prvAddCurrentTaskToDelayedList>
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200000d0 	.word	0x200000d0

080041f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
    }
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3318      	adds	r3, #24
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f869 	bl	80032f8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <xTaskRemoveFromEventList+0xb4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d120      	bne.n	8004270 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3304      	adds	r3, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f860 	bl	80032f8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4618      	mov	r0, r3
 800423c:	f001 ffea 	bl	8006214 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <xTaskRemoveFromEventList+0xb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <xTaskRemoveFromEventList+0xb8>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <xTaskRemoveFromEventList+0xbc>)
 8004260:	441a      	add	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7fe ffe8 	bl	800323e <vListInsertEnd>
 800426e:	e005      	b.n	800427c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3318      	adds	r3, #24
 8004274:	4619      	mov	r1, r3
 8004276:	480e      	ldr	r0, [pc, #56]	; (80042b0 <xTaskRemoveFromEventList+0xc0>)
 8004278:	f7fe ffe1 	bl	800323e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <xTaskRemoveFromEventList+0xc4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	429a      	cmp	r2, r3
 8004288:	d905      	bls.n	8004296 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <xTaskRemoveFromEventList+0xc8>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e001      	b.n	800429a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800429a:	697b      	ldr	r3, [r7, #20]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200001d0 	.word	0x200001d0
 80042a8:	200001b0 	.word	0x200001b0
 80042ac:	200000d4 	.word	0x200000d4
 80042b0:	20000168 	.word	0x20000168
 80042b4:	200000d0 	.word	0x200000d0
 80042b8:	200001bc 	.word	0x200001bc

080042bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <vTaskInternalSetTimeOutState+0x24>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <vTaskInternalSetTimeOutState+0x28>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	200001c0 	.word	0x200001c0
 80042e4:	200001ac 	.word	0x200001ac

080042e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	613b      	str	r3, [r7, #16]
    }
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800432a:	f000 fb25 	bl	8004978 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <xTaskCheckForTimeOut+0xc4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d102      	bne.n	800434e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e026      	b.n	800439c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <xTaskCheckForTimeOut+0xc8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d00a      	beq.n	8004370 <xTaskCheckForTimeOut+0x88>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	429a      	cmp	r2, r3
 8004362:	d305      	bcc.n	8004370 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e015      	b.n	800439c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	429a      	cmp	r2, r3
 8004378:	d20b      	bcs.n	8004392 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	1ad2      	subs	r2, r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff98 	bl	80042bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e004      	b.n	800439c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800439c:	f000 fb1c 	bl	80049d8 <vPortExitCritical>

    return xReturn;
 80043a0:	69fb      	ldr	r3, [r7, #28]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200001ac 	.word	0x200001ac
 80043b0:	200001c0 	.word	0x200001c0

080043b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <vTaskMissedYield+0x14>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	200001bc 	.word	0x200001bc

080043cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043d4:	f000 f84c 	bl	8004470 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <prvIdleTask+0x20>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80043e8:	e7f4      	b.n	80043d4 <prvIdleTask+0x8>
 80043ea:	bf00      	nop
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	e00c      	b.n	8004416 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <prvInitialiseTaskLists+0x60>)
 8004408:	4413      	add	r3, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe feea 	bl	80031e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d9ef      	bls.n	80043fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800441c:	480d      	ldr	r0, [pc, #52]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800441e:	f7fe fee1 	bl	80031e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004422:	480d      	ldr	r0, [pc, #52]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004424:	f7fe fede 	bl	80031e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <prvInitialiseTaskLists+0x6c>)
 800442a:	f7fe fedb 	bl	80031e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800442e:	480c      	ldr	r0, [pc, #48]	; (8004460 <prvInitialiseTaskLists+0x70>)
 8004430:	f7fe fed8 	bl	80031e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004434:	480b      	ldr	r0, [pc, #44]	; (8004464 <prvInitialiseTaskLists+0x74>)
 8004436:	f7fe fed5 	bl	80031e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <prvInitialiseTaskLists+0x78>)
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvInitialiseTaskLists+0x7c>)
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200000d4 	.word	0x200000d4
 8004454:	20000138 	.word	0x20000138
 8004458:	2000014c 	.word	0x2000014c
 800445c:	20000168 	.word	0x20000168
 8004460:	2000017c 	.word	0x2000017c
 8004464:	20000194 	.word	0x20000194
 8004468:	20000160 	.word	0x20000160
 800446c:	20000164 	.word	0x20000164

08004470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004476:	e019      	b.n	80044ac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004478:	f000 fa7e 	bl	8004978 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <prvCheckTasksWaitingTermination+0x50>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe ff35 	bl	80032f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004496:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044a0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80044a2:	f000 fa99 	bl	80049d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f810 	bl	80044cc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e1      	bne.n	8004478 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	2000017c 	.word	0x2000017c
 80044c4:	200001a8 	.word	0x200001a8
 80044c8:	20000190 	.word	0x20000190

080044cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fc17 	bl	8004d0c <vPortFree>
                vPortFree( pxTCB );
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fc14 	bl	8004d0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <prvResetNextTaskUnblockTime+0x30>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <prvResetNextTaskUnblockTime+0x34>)
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004502:	e005      	b.n	8004510 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <prvResetNextTaskUnblockTime+0x30>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvResetNextTaskUnblockTime+0x34>)
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000160 	.word	0x20000160
 8004520:	200001c8 	.word	0x200001c8

08004524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d068      	beq.n	800460c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <xTaskPriorityDisinherit+0xf4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d00a      	beq.n	800455a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
    }
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	60bb      	str	r3, [r7, #8]
    }
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	429a      	cmp	r2, r3
 800458c:	d03e      	beq.n	800460c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d13a      	bne.n	800460c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3304      	adds	r3, #4
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe feac 	bl	80032f8 <uxListRemove>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	2201      	movs	r2, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43da      	mvns	r2, r3
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <xTaskPriorityDisinherit+0xf8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4013      	ands	r3, r2
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <xTaskPriorityDisinherit+0xf8>)
 80045ba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4619      	mov	r1, r3
 80045c0:	204a      	movs	r0, #74	; 0x4a
 80045c2:	f001 f8c9 	bl	8005758 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f1c3 0205 	rsb	r2, r3, #5
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	2201      	movs	r2, #1
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <xTaskPriorityDisinherit+0xf8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <xTaskPriorityDisinherit+0xf8>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <xTaskPriorityDisinherit+0xfc>)
 80045fa:	441a      	add	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7fe fe1b 	bl	800323e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800460c:	697b      	ldr	r3, [r7, #20]
    }
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200000d0 	.word	0x200000d0
 800461c:	200001b0 	.word	0x200001b0
 8004620:	200000d4 	.word	0x200000d4

08004624 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fe5c 	bl	80032f8 <uxListRemove>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <prvAddCurrentTaskToDelayedList+0xdc>)
 800465c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d110      	bne.n	8004688 <prvAddCurrentTaskToDelayedList+0x64>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800466c:	4b23      	ldr	r3, [pc, #140]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	211b      	movs	r1, #27
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fe10 	bl	8006298 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4820      	ldr	r0, [pc, #128]	; (8004704 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004682:	f7fe fddc 	bl	800323e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004686:	e032      	b.n	80046ee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d20f      	bcs.n	80046c0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2104      	movs	r1, #4
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fdf6 	bl	8006298 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe fde4 	bl	8003286 <vListInsert>
}
 80046be:	e016      	b.n	80046ee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2104      	movs	r1, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fde6 	bl	8006298 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7fe fdd4 	bl	8003286 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <prvAddCurrentTaskToDelayedList+0xec>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d202      	bcs.n	80046ee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <prvAddCurrentTaskToDelayedList+0xec>)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6013      	str	r3, [r2, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200001ac 	.word	0x200001ac
 80046fc:	200000d0 	.word	0x200000d0
 8004700:	200001b0 	.word	0x200001b0
 8004704:	20000194 	.word	0x20000194
 8004708:	20000164 	.word	0x20000164
 800470c:	20000160 	.word	0x20000160
 8004710:	200001c8 	.word	0x200001c8

08004714 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b04      	subs	r3, #4
 8004724:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800472c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b04      	subs	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b04      	subs	r3, #4
 8004742:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <pxPortInitialiseStack+0x64>)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3b14      	subs	r3, #20
 800474e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3b04      	subs	r3, #4
 800475a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f06f 0202 	mvn.w	r2, #2
 8004762:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3b20      	subs	r3, #32
 8004768:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	0800477d 	.word	0x0800477d

0800477c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <prvTaskExitError+0x54>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d00a      	beq.n	80047a6 <prvTaskExitError+0x2a>
        __asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
    }
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <prvTaskExitError+0x28>
        __asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60bb      	str	r3, [r7, #8]
    }
 80047b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80047ba:	bf00      	nop
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0fc      	beq.n	80047bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000010 	.word	0x20000010
	...

080047e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <pxCurrentTCBConst2>)
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6808      	ldr	r0, [r1, #0]
 80047e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	f380 8809 	msr	PSP, r0
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	4770      	bx	lr
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst2>:
 8004800:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004808:	4808      	ldr	r0, [pc, #32]	; (800482c <prvPortStartFirstTask+0x24>)
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f380 8808 	msr	MSP, r0
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8814 	msr	CONTROL, r0
 800481a:	b662      	cpsie	i
 800481c:	b661      	cpsie	f
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	df00      	svc	0
 8004828:	bf00      	nop
 800482a:	0000      	.short	0x0000
 800482c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop

08004834 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800483a:	4b46      	ldr	r3, [pc, #280]	; (8004954 <xPortStartScheduler+0x120>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a46      	ldr	r2, [pc, #280]	; (8004958 <xPortStartScheduler+0x124>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10a      	bne.n	800485a <xPortStartScheduler+0x26>
        __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	613b      	str	r3, [r7, #16]
    }
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <xPortStartScheduler+0x120>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3f      	ldr	r2, [pc, #252]	; (800495c <xPortStartScheduler+0x128>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10a      	bne.n	800487a <xPortStartScheduler+0x46>
        __asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60fb      	str	r3, [r7, #12]
    }
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800487a:	4b39      	ldr	r3, [pc, #228]	; (8004960 <xPortStartScheduler+0x12c>)
 800487c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <xPortStartScheduler+0x130>)
 80048a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <xPortStartScheduler+0x134>)
 80048a4:	2207      	movs	r2, #7
 80048a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a8:	e009      	b.n	80048be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80048aa:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <xPortStartScheduler+0x134>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <xPortStartScheduler+0x134>)
 80048b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d0ef      	beq.n	80048aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <xPortStartScheduler+0x134>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1c3 0307 	rsb	r3, r3, #7
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d00a      	beq.n	80048ec <xPortStartScheduler+0xb8>
        __asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	60bb      	str	r3, [r7, #8]
    }
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <xPortStartScheduler+0x134>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <xPortStartScheduler+0x134>)
 80048f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <xPortStartScheduler+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048fe:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <xPortStartScheduler+0x134>)
 8004900:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <xPortStartScheduler+0x138>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a17      	ldr	r2, [pc, #92]	; (800496c <xPortStartScheduler+0x138>)
 8004910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004914:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <xPortStartScheduler+0x138>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a14      	ldr	r2, [pc, #80]	; (800496c <xPortStartScheduler+0x138>)
 800491c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004920:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004922:	f000 f8e3 	bl	8004aec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <xPortStartScheduler+0x13c>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800492c:	f000 f902 	bl	8004b34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <xPortStartScheduler+0x140>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <xPortStartScheduler+0x140>)
 8004936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800493a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800493c:	f7ff ff64 	bl	8004808 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004940:	f7ff fbc8 	bl	80040d4 <vTaskSwitchContext>
    prvTaskExitError();
 8004944:	f7ff ff1a 	bl	800477c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	e000ed00 	.word	0xe000ed00
 8004958:	410fc271 	.word	0x410fc271
 800495c:	410fc270 	.word	0x410fc270
 8004960:	e000e400 	.word	0xe000e400
 8004964:	200001d4 	.word	0x200001d4
 8004968:	200001d8 	.word	0x200001d8
 800496c:	e000ed20 	.word	0xe000ed20
 8004970:	20000010 	.word	0x20000010
 8004974:	e000ef34 	.word	0xe000ef34

08004978 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
        __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
    }
 8004990:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <vPortEnterCritical+0x58>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <vPortEnterCritical+0x58>)
 800499a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <vPortEnterCritical+0x58>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d10f      	bne.n	80049c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <vPortEnterCritical+0x5c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	603b      	str	r3, [r7, #0]
    }
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vPortEnterCritical+0x4a>
    }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000010 	.word	0x20000010
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <vPortExitCritical+0x50>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <vPortExitCritical+0x24>
        __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	607b      	str	r3, [r7, #4]
    }
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <vPortExitCritical+0x50>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <vPortExitCritical+0x50>)
 8004a04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <vPortExitCritical+0x50>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <vPortExitCritical+0x42>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004a18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000010 	.word	0x20000010
 8004a2c:	00000000 	.word	0x00000000

08004a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a30:	f3ef 8009 	mrs	r0, PSP
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <pxCurrentTCBConst>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f01e 0f10 	tst.w	lr, #16
 8004a40:	bf08      	it	eq
 8004a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4a:	6010      	str	r0, [r2, #0]
 8004a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a54:	f380 8811 	msr	BASEPRI, r0
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f7ff fb38 	bl	80040d4 <vTaskSwitchContext>
 8004a64:	f04f 0000 	mov.w	r0, #0
 8004a68:	f380 8811 	msr	BASEPRI, r0
 8004a6c:	bc09      	pop	{r0, r3}
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	6808      	ldr	r0, [r1, #0]
 8004a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a76:	f01e 0f10 	tst.w	lr, #16
 8004a7a:	bf08      	it	eq
 8004a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a80:	f380 8809 	msr	PSP, r0
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst>:
 8004a90:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
    }
 8004ab0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004ab2:	f001 fa95 	bl	8005fe0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ab6:	f7ff fa73 	bl	8003fa0 <xTaskIncrementTick>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004ac0:	f001 faec 	bl	800609c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <SysTick_Handler+0x50>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e001      	b.n	8004ad2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004ace:	f001 fac9 	bl	8006064 <SEGGER_SYSVIEW_RecordExitISR>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
    }
 8004adc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <vPortSetupTimerInterrupt+0x34>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <vPortSetupTimerInterrupt+0x38>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004afc:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <vPortSetupTimerInterrupt+0x3c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <vPortSetupTimerInterrupt+0x40>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <vPortSetupTimerInterrupt+0x44>)
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <vPortSetupTimerInterrupt+0x34>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e010 	.word	0xe000e010
 8004b24:	e000e018 	.word	0xe000e018
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	10624dd3 	.word	0x10624dd3
 8004b30:	e000e014 	.word	0xe000e014

08004b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b44 <vPortEnableVFP+0x10>
 8004b38:	6801      	ldr	r1, [r0, #0]
 8004b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b3e:	6001      	str	r1, [r0, #0]
 8004b40:	4770      	bx	lr
 8004b42:	0000      	.short	0x0000
 8004b44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop

08004b4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004b58:	f7ff f982 	bl	8003e60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <pvPortMalloc+0x1a8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004b64:	f000 f934 	bl	8004dd0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b68:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <pvPortMalloc+0x1ac>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 80a7 	bne.w	8004cc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02d      	beq.n	8004bd8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d227      	bcs.n	8004bd8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004b88:	2208      	movs	r2, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d021      	beq.n	8004bde <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d214      	bcs.n	8004bd2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	3308      	adds	r3, #8
 8004bb0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d010      	beq.n	8004bde <pvPortMalloc+0x92>
        __asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	617b      	str	r3, [r7, #20]
    }
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bd6:	e002      	b.n	8004bde <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e000      	b.n	8004be0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bde:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06e      	beq.n	8004cc4 <pvPortMalloc+0x178>
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <pvPortMalloc+0x1b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d869      	bhi.n	8004cc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <pvPortMalloc+0x1b4>)
 8004bf2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004bf4:	4b42      	ldr	r3, [pc, #264]	; (8004d00 <pvPortMalloc+0x1b4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfa:	e004      	b.n	8004c06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d903      	bls.n	8004c18 <pvPortMalloc+0xcc>
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f1      	bne.n	8004bfc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <pvPortMalloc+0x1a8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d050      	beq.n	8004cc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2208      	movs	r2, #8
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d91f      	bls.n	8004c84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <pvPortMalloc+0x120>
        __asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	613b      	str	r3, [r7, #16]
    }
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c7e:	69b8      	ldr	r0, [r7, #24]
 8004c80:	f000 f908 	bl	8004e94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <pvPortMalloc+0x1b0>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <pvPortMalloc+0x1b0>)
 8004c90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c92:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <pvPortMalloc+0x1b0>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <pvPortMalloc+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d203      	bcs.n	8004ca6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <pvPortMalloc+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <pvPortMalloc+0x1b8>)
 8004ca4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <pvPortMalloc+0x1ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <pvPortMalloc+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <pvPortMalloc+0x1bc>)
 8004cc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004cc4:	f7ff f8da 	bl	8003e7c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <pvPortMalloc+0x19c>
        __asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
    }
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200191e4 	.word	0x200191e4
 8004cf8:	200191f8 	.word	0x200191f8
 8004cfc:	200191e8 	.word	0x200191e8
 8004d00:	200191dc 	.word	0x200191dc
 8004d04:	200191ec 	.word	0x200191ec
 8004d08:	200191f0 	.word	0x200191f0

08004d0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04d      	beq.n	8004dba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004d1e:	2308      	movs	r3, #8
 8004d20:	425b      	negs	r3, r3
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4413      	add	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <vPortFree+0xb8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <vPortFree+0x44>
        __asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60fb      	str	r3, [r7, #12]
    }
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <vPortFree+0x62>
        __asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60bb      	str	r3, [r7, #8]
    }
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <vPortFree+0xb8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01e      	beq.n	8004dba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11a      	bne.n	8004dba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <vPortFree+0xb8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	401a      	ands	r2, r3
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004d94:	f7ff f864 	bl	8003e60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <vPortFree+0xbc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4413      	add	r3, r2
 8004da2:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <vPortFree+0xbc>)
 8004da4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004da6:	6938      	ldr	r0, [r7, #16]
 8004da8:	f000 f874 	bl	8004e94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <vPortFree+0xc0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <vPortFree+0xc0>)
 8004db4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004db6:	f7ff f861 	bl	8003e7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200191f8 	.word	0x200191f8
 8004dc8:	200191e8 	.word	0x200191e8
 8004dcc:	200191f4 	.word	0x200191f4

08004dd0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dd6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8004dda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <prvHeapInit+0xac>)
 8004dde:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00c      	beq.n	8004e04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3307      	adds	r3, #7
 8004dee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0307 	bic.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <prvHeapInit+0xac>)
 8004e00:	4413      	add	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <prvHeapInit+0xb0>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <prvHeapInit+0xb0>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <prvHeapInit+0xb4>)
 8004e30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <prvHeapInit+0xb4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <prvHeapInit+0xb4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <prvHeapInit+0xb4>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <prvHeapInit+0xb8>)
 8004e5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <prvHeapInit+0xbc>)
 8004e66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <prvHeapInit+0xc0>)
 8004e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	200001dc 	.word	0x200001dc
 8004e80:	200191dc 	.word	0x200191dc
 8004e84:	200191e4 	.word	0x200191e4
 8004e88:	200191ec 	.word	0x200191ec
 8004e8c:	200191e8 	.word	0x200191e8
 8004e90:	200191f8 	.word	0x200191f8

08004e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <prvInsertBlockIntoFreeList+0xac>)
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e002      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x14>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d8f7      	bhi.n	8004ea2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d108      	bne.n	8004ed6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d118      	bne.n	8004f1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <prvInsertBlockIntoFreeList+0xb0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d00d      	beq.n	8004f12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e008      	b.n	8004f24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <prvInsertBlockIntoFreeList+0xb0>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e003      	b.n	8004f24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d002      	beq.n	8004f32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	200191dc 	.word	0x200191dc
 8004f44:	200191e4 	.word	0x200191e4

08004f48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f56:	2205      	movs	r2, #5
 8004f58:	492b      	ldr	r1, [pc, #172]	; (8005008 <SYSVIEW_AddTask+0xc0>)
 8004f5a:	68b8      	ldr	r0, [r7, #8]
 8004f5c:	f001 fb68 	bl	8006630 <memcmp>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d04b      	beq.n	8004ffe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f66:	4b29      	ldr	r3, [pc, #164]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	d903      	bls.n	8004f76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f6e:	4828      	ldr	r0, [pc, #160]	; (8005010 <SYSVIEW_AddTask+0xc8>)
 8004f70:	f001 fade 	bl	8006530 <SEGGER_SYSVIEW_Warn>
    return;
 8004f74:	e044      	b.n	8005000 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f76:	4b25      	ldr	r3, [pc, #148]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4926      	ldr	r1, [pc, #152]	; (8005014 <SYSVIEW_AddTask+0xcc>)
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f8a:	4b20      	ldr	r3, [pc, #128]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4921      	ldr	r1, [pc, #132]	; (8005014 <SYSVIEW_AddTask+0xcc>)
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	491b      	ldr	r1, [pc, #108]	; (8005014 <SYSVIEW_AddTask+0xcc>)
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4916      	ldr	r1, [pc, #88]	; (8005014 <SYSVIEW_AddTask+0xcc>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4910      	ldr	r1, [pc, #64]	; (8005014 <SYSVIEW_AddTask+0xcc>)
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	3310      	adds	r3, #16
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <SYSVIEW_AddTask+0xc4>)
 8004fea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f80e 	bl	8005018 <SYSVIEW_SendTaskInfo>
 8004ffc:	e000      	b.n	8005000 <SYSVIEW_AddTask+0xb8>
    return;
 8004ffe:	bf00      	nop

}
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	080066b4 	.word	0x080066b4
 800500c:	2001929c 	.word	0x2001929c
 8005010:	080066bc 	.word	0x080066bc
 8005014:	200191fc 	.word	0x200191fc

08005018 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005026:	f107 0314 	add.w	r3, r7, #20
 800502a:	2214      	movs	r2, #20
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fb1c 	bl	800666c <memset>
  TaskInfo.TaskID     = TaskID;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fe9d 	bl	8005d8c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005052:	bf00      	nop
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <USART2_IRQHandler+0x80>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <USART2_IRQHandler+0x84>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 030b 	and.w	r3, r3, #11
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005084:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <USART2_IRQHandler+0x88>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <USART2_IRQHandler+0x88>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	79fa      	ldrb	r2, [r7, #7]
 8005092:	4610      	mov	r0, r2
 8005094:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <USART2_IRQHandler+0x8c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <USART2_IRQHandler+0x8c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1dfa      	adds	r2, r7, #7
 80050ae:	4610      	mov	r0, r2
 80050b0:	4798      	blx	r3
 80050b2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <USART2_IRQHandler+0x90>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <USART2_IRQHandler+0x90>)
 80050c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e006      	b.n	80050d6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <USART2_IRQHandler+0x80>)
 80050ca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80050cc:	79fa      	ldrb	r2, [r7, #7]
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <USART2_IRQHandler+0x84>)
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e000      	b.n	80050d6 <USART2_IRQHandler+0x7a>
      return;
 80050d4:	bf00      	nop
    }
  }
}
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004404 	.word	0x40004404
 80050e4:	200192a0 	.word	0x200192a0
 80050e8:	200192a4 	.word	0x200192a4
 80050ec:	4000440c 	.word	0x4000440c

080050f0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a04      	ldr	r2, [pc, #16]	; (800510c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	6013      	str	r3, [r2, #0]
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	4000440c 	.word	0x4000440c

08005110 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <_DoInit+0x98>)
 8005118:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2203      	movs	r2, #3
 800511e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2203      	movs	r2, #3
 8005124:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <_DoInit+0x9c>)
 800512a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a20      	ldr	r2, [pc, #128]	; (80051b0 <_DoInit+0xa0>)
 8005130:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005138:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a17      	ldr	r2, [pc, #92]	; (80051ac <_DoInit+0x9c>)
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <_DoInit+0xa4>)
 8005156:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2210      	movs	r2, #16
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3307      	adds	r3, #7
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <_DoInit+0xa8>)
 8005176:	6810      	ldr	r0, [r2, #0]
 8005178:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800517a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <_DoInit+0xac>)
 8005182:	6810      	ldr	r0, [r2, #0]
 8005184:	6018      	str	r0, [r3, #0]
 8005186:	8891      	ldrh	r1, [r2, #4]
 8005188:	7992      	ldrb	r2, [r2, #6]
 800518a:	8099      	strh	r1, [r3, #4]
 800518c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800518e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005198:	f3bf 8f5f 	dmb	sy
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	200192a8 	.word	0x200192a8
 80051ac:	0800670c 	.word	0x0800670c
 80051b0:	20019350 	.word	0x20019350
 80051b4:	20019750 	.word	0x20019750
 80051b8:	08006718 	.word	0x08006718
 80051bc:	0800671c 	.word	0x0800671c

080051c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80051cc:	4b3e      	ldr	r3, [pc, #248]	; (80052c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <SEGGER_RTT_ReadNoLock+0x1e>
 80051da:	f7ff ff99 	bl	8005110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	3360      	adds	r3, #96	; 0x60
 80051ea:	4a37      	ldr	r2, [pc, #220]	; (80052c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	429a      	cmp	r2, r3
 800520a:	d92b      	bls.n	8005264 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4293      	cmp	r3, r2
 800521c:	bf28      	it	cs
 800521e:	4613      	movcs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	4413      	add	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6939      	ldr	r1, [r7, #16]
 8005230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005232:	f001 fa0d 	bl	8006650 <memcpy>
    NumBytesRead += NumBytesRem;
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525c:	429a      	cmp	r2, r3
 800525e:	d101      	bne.n	8005264 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4293      	cmp	r3, r2
 8005272:	bf28      	it	cs
 8005274:	4613      	movcs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d019      	beq.n	80052b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528e:	f001 f9df 	bl	8006650 <memcpy>
    NumBytesRead += NumBytesRem;
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800529a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3730      	adds	r7, #48	; 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200192a8 	.word	0x200192a8

080052cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052dc:	e002      	b.n	80052e4 <_EncodeStr+0x18>
    Len++;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f6      	bne.n	80052de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d901      	bls.n	80052fc <_EncodeStr+0x30>
    Len = Limit;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005300:	d806      	bhi.n	8005310 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	60fa      	str	r2, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e011      	b.n	8005334 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	22ff      	movs	r2, #255	; 0xff
 8005318:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	60fa      	str	r2, [r7, #12]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	0a19      	lsrs	r1, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	60fa      	str	r2, [r7, #12]
 8005330:	b2ca      	uxtb	r2, r1
 8005332:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005338:	e00a      	b.n	8005350 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	1c53      	adds	r3, r2, #1
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	60f9      	str	r1, [r7, #12]
 8005346:	7812      	ldrb	r2, [r2, #0]
 8005348:	701a      	strb	r2, [r3, #0]
    n++;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	3301      	adds	r3, #1
 800534e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3f0      	bcc.n	800533a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <_HandleIncomingPacket+0xe0>)
 8005388:	7e1b      	ldrb	r3, [r3, #24]
 800538a:	4618      	mov	r0, r3
 800538c:	1cfb      	adds	r3, r7, #3
 800538e:	2201      	movs	r2, #1
 8005390:	4619      	mov	r1, r3
 8005392:	f7ff ff15 	bl	80051c0 <SEGGER_RTT_ReadNoLock>
 8005396:	4603      	mov	r3, r0
 8005398:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd54      	ble.n	800544a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d032      	beq.n	800540c <_HandleIncomingPacket+0x8c>
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	dc42      	bgt.n	8005430 <_HandleIncomingPacket+0xb0>
 80053aa:	2b07      	cmp	r3, #7
 80053ac:	dc16      	bgt.n	80053dc <_HandleIncomingPacket+0x5c>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	dd3e      	ble.n	8005430 <_HandleIncomingPacket+0xb0>
 80053b2:	3b01      	subs	r3, #1
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d83b      	bhi.n	8005430 <_HandleIncomingPacket+0xb0>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <_HandleIncomingPacket+0x40>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053e3 	.word	0x080053e3
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053ef 	.word	0x080053ef
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fb 	.word	0x080053fb
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005407 	.word	0x08005407
 80053dc:	2b7f      	cmp	r3, #127	; 0x7f
 80053de:	d036      	beq.n	800544e <_HandleIncomingPacket+0xce>
 80053e0:	e026      	b.n	8005430 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053e2:	f000 fb57 	bl	8005a94 <SEGGER_SYSVIEW_Start>
      break;
 80053e6:	e037      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053e8:	f000 fc10 	bl	8005c0c <SEGGER_SYSVIEW_Stop>
      break;
 80053ec:	e034      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053ee:	f000 fdc5 	bl	8005f7c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053f2:	e031      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053f4:	f000 fdae 	bl	8005f54 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053f8:	e02e      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053fa:	f000 fc2d 	bl	8005c58 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053fe:	e02b      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005400:	f001 f858 	bl	80064b4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005404:	e028      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005406:	f001 f837 	bl	8006478 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800540a:	e025      	b.n	8005458 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800540c:	4b14      	ldr	r3, [pc, #80]	; (8005460 <_HandleIncomingPacket+0xe0>)
 800540e:	7e1b      	ldrb	r3, [r3, #24]
 8005410:	4618      	mov	r0, r3
 8005412:	1cfb      	adds	r3, r7, #3
 8005414:	2201      	movs	r2, #1
 8005416:	4619      	mov	r1, r3
 8005418:	f7ff fed2 	bl	80051c0 <SEGGER_RTT_ReadNoLock>
 800541c:	4603      	mov	r3, r0
 800541e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd15      	ble.n	8005452 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 ffa5 	bl	8006378 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800542e:	e010      	b.n	8005452 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	b25b      	sxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	da0e      	bge.n	8005456 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <_HandleIncomingPacket+0xe0>)
 800543a:	7e1b      	ldrb	r3, [r3, #24]
 800543c:	4618      	mov	r0, r3
 800543e:	1cfb      	adds	r3, r7, #3
 8005440:	2201      	movs	r2, #1
 8005442:	4619      	mov	r1, r3
 8005444:	f7ff febc 	bl	80051c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005448:	e005      	b.n	8005456 <_HandleIncomingPacket+0xd6>
    }
  }
 800544a:	bf00      	nop
 800544c:	e004      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 800544e:	bf00      	nop
 8005450:	e002      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <_HandleIncomingPacket+0xd8>
      break;
 8005456:	bf00      	nop
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20019760 	.word	0x20019760

08005464 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	; 0x30
 8005468:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800546a:	2301      	movs	r3, #1
 800546c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
 800547e:	e00b      	b.n	8005498 <_TrySendOverflowPacket+0x34>
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	b2da      	uxtb	r2, r3
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	62f9      	str	r1, [r7, #44]	; 0x2c
 800548a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	09db      	lsrs	r3, r3, #7
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b7f      	cmp	r3, #127	; 0x7f
 800549c:	d8f0      	bhi.n	8005480 <_TrySendOverflowPacket+0x1c>
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <_TrySendOverflowPacket+0xe4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054b4:	4b23      	ldr	r3, [pc, #140]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	e00b      	b.n	80054e0 <_TrySendOverflowPacket+0x7c>
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	6279      	str	r1, [r7, #36]	; 0x24
 80054d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d8f0      	bhi.n	80054c8 <_TrySendOverflowPacket+0x64>
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	627a      	str	r2, [r7, #36]	; 0x24
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	4618      	mov	r0, r3
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	461a      	mov	r2, r3
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	4619      	mov	r1, r3
 8005508:	f7fa fe62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800550c:	4603      	mov	r3, r0
 800550e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005510:	f7ff fdee 	bl	80050f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	3b01      	subs	r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e004      	b.n	8005538 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	3301      	adds	r3, #1
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <_TrySendOverflowPacket+0xe0>)
 8005536:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005538:	693b      	ldr	r3, [r7, #16]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3730      	adds	r7, #48	; 0x30
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20019760 	.word	0x20019760
 8005548:	e0001004 	.word	0xe0001004

0800554c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005558:	4b6d      	ldr	r3, [pc, #436]	; (8005710 <_SendPacket+0x1c4>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d010      	beq.n	8005582 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005560:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <_SendPacket+0x1c4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80a5 	beq.w	80056b4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800556a:	4b69      	ldr	r3, [pc, #420]	; (8005710 <_SendPacket+0x1c4>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d109      	bne.n	8005586 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005572:	f7ff ff77 	bl	8005464 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005576:	4b66      	ldr	r3, [pc, #408]	; (8005710 <_SendPacket+0x1c4>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	f040 809c 	bne.w	80056b8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005580:	e001      	b.n	8005586 <_SendPacket+0x3a>
    goto Send;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <_SendPacket+0x3c>
Send:
 8005586:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b1f      	cmp	r3, #31
 800558c:	d809      	bhi.n	80055a2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800558e:	4b60      	ldr	r3, [pc, #384]	; (8005710 <_SendPacket+0x1c4>)
 8005590:	69da      	ldr	r2, [r3, #28]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 808d 	bne.w	80056bc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b17      	cmp	r3, #23
 80055a6:	d807      	bhi.n	80055b8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e03d      	b.n	8005634 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b7f      	cmp	r3, #127	; 0x7f
 80055c4:	d912      	bls.n	80055ec <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	09da      	lsrs	r2, r3, #7
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	3a01      	subs	r2, #1
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e006      	b.n	80055fa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b7f      	cmp	r3, #127	; 0x7f
 80055fe:	d912      	bls.n	8005626 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	09da      	lsrs	r2, r3, #7
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	3a01      	subs	r2, #1
 8005618:	60fa      	str	r2, [r7, #12]
 800561a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e006      	b.n	8005634 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3b01      	subs	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005634:	4b37      	ldr	r3, [pc, #220]	; (8005714 <_SendPacket+0x1c8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800563a:	4b35      	ldr	r3, [pc, #212]	; (8005710 <_SendPacket+0x1c4>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	e00b      	b.n	8005666 <_SendPacket+0x11a>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	6279      	str	r1, [r7, #36]	; 0x24
 8005658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	09db      	lsrs	r3, r3, #7
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2b7f      	cmp	r3, #127	; 0x7f
 800566a:	d8f0      	bhi.n	800564e <_SendPacket+0x102>
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	627a      	str	r2, [r7, #36]	; 0x24
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800567c:	4b24      	ldr	r3, [pc, #144]	; (8005710 <_SendPacket+0x1c4>)
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	4618      	mov	r0, r3
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	461a      	mov	r2, r3
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	f7fa fda0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005690:	4603      	mov	r3, r0
 8005692:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005694:	f7ff fd2c 	bl	80050f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800569e:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <_SendPacket+0x1c4>)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	60d3      	str	r3, [r2, #12]
 80056a4:	e00b      	b.n	80056be <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <_SendPacket+0x1c4>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <_SendPacket+0x1c4>)
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e004      	b.n	80056be <_SendPacket+0x172>
    goto SendDone;
 80056b4:	bf00      	nop
 80056b6:	e002      	b.n	80056be <_SendPacket+0x172>
      goto SendDone;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <_SendPacket+0x172>
      goto SendDone;
 80056bc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <_SendPacket+0x1c4>)
 80056c0:	7e1b      	ldrb	r3, [r3, #24]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4a14      	ldr	r2, [pc, #80]	; (8005718 <_SendPacket+0x1cc>)
 80056c6:	460b      	mov	r3, r1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	440b      	add	r3, r1
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	336c      	adds	r3, #108	; 0x6c
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <_SendPacket+0x1c4>)
 80056d6:	7e1b      	ldrb	r3, [r3, #24]
 80056d8:	4618      	mov	r0, r3
 80056da:	490f      	ldr	r1, [pc, #60]	; (8005718 <_SendPacket+0x1cc>)
 80056dc:	4603      	mov	r3, r0
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4403      	add	r3, r0
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3370      	adds	r3, #112	; 0x70
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d00b      	beq.n	8005706 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <_SendPacket+0x1c4>)
 80056f0:	789b      	ldrb	r3, [r3, #2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <_SendPacket+0x1c4>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056fc:	f7ff fe40 	bl	8005380 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <_SendPacket+0x1c4>)
 8005702:	2200      	movs	r2, #0
 8005704:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005706:	bf00      	nop
 8005708:	3728      	adds	r7, #40	; 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20019760 	.word	0x20019760
 8005714:	e0001004 	.word	0xe0001004
 8005718:	200192a8 	.word	0x200192a8

0800571c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005724:	f3ef 8311 	mrs	r3, BASEPRI
 8005728:	f04f 0120 	mov.w	r1, #32
 800572c:	f381 8811 	msr	BASEPRI, r1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4808      	ldr	r0, [pc, #32]	; (8005754 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005734:	f7ff fe17 	bl	8005366 <_PreparePacket>
 8005738:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68b8      	ldr	r0, [r7, #8]
 8005740:	f7ff ff04 	bl	800554c <_SendPacket>
  RECORD_END();
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f383 8811 	msr	BASEPRI, r3
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20019790 	.word	0x20019790

08005758 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005762:	f3ef 8311 	mrs	r3, BASEPRI
 8005766:	f04f 0120 	mov.w	r1, #32
 800576a:	f381 8811 	msr	BASEPRI, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	4816      	ldr	r0, [pc, #88]	; (80057cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005772:	f7ff fdf8 	bl	8005366 <_PreparePacket>
 8005776:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e00b      	b.n	800579e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1c59      	adds	r1, r3, #1
 800578e:	61f9      	str	r1, [r7, #28]
 8005790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b7f      	cmp	r3, #127	; 0x7f
 80057a2:	d8f0      	bhi.n	8005786 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	61fa      	str	r2, [r7, #28]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	6938      	ldr	r0, [r7, #16]
 80057ba:	f7ff fec7 	bl	800554c <_SendPacket>
  RECORD_END();
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f383 8811 	msr	BASEPRI, r3
}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20019790 	.word	0x20019790

080057d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	; 0x30
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057dc:	f3ef 8311 	mrs	r3, BASEPRI
 80057e0:	f04f 0120 	mov.w	r1, #32
 80057e4:	f381 8811 	msr	BASEPRI, r1
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	4825      	ldr	r0, [pc, #148]	; (8005880 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057ec:	f7ff fdbb 	bl	8005366 <_PreparePacket>
 80057f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	62f9      	str	r1, [r7, #44]	; 0x2c
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	e00b      	b.n	8005850 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	6279      	str	r1, [r7, #36]	; 0x24
 8005842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2b7f      	cmp	r3, #127	; 0x7f
 8005854:	d8f0      	bhi.n	8005838 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	627a      	str	r2, [r7, #36]	; 0x24
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	6979      	ldr	r1, [r7, #20]
 800586a:	69b8      	ldr	r0, [r7, #24]
 800586c:	f7ff fe6e 	bl	800554c <_SendPacket>
  RECORD_END();
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f383 8811 	msr	BASEPRI, r3
}
 8005876:	bf00      	nop
 8005878:	3730      	adds	r7, #48	; 0x30
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20019790 	.word	0x20019790

08005884 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	; 0x38
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005892:	f3ef 8311 	mrs	r3, BASEPRI
 8005896:	f04f 0120 	mov.w	r1, #32
 800589a:	f381 8811 	msr	BASEPRI, r1
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	4832      	ldr	r0, [pc, #200]	; (800596c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058a2:	f7ff fd60 	bl	8005366 <_PreparePacket>
 80058a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
 80058b4:	e00b      	b.n	80058ce <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	1c59      	adds	r1, r3, #1
 80058be:	6379      	str	r1, [r7, #52]	; 0x34
 80058c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	09db      	lsrs	r3, r3, #7
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	2b7f      	cmp	r3, #127	; 0x7f
 80058d2:	d8f0      	bhi.n	80058b6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	637a      	str	r2, [r7, #52]	; 0x34
 80058da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6279      	str	r1, [r7, #36]	; 0x24
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	627a      	str	r2, [r7, #36]	; 0x24
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff fdf7 	bl	800554c <_SendPacket>
  RECORD_END();
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f383 8811 	msr	BASEPRI, r3
}
 8005964:	bf00      	nop
 8005966:	3738      	adds	r7, #56	; 0x38
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20019790 	.word	0x20019790

08005970 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b090      	sub	sp, #64	; 0x40
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800597e:	f3ef 8311 	mrs	r3, BASEPRI
 8005982:	f04f 0120 	mov.w	r1, #32
 8005986:	f381 8811 	msr	BASEPRI, r1
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	4840      	ldr	r0, [pc, #256]	; (8005a90 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800598e:	f7ff fcea 	bl	8005366 <_PreparePacket>
 8005992:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a0:	e00b      	b.n	80059ba <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	09db      	lsrs	r3, r3, #7
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b7f      	cmp	r3, #127	; 0x7f
 80059be:	d8f0      	bhi.n	80059a2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	637b      	str	r3, [r7, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
 80059d8:	e00b      	b.n	80059f2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	6379      	str	r1, [r7, #52]	; 0x34
 80059e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	09db      	lsrs	r3, r3, #7
 80059f0:	633b      	str	r3, [r7, #48]	; 0x30
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b7f      	cmp	r3, #127	; 0x7f
 80059f6:	d8f0      	bhi.n	80059da <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	637a      	str	r2, [r7, #52]	; 0x34
 80059fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	e00b      	b.n	8005a2a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2e:	d8f0      	bhi.n	8005a12 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	e00b      	b.n	8005a62 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	6279      	str	r1, [r7, #36]	; 0x24
 8005a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b7f      	cmp	r3, #127	; 0x7f
 8005a66:	d8f0      	bhi.n	8005a4a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	69b8      	ldr	r0, [r7, #24]
 8005a7e:	f7ff fd65 	bl	800554c <_SendPacket>
  RECORD_END();
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f383 8811 	msr	BASEPRI, r3
}
 8005a88:	bf00      	nop
 8005a8a:	3740      	adds	r7, #64	; 0x40
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20019790 	.word	0x20019790

08005a94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a9a:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa4:	f04f 0120 	mov.w	r1, #32
 8005aa8:	f381 8811 	msr	BASEPRI, r1
 8005aac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005aae:	4b54      	ldr	r3, [pc, #336]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	4953      	ldr	r1, [pc, #332]	; (8005c04 <SEGGER_SYSVIEW_Start+0x170>)
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fa fb8a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005ac2:	f7ff fb15 	bl	80050f0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ac6:	200a      	movs	r0, #10
 8005ac8:	f7ff fe28 	bl	800571c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005acc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad0:	f04f 0120 	mov.w	r1, #32
 8005ad4:	f381 8811 	msr	BASEPRI, r1
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	484b      	ldr	r0, [pc, #300]	; (8005c08 <SEGGER_SYSVIEW_Start+0x174>)
 8005adc:	f7ff fc43 	bl	8005366 <_PreparePacket>
 8005ae0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_Start+0x76>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_Start+0x5e>
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	e00b      	b.n	8005b44 <SEGGER_SYSVIEW_Start+0xb0>
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	6279      	str	r1, [r7, #36]	; 0x24
 8005b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	09db      	lsrs	r3, r3, #7
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	2b7f      	cmp	r3, #127	; 0x7f
 8005b48:	d8f0      	bhi.n	8005b2c <SEGGER_SYSVIEW_Start+0x98>
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <SEGGER_SYSVIEW_Start+0xea>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	61f9      	str	r1, [r7, #28]
 8005b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b7f      	cmp	r3, #127	; 0x7f
 8005b82:	d8f0      	bhi.n	8005b66 <SEGGER_SYSVIEW_Start+0xd2>
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	61fa      	str	r2, [r7, #28]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e00b      	b.n	8005bb6 <SEGGER_SYSVIEW_Start+0x122>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	6179      	str	r1, [r7, #20]
 8005ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	09db      	lsrs	r3, r3, #7
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bba:	d8f0      	bhi.n	8005b9e <SEGGER_SYSVIEW_Start+0x10a>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	617a      	str	r2, [r7, #20]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bcc:	2218      	movs	r2, #24
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fcbb 	bl	800554c <_SendPacket>
      RECORD_END();
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005bea:	f000 f9c7 	bl	8005f7c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005bee:	f000 f9b1 	bl	8005f54 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005bf2:	f000 fc5f 	bl	80064b4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005bf6:	bf00      	nop
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20019760 	.word	0x20019760
 8005c04:	0800673c 	.word	0x0800673c
 8005c08:	20019790 	.word	0x20019790

08005c0c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	f04f 0120 	mov.w	r1, #32
 8005c1a:	f381 8811 	msr	BASEPRI, r1
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	480b      	ldr	r0, [pc, #44]	; (8005c50 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c22:	f7ff fba0 	bl	8005366 <_PreparePacket>
 8005c26:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c30:	220b      	movs	r2, #11
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6838      	ldr	r0, [r7, #0]
 8005c36:	f7ff fc89 	bl	800554c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f383 8811 	msr	BASEPRI, r3
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20019790 	.word	0x20019790
 8005c54:	20019760 	.word	0x20019760

08005c58 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	; 0x30
 8005c5c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c62:	f04f 0120 	mov.w	r1, #32
 8005c66:	f381 8811 	msr	BASEPRI, r1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	4845      	ldr	r0, [pc, #276]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c6e:	f7ff fb7a 	bl	8005366 <_PreparePacket>
 8005c72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7c:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	e00b      	b.n	8005cd6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	6279      	str	r1, [r7, #36]	; 0x24
 8005cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	09db      	lsrs	r3, r3, #7
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cda:	d8f0      	bhi.n	8005cbe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e00b      	b.n	8005d10 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	61f9      	str	r1, [r7, #28]
 8005d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b7f      	cmp	r3, #127	; 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	61fa      	str	r2, [r7, #28]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e00b      	b.n	8005d48 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	6179      	str	r1, [r7, #20]
 8005d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4c:	d8f0      	bhi.n	8005d30 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	617a      	str	r2, [r7, #20]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d5e:	2218      	movs	r2, #24
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	68b8      	ldr	r0, [r7, #8]
 8005d64:	f7ff fbf2 	bl	800554c <_SendPacket>
  RECORD_END();
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	4798      	blx	r3
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20019790 	.word	0x20019790
 8005d88:	20019760 	.word	0x20019760

08005d8c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b092      	sub	sp, #72	; 0x48
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d94:	f3ef 8311 	mrs	r3, BASEPRI
 8005d98:	f04f 0120 	mov.w	r1, #32
 8005d9c:	f381 8811 	msr	BASEPRI, r1
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	486a      	ldr	r0, [pc, #424]	; (8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005da4:	f7ff fadf 	bl	8005366 <_PreparePacket>
 8005da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b66      	ldr	r3, [pc, #408]	; (8005f50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	6479      	str	r1, [r7, #68]	; 0x44
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	647a      	str	r2, [r7, #68]	; 0x44
 8005de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df8:	e00b      	b.n	8005e12 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	09db      	lsrs	r3, r3, #7
 8005e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	2b7f      	cmp	r3, #127	; 0x7f
 8005e16:	d8f0      	bhi.n	8005dfa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	4619      	mov	r1, r3
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff fa4b 	bl	80052cc <_EncodeStr>
 8005e36:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e38:	2209      	movs	r2, #9
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	6938      	ldr	r0, [r7, #16]
 8005e3e:	f7ff fb85 	bl	800554c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
 8005e56:	e00b      	b.n	8005e70 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	6379      	str	r1, [r7, #52]	; 0x34
 8005e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	637a      	str	r2, [r7, #52]	; 0x34
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e90:	e00b      	b.n	8005eaa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	2b7f      	cmp	r3, #127	; 0x7f
 8005eae:	d8f0      	bhi.n	8005e92 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	623b      	str	r3, [r7, #32]
 8005eca:	e00b      	b.n	8005ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	09db      	lsrs	r3, r3, #7
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee8:	d8f0      	bhi.n	8005ecc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e00b      	b.n	8005f1c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	61f9      	str	r1, [r7, #28]
 8005f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	09db      	lsrs	r3, r3, #7
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f20:	d8f0      	bhi.n	8005f04 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f32:	2215      	movs	r2, #21
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	6938      	ldr	r0, [r7, #16]
 8005f38:	f7ff fb08 	bl	800554c <_SendPacket>
  RECORD_END();
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f383 8811 	msr	BASEPRI, r3
}
 8005f42:	bf00      	nop
 8005f44:	3748      	adds	r7, #72	; 0x48
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20019790 	.word	0x20019790
 8005f50:	20019760 	.word	0x20019760

08005f54 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f6a:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4798      	blx	r3
  }
}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20019760 	.word	0x20019760

08005f7c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01a      	beq.n	8005fc0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4798      	blx	r3
 8005f9c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005fa0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	000a      	movs	r2, r1
 8005fb0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	200d      	movs	r0, #13
 8005fba:	f7ff fc09 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x2>
 8005fbe:	e006      	b.n	8005fce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	200c      	movs	r0, #12
 8005fc8:	f7ff fbc6 	bl	8005758 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd90      	pop	{r4, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20019760 	.word	0x20019760
 8005fdc:	e0001004 	.word	0xe0001004

08005fe0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fea:	f04f 0120 	mov.w	r1, #32
 8005fee:	f381 8811 	msr	BASEPRI, r1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	4819      	ldr	r0, [pc, #100]	; (800605c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005ff6:	f7ff f9b6 	bl	8005366 <_PreparePacket>
 8005ffa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006000:	4b17      	ldr	r3, [pc, #92]	; (8006060 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006008:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e00b      	b.n	800602c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	6179      	str	r1, [r7, #20]
 800601e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	09db      	lsrs	r3, r3, #7
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b7f      	cmp	r3, #127	; 0x7f
 8006030:	d8f0      	bhi.n	8006014 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	617a      	str	r2, [r7, #20]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006042:	2202      	movs	r2, #2
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f7ff fa80 	bl	800554c <_SendPacket>
  RECORD_END();
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f383 8811 	msr	BASEPRI, r3
}
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20019790 	.word	0x20019790
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800606a:	f3ef 8311 	mrs	r3, BASEPRI
 800606e:	f04f 0120 	mov.w	r1, #32
 8006072:	f381 8811 	msr	BASEPRI, r1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	4807      	ldr	r0, [pc, #28]	; (8006098 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800607a:	f7ff f974 	bl	8005366 <_PreparePacket>
 800607e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006080:	2203      	movs	r2, #3
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6838      	ldr	r0, [r7, #0]
 8006086:	f7ff fa61 	bl	800554c <_SendPacket>
  RECORD_END();
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f383 8811 	msr	BASEPRI, r3
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20019790 	.word	0x20019790

0800609c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060a2:	f3ef 8311 	mrs	r3, BASEPRI
 80060a6:	f04f 0120 	mov.w	r1, #32
 80060aa:	f381 8811 	msr	BASEPRI, r1
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	4807      	ldr	r0, [pc, #28]	; (80060d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80060b2:	f7ff f958 	bl	8005366 <_PreparePacket>
 80060b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80060b8:	2212      	movs	r2, #18
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f7ff fa45 	bl	800554c <_SendPacket>
  RECORD_END();
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f383 8811 	msr	BASEPRI, r3
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20019790 	.word	0x20019790

080060d4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	f04f 0120 	mov.w	r1, #32
 80060e2:	f381 8811 	msr	BASEPRI, r1
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	4807      	ldr	r0, [pc, #28]	; (8006108 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060ea:	f7ff f93c 	bl	8005366 <_PreparePacket>
 80060ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80060f0:	2211      	movs	r2, #17
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6838      	ldr	r0, [r7, #0]
 80060f6:	f7ff fa29 	bl	800554c <_SendPacket>
  RECORD_END();
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20019790 	.word	0x20019790

0800610c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006114:	f3ef 8311 	mrs	r3, BASEPRI
 8006118:	f04f 0120 	mov.w	r1, #32
 800611c:	f381 8811 	msr	BASEPRI, r1
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	4819      	ldr	r0, [pc, #100]	; (8006188 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006124:	f7ff f91f 	bl	8005366 <_PreparePacket>
 8006128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800612e:	4b17      	ldr	r3, [pc, #92]	; (800618c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e00b      	b.n	800615a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	61f9      	str	r1, [r7, #28]
 800614c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b7f      	cmp	r3, #127	; 0x7f
 800615e:	d8f0      	bhi.n	8006142 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006170:	2208      	movs	r2, #8
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6938      	ldr	r0, [r7, #16]
 8006176:	f7ff f9e9 	bl	800554c <_SendPacket>
  RECORD_END();
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f383 8811 	msr	BASEPRI, r3
}
 8006180:	bf00      	nop
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20019790 	.word	0x20019790
 800618c:	20019760 	.word	0x20019760

08006190 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006198:	f3ef 8311 	mrs	r3, BASEPRI
 800619c:	f04f 0120 	mov.w	r1, #32
 80061a0:	f381 8811 	msr	BASEPRI, r1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	4819      	ldr	r0, [pc, #100]	; (800620c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061a8:	f7ff f8dd 	bl	8005366 <_PreparePacket>
 80061ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	61f9      	str	r1, [r7, #28]
 80061d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80061f4:	2204      	movs	r2, #4
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	6938      	ldr	r0, [r7, #16]
 80061fa:	f7ff f9a7 	bl	800554c <_SendPacket>
  RECORD_END();
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f383 8811 	msr	BASEPRI, r3
}
 8006204:	bf00      	nop
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20019790 	.word	0x20019790
 8006210:	20019760 	.word	0x20019760

08006214 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	f04f 0120 	mov.w	r1, #32
 8006224:	f381 8811 	msr	BASEPRI, r1
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	4819      	ldr	r0, [pc, #100]	; (8006290 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800622c:	f7ff f89b 	bl	8005366 <_PreparePacket>
 8006230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006236:	4b17      	ldr	r3, [pc, #92]	; (8006294 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e00b      	b.n	8006262 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	61f9      	str	r1, [r7, #28]
 8006254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	09db      	lsrs	r3, r3, #7
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b7f      	cmp	r3, #127	; 0x7f
 8006266:	d8f0      	bhi.n	800624a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	61fa      	str	r2, [r7, #28]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006278:	2206      	movs	r2, #6
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	6938      	ldr	r0, [r7, #16]
 800627e:	f7ff f965 	bl	800554c <_SendPacket>
  RECORD_END();
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f383 8811 	msr	BASEPRI, r3
}
 8006288:	bf00      	nop
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20019790 	.word	0x20019790
 8006294:	20019760 	.word	0x20019760

08006298 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	f04f 0120 	mov.w	r1, #32
 80062aa:	f381 8811 	msr	BASEPRI, r1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	4827      	ldr	r0, [pc, #156]	; (8006350 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80062b2:	f7ff f858 	bl	8005366 <_PreparePacket>
 80062b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	e00b      	b.n	80062e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	6279      	str	r1, [r7, #36]	; 0x24
 80062da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b7f      	cmp	r3, #127	; 0x7f
 80062ec:	d8f0      	bhi.n	80062d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	627a      	str	r2, [r7, #36]	; 0x24
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	61f9      	str	r1, [r7, #28]
 8006312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	61bb      	str	r3, [r7, #24]
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006336:	2207      	movs	r2, #7
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	6938      	ldr	r0, [r7, #16]
 800633c:	f7ff f906 	bl	800554c <_SendPacket>
  RECORD_END();
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f383 8811 	msr	BASEPRI, r3
}
 8006346:	bf00      	nop
 8006348:	3728      	adds	r7, #40	; 0x28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20019790 	.word	0x20019790
 8006354:	20019760 	.word	0x20019760

08006358 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	1ad3      	subs	r3, r2, r3
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20019760 	.word	0x20019760

08006378 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06d      	beq.n	8006466 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006390:	2300      	movs	r3, #0
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
 8006394:	e008      	b.n	80063a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	3301      	adds	r3, #1
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d3f2      	bcc.n	8006396 <SEGGER_SYSVIEW_SendModule+0x1e>
 80063b0:	e000      	b.n	80063b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d055      	beq.n	8006466 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ba:	f3ef 8311 	mrs	r3, BASEPRI
 80063be:	f04f 0120 	mov.w	r1, #32
 80063c2:	f381 8811 	msr	BASEPRI, r1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	482a      	ldr	r0, [pc, #168]	; (8006474 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80063ca:	f7fe ffcc 	bl	8005366 <_PreparePacket>
 80063ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	623b      	str	r3, [r7, #32]
 80063dc:	e00b      	b.n	80063f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	6279      	str	r1, [r7, #36]	; 0x24
 80063e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	09db      	lsrs	r3, r3, #7
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2b7f      	cmp	r3, #127	; 0x7f
 80063fa:	d8f0      	bhi.n	80063de <SEGGER_SYSVIEW_SendModule+0x66>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	627a      	str	r2, [r7, #36]	; 0x24
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	61f9      	str	r1, [r7, #28]
 8006422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	61fa      	str	r2, [r7, #28]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	4619      	mov	r1, r3
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7fe ff3c 	bl	80052cc <_EncodeStr>
 8006454:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006456:	2216      	movs	r2, #22
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f7ff f876 	bl	800554c <_SendPacket>
      RECORD_END();
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006466:	bf00      	nop
 8006468:	3730      	adds	r7, #48	; 0x30
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20019788 	.word	0x20019788
 8006474:	20019790 	.word	0x20019790

08006478 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f2      	bne.n	800648c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20019788 	.word	0x20019788

080064b4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	4817      	ldr	r0, [pc, #92]	; (8006528 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80064ca:	f7fe ff4c 	bl	8005366 <_PreparePacket>
 80064ce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	e00b      	b.n	80064f8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	6179      	str	r1, [r7, #20]
 80064ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	09db      	lsrs	r3, r3, #7
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b7f      	cmp	r3, #127	; 0x7f
 80064fc:	d8f0      	bhi.n	80064e0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	617a      	str	r2, [r7, #20]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800650e:	221b      	movs	r2, #27
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	68b8      	ldr	r0, [r7, #8]
 8006514:	f7ff f81a 	bl	800554c <_SendPacket>
  RECORD_END();
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20019790 	.word	0x20019790
 800652c:	2001978c 	.word	0x2001978c

08006530 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006538:	f3ef 8311 	mrs	r3, BASEPRI
 800653c:	f04f 0120 	mov.w	r1, #32
 8006540:	f381 8811 	msr	BASEPRI, r1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	4827      	ldr	r0, [pc, #156]	; (80065e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006548:	f7fe ff0d 	bl	8005366 <_PreparePacket>
 800654c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800654e:	2280      	movs	r2, #128	; 0x80
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	6938      	ldr	r0, [r7, #16]
 8006554:	f7fe feba 	bl	80052cc <_EncodeStr>
 8006558:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
 800655e:	2301      	movs	r3, #1
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	e00b      	b.n	800657c <SEGGER_SYSVIEW_Warn+0x4c>
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	6279      	str	r1, [r7, #36]	; 0x24
 800656e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	09db      	lsrs	r3, r3, #7
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	2b7f      	cmp	r3, #127	; 0x7f
 8006580:	d8f0      	bhi.n	8006564 <SEGGER_SYSVIEW_Warn+0x34>
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	627a      	str	r2, [r7, #36]	; 0x24
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	2300      	movs	r3, #0
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	e00b      	b.n	80065b4 <SEGGER_SYSVIEW_Warn+0x84>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	61f9      	str	r1, [r7, #28]
 80065a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	09db      	lsrs	r3, r3, #7
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b7f      	cmp	r3, #127	; 0x7f
 80065b8:	d8f0      	bhi.n	800659c <SEGGER_SYSVIEW_Warn+0x6c>
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065ca:	221a      	movs	r2, #26
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	6938      	ldr	r0, [r7, #16]
 80065d0:	f7fe ffbc 	bl	800554c <_SendPacket>
  RECORD_END();
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f383 8811 	msr	BASEPRI, r3
}
 80065da:	bf00      	nop
 80065dc:	3728      	adds	r7, #40	; 0x28
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20019790 	.word	0x20019790

080065e8 <__libc_init_array>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4d0d      	ldr	r5, [pc, #52]	; (8006620 <__libc_init_array+0x38>)
 80065ec:	4c0d      	ldr	r4, [pc, #52]	; (8006624 <__libc_init_array+0x3c>)
 80065ee:	1b64      	subs	r4, r4, r5
 80065f0:	10a4      	asrs	r4, r4, #2
 80065f2:	2600      	movs	r6, #0
 80065f4:	42a6      	cmp	r6, r4
 80065f6:	d109      	bne.n	800660c <__libc_init_array+0x24>
 80065f8:	4d0b      	ldr	r5, [pc, #44]	; (8006628 <__libc_init_array+0x40>)
 80065fa:	4c0c      	ldr	r4, [pc, #48]	; (800662c <__libc_init_array+0x44>)
 80065fc:	f000 f83e 	bl	800667c <_init>
 8006600:	1b64      	subs	r4, r4, r5
 8006602:	10a4      	asrs	r4, r4, #2
 8006604:	2600      	movs	r6, #0
 8006606:	42a6      	cmp	r6, r4
 8006608:	d105      	bne.n	8006616 <__libc_init_array+0x2e>
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006610:	4798      	blx	r3
 8006612:	3601      	adds	r6, #1
 8006614:	e7ee      	b.n	80065f4 <__libc_init_array+0xc>
 8006616:	f855 3b04 	ldr.w	r3, [r5], #4
 800661a:	4798      	blx	r3
 800661c:	3601      	adds	r6, #1
 800661e:	e7f2      	b.n	8006606 <__libc_init_array+0x1e>
 8006620:	08006750 	.word	0x08006750
 8006624:	08006750 	.word	0x08006750
 8006628:	08006750 	.word	0x08006750
 800662c:	08006754 	.word	0x08006754

08006630 <memcmp>:
 8006630:	b510      	push	{r4, lr}
 8006632:	3901      	subs	r1, #1
 8006634:	4402      	add	r2, r0
 8006636:	4290      	cmp	r0, r2
 8006638:	d101      	bne.n	800663e <memcmp+0xe>
 800663a:	2000      	movs	r0, #0
 800663c:	e005      	b.n	800664a <memcmp+0x1a>
 800663e:	7803      	ldrb	r3, [r0, #0]
 8006640:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006644:	42a3      	cmp	r3, r4
 8006646:	d001      	beq.n	800664c <memcmp+0x1c>
 8006648:	1b18      	subs	r0, r3, r4
 800664a:	bd10      	pop	{r4, pc}
 800664c:	3001      	adds	r0, #1
 800664e:	e7f2      	b.n	8006636 <memcmp+0x6>

08006650 <memcpy>:
 8006650:	440a      	add	r2, r1
 8006652:	4291      	cmp	r1, r2
 8006654:	f100 33ff 	add.w	r3, r0, #4294967295
 8006658:	d100      	bne.n	800665c <memcpy+0xc>
 800665a:	4770      	bx	lr
 800665c:	b510      	push	{r4, lr}
 800665e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006666:	4291      	cmp	r1, r2
 8006668:	d1f9      	bne.n	800665e <memcpy+0xe>
 800666a:	bd10      	pop	{r4, pc}

0800666c <memset>:
 800666c:	4402      	add	r2, r0
 800666e:	4603      	mov	r3, r0
 8006670:	4293      	cmp	r3, r2
 8006672:	d100      	bne.n	8006676 <memset+0xa>
 8006674:	4770      	bx	lr
 8006676:	f803 1b01 	strb.w	r1, [r3], #1
 800667a:	e7f9      	b.n	8006670 <memset+0x4>

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr
