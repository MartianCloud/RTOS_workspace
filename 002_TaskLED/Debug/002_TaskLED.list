
002_TaskLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800695c  0800695c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006964  08006964  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0001a828  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a8a8  2001a8a8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013293  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1c  00000000  00000000  00033343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  00037388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245f5  00000000  00000000  00038418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014602  00000000  00000000  0005ca0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d863a  00000000  00000000  0007100f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149649  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005130  00000000  00000000  0014969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006724 	.word	0x08006724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006724 	.word	0x08006724

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192c4 	.word	0x200192c4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc27 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800057a:	482d      	ldr	r0, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	f003 fa28 	bl	80039d0 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <main+0xcc>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058c:	f003 f84a 	bl	8003624 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 1, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f001 ff04 	bl	80023ae <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f001 feea 	bl	80023ae <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 1, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f001 fed1 	bl	80023ae <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800062a:	f002 f823 	bl	8002674 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	0007a120 	.word	0x0007a120
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0800673c 	.word	0x0800673c
 800063c:	080009e1 	.word	0x080009e1
 8000640:	0800674c 	.word	0x0800674c
 8000644:	08000a49 	.word	0x08000a49
 8000648:	0800675c 	.word	0x0800675c
 800064c:	08000a15 	.word	0x08000a15

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fb6c 	bl	8005d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fe8b 	bl	80013f0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9de 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f8ec 	bl	80018e0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9c7 	bl	8000aa0 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fdce 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fdc9 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fdc3 	bl	8001388 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fc19 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fc0b 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fbfb 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fbee 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fbde 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fbce 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fbc2 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fbb1 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fba2 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fb91 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fb84 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fb73 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fb67 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fb56 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fb49 	bl	8001050 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <led_green_handler+0x28>)
 80009ea:	f005 f8af 	bl	8005b4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <led_green_handler+0x2c>)
 80009f4:	f000 fce1 	bl	80013ba <HAL_GPIO_TogglePin>
		printf("Hello from Task-1 \r\n");
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <led_green_handler+0x30>)
 80009fa:	f005 fa15 	bl	8005e28 <puts>
		HAL_Delay(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f000 fa1f 	bl	8000e44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a06:	e7ef      	b.n	80009e8 <led_green_handler+0x8>
 8000a08:	0800676c 	.word	0x0800676c
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	08006780 	.word	0x08006780

08000a14 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <led_orange_handler+0x28>)
 8000a1e:	f005 f895 	bl	8005b4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <led_orange_handler+0x2c>)
 8000a28:	f000 fcc7 	bl	80013ba <HAL_GPIO_TogglePin>
		printf("Hello from Task-2 \r\n");
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <led_orange_handler+0x30>)
 8000a2e:	f005 f9fb 	bl	8005e28 <puts>
		HAL_Delay(800);
 8000a32:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a36:	f000 fa05 	bl	8000e44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a3a:	e7ef      	b.n	8000a1c <led_orange_handler+0x8>
 8000a3c:	08006794 	.word	0x08006794
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	080067a8 	.word	0x080067a8

08000a48 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <led_red_handler+0x28>)
 8000a52:	f005 f87b 	bl	8005b4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <led_red_handler+0x2c>)
 8000a5c:	f000 fcad 	bl	80013ba <HAL_GPIO_TogglePin>
		printf("Hello from Task-3 \r\n");
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <led_red_handler+0x30>)
 8000a62:	f005 f9e1 	bl	8005e28 <puts>
		HAL_Delay(400);
 8000a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a6a:	f000 f9eb 	bl	8000e44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a6e:	e7ef      	b.n	8000a50 <led_red_handler+0x8>
 8000a70:	080067bc 	.word	0x080067bc
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	080067d0 	.word	0x080067d0

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 f9b9 	bl	8000e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aee:	f002 f9e3 	bl	8002eb8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a32      	ldr	r2, [pc, #200]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f8de 	bl	8001cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f8c3 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f8bf 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_InitTick+0xe8>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3b01      	subs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_InitTick+0xec>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_InitTick+0xf0>)
 8000b6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xec>)
 8000b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_InitTick+0xec>)
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_InitTick+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <HAL_InitTick+0xec>)
 8000b8e:	f001 f8e5 	bl	8001d5c <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d11b      	bne.n	8000bd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <HAL_InitTick+0xec>)
 8000ba2:	f001 f935 	bl	8001e10 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d111      	bne.n	8000bd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb4:	2036      	movs	r0, #54	; 0x36
 8000bb6:	f000 fa3d 	bl	8001034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d808      	bhi.n	8000bd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2036      	movs	r0, #54	; 0x36
 8000bc6:	f000 fa19 	bl	8000ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0xf4>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e002      	b.n	8000bd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	2000009c 	.word	0x2000009c
 8000bf0:	40001000 	.word	0x40001000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f001 f961 	bl	8001ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000009c 	.word	0x2000009c

08000c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
  }

  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f004 ffce 	bl	8005cac <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200000e4 	.word	0x200000e4
 8000d44:	2001a8a8 	.word	0x2001a8a8

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f004 ff8d 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fbe3 	bl	8000568 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000db0:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 8000db4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000db8:	2001a8a8 	.word	0x2001a8a8

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8fc 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fe86 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe5c 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200000e8 	.word	0x200000e8

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200000e8 	.word	0x200000e8

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e16b      	b.n	8001344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 815a 	bne.w	800133e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b4 	beq.w	800133e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a5f      	ldr	r2, [pc, #380]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a5b      	ldr	r2, [pc, #364]	; (8001360 <HAL_GPIO_Init+0x310>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_GPIO_Init+0x314>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x226>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_GPIO_Init+0x318>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x222>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x31c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x21e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x320>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x324>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <HAL_GPIO_Init+0x328>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x20a>
 8001256:	2307      	movs	r3, #7
 8001258:	e00e      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125a:	2308      	movs	r3, #8
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125e:	2306      	movs	r3, #6
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x310>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_GPIO_Init+0x334>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae90 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021c00 	.word	0x40021c00
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	400b      	ands	r3, r1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e267      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d075      	beq.n	80014fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d00c      	beq.n	8001434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141a:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	2b08      	cmp	r3, #8
 8001424:	d112      	bne.n	800144c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001432:	d10b      	bne.n	800144c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d05b      	beq.n	80014f8 <HAL_RCC_OscConfig+0x108>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d157      	bne.n	80014f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e242      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x74>
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a75      	ldr	r2, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0xb0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x98>
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6f      	ldr	r2, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6c      	ldr	r2, [pc, #432]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xb0>
 8001488:	4b69      	ldr	r3, [pc, #420]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a68      	ldr	r2, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcc0 	bl	8000e2c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fcbc 	bl	8000e2c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e207      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0xc0>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fcac 	bl	8000e2c <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fca8 	bl	8000e2c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1f3      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0xe8>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x152>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1c7      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e03a      	b.n	80015ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_OscConfig+0x244>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7ff fc61 	bl	8000e2c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fc5d 	bl	8000e2c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e1a8      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4925      	ldr	r1, [pc, #148]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x244>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc40 	bl	8000e2c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc3c 	bl	8000e2c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e187      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d036      	beq.n	8001648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d016      	beq.n	8001610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x248>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fc20 	bl	8000e2c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc1c 	bl	8000e2c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e167      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x200>
 800160e:	e01b      	b.n	8001648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x248>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fc09 	bl	8000e2c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	e00e      	b.n	800163c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fc05 	bl	8000e2c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d907      	bls.n	800163c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e150      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
 8001630:	40023800 	.word	0x40023800
 8001634:	42470000 	.word	0x42470000
 8001638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ea      	bne.n	800161e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8097 	beq.w	8001784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a7c      	ldr	r2, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b77      	ldr	r3, [pc, #476]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b74      	ldr	r3, [pc, #464]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a73      	ldr	r2, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fbc5 	bl	8000e2c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff fbc1 	bl	8000e2c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e10c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x2ea>
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	4a63      	ldr	r2, [pc, #396]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	; 0x70
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x324>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x30c>
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a5b      	ldr	r2, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x324>
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fb86 	bl	8000e2c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fb82 	bl	8000e2c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0cb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ee      	beq.n	8001724 <HAL_RCC_OscConfig+0x334>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff fb70 	bl	8000e2c <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb6c 	bl	8000e2c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0b5      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ee      	bne.n	8001750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a1 	beq.w	80018d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d05c      	beq.n	8001854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d141      	bne.n	8001826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb40 	bl	8000e2c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fb3c 	bl	8000e2c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e087      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	491b      	ldr	r1, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb15 	bl	8000e2c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb11 	bl	8000e2c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e05c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x416>
 8001824:	e054      	b.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fafe 	bl	8000e2c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fafa 	bl	8000e2c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e045      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x444>
 8001852:	e03d      	b.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e038      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000
 8001868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x4ec>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d028      	beq.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d121      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d11a      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0cc      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d90c      	bls.n	800191c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b65      	ldr	r3, [pc, #404]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800193e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d044      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d119      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	2b03      	cmp	r3, #3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e067      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4934      	ldr	r1, [pc, #208]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff fa2c 	bl	8000e2c <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7ff fa28 	bl	8000e2c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e04f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d20c      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	490a      	ldr	r1, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f83a 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	080068b8 	.word	0x080068b8
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab0:	b094      	sub	sp, #80	; 0x50
 8001ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac4:	4b79      	ldr	r3, [pc, #484]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d00d      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x40>
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	f200 80e1 	bhi.w	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ade:	e0db      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ae4:	e0db      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aea:	e0d8      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b1e:	4622      	mov	r2, r4
 8001b20:	462b      	mov	r3, r5
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	0159      	lsls	r1, r3, #5
 8001b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b30:	0150      	lsls	r0, r2, #5
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4621      	mov	r1, r4
 8001b38:	1a51      	subs	r1, r2, r1
 8001b3a:	6139      	str	r1, [r7, #16]
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b50:	4659      	mov	r1, fp
 8001b52:	018b      	lsls	r3, r1, #6
 8001b54:	4651      	mov	r1, sl
 8001b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	018a      	lsls	r2, r1, #6
 8001b5e:	4651      	mov	r1, sl
 8001b60:	ebb2 0801 	subs.w	r8, r2, r1
 8001b64:	4659      	mov	r1, fp
 8001b66:	eb63 0901 	sbc.w	r9, r3, r1
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b7e:	4690      	mov	r8, r2
 8001b80:	4699      	mov	r9, r3
 8001b82:	4623      	mov	r3, r4
 8001b84:	eb18 0303 	adds.w	r3, r8, r3
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	eb49 0303 	adc.w	r3, r9, r3
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	024b      	lsls	r3, r1, #9
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba8:	4621      	mov	r1, r4
 8001baa:	024a      	lsls	r2, r1, #9
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bbc:	f7fe fb52 	bl	8000264 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc8:	e058      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be4:	4642      	mov	r2, r8
 8001be6:	464b      	mov	r3, r9
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	0159      	lsls	r1, r3, #5
 8001bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf6:	0150      	lsls	r0, r2, #5
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4641      	mov	r1, r8
 8001bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c02:	4649      	mov	r1, r9
 8001c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c20:	eb63 050b 	sbc.w	r5, r3, fp
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	00eb      	lsls	r3, r5, #3
 8001c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c32:	00e2      	lsls	r2, r4, #3
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	18e3      	adds	r3, r4, r3
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	464b      	mov	r3, r9
 8001c40:	eb45 0303 	adc.w	r3, r5, r3
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c52:	4629      	mov	r1, r5
 8001c54:	028b      	lsls	r3, r1, #10
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	028a      	lsls	r2, r1, #10
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c70:	f7fe faf8 	bl	8000264 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3750      	adds	r7, #80	; 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	080068c8 	.word	0x080068c8

08001cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	220f      	movs	r2, #15
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetClockConfig+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0207 	and.w	r2, r3, #7
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e041      	b.n	8001df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f839 	bl	8001dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 f9d8 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04e      	b.n	8001ec6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d01d      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_TIM_Base_Start_IT+0xdc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d010      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	e007      	b.n	8001ec4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40001800 	.word	0x40001800

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0202 	mvn.w	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8ee 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8e0 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8f1 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c4 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8b6 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8c7 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89a 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f88c 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f89d 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f870 	bl	8002114 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f862 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f873 	bl	8002128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0201 	mvn.w	r2, #1
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd04 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f902 	bl	80022a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f838 	bl	800213c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8cc 	bl	8002290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <TIM_Base_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3d      	ldr	r2, [pc, #244]	; (8002268 <TIM_Base_SetConfig+0x118>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <TIM_Base_SetConfig+0x11c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <TIM_Base_SetConfig+0x120>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <TIM_Base_SetConfig+0x124>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <TIM_Base_SetConfig+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d027      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <TIM_Base_SetConfig+0x118>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d023      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <TIM_Base_SetConfig+0x11c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <TIM_Base_SetConfig+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a29      	ldr	r2, [pc, #164]	; (8002274 <TIM_Base_SetConfig+0x124>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <TIM_Base_SetConfig+0x128>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <TIM_Base_SetConfig+0x12c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <TIM_Base_SetConfig+0x130>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0x134>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <TIM_Base_SetConfig+0x138>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <TIM_Base_SetConfig+0x13c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <TIM_Base_SetConfig+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0xf8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800
 8002284:	40001800 	.word	0x40001800
 8002288:	40001c00 	.word	0x40001c00
 800228c:	40002000 	.word	0x40002000

08002290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f103 0208 	add.w	r2, r3, #8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0208 	add.w	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6892      	ldr	r2, [r2, #8]
 8002370:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6852      	ldr	r2, [r2, #4]
 800237a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d103      	bne.n	800238e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b08c      	sub	sp, #48	; 0x30
 80023b2:	af04      	add	r7, sp, #16
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ff22 	bl	800320c <pvPortMalloc>
 80023c8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023d0:	2058      	movs	r0, #88	; 0x58
 80023d2:	f000 ff1b 	bl	800320c <pvPortMalloc>
 80023d6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
 80023e4:	e005      	b.n	80023f2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f000 fff0 	bl	80033cc <vPortFree>
 80023ec:	e001      	b.n	80023f2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023f8:	88fa      	ldrh	r2, [r7, #6]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9303      	str	r3, [sp, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f80e 	bl	8002430 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002414:	69f8      	ldr	r0, [r7, #28]
 8002416:	f000 f8a1 	bl	800255c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800241a:	2301      	movs	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e002      	b.n	8002426 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002426:	69bb      	ldr	r3, [r7, #24]
    }
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	21a5      	movs	r1, #165	; 0xa5
 800244a:	f003 fc77 	bl	8005d3c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002458:	3b01      	subs	r3, #1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f023 0307 	bic.w	r3, r3, #7
 8002466:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	617b      	str	r3, [r7, #20]
    }
 8002484:	bf00      	nop
 8002486:	e7fe      	b.n	8002486 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01f      	beq.n	80024ce <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e012      	b.n	80024ba <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	7819      	ldrb	r1, [r3, #0]
 800249c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	3334      	adds	r3, #52	; 0x34
 80024a4:	460a      	mov	r2, r1
 80024a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d9e9      	bls.n	8002494 <prvInitialiseNewTask+0x64>
 80024c0:	e000      	b.n	80024c4 <prvInitialiseNewTask+0x94>
            {
                break;
 80024c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024cc:	e003      	b.n	80024d6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d901      	bls.n	80024e0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024dc:	2304      	movs	r3, #4
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ea:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	2200      	movs	r2, #0
 80024f0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	3304      	adds	r3, #4
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fefe 	bl	80022f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	3318      	adds	r3, #24
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fef9 	bl	80022f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	f1c3 0205 	rsb	r2, r3, #5
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	3350      	adds	r3, #80	; 0x50
 8002520:	2204      	movs	r2, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fc09 	bl	8005d3c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	3354      	adds	r3, #84	; 0x54
 800252e:	2201      	movs	r2, #1
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fc02 	bl	8005d3c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	69b8      	ldr	r0, [r7, #24]
 800253e:	f000 fb8d 	bl	8002c5c <pxPortInitialiseStack>
 8002542:	4602      	mov	r2, r0
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002552:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002564:	f000 fd26 	bl	8002fb4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <prvAddNewTaskToReadyList+0xfc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <prvAddNewTaskToReadyList+0xfc>)
 8002570:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <prvAddNewTaskToReadyList+0x100>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800257a:	4a38      	ldr	r2, [pc, #224]	; (800265c <prvAddNewTaskToReadyList+0x100>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <prvAddNewTaskToReadyList+0xfc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d110      	bne.n	80025aa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002588:	f000 face 	bl	8002b28 <prvInitialiseTaskLists>
 800258c:	e00d      	b.n	80025aa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <prvAddNewTaskToReadyList+0x104>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <prvAddNewTaskToReadyList+0x100>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d802      	bhi.n	80025aa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <prvAddNewTaskToReadyList+0x100>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <prvAddNewTaskToReadyList+0x108>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <prvAddNewTaskToReadyList+0x108>)
 80025b2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <prvAddNewTaskToReadyList+0x108>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <prvAddNewTaskToReadyList+0x94>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f91f 	bl	8005808 <SEGGER_SYSVIEW_OnTaskCreate>
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	461d      	mov	r5, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461c      	mov	r4, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	1ae3      	subs	r3, r4, r3
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	462b      	mov	r3, r5
 80025ec:	f001 f8bc 	bl	8003768 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 f98c 	bl	8005910 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <prvAddNewTaskToReadyList+0x10c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <prvAddNewTaskToReadyList+0x10c>)
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <prvAddNewTaskToReadyList+0x110>)
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff fe76 	bl	8002312 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002626:	f000 fcf5 	bl	8003014 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <prvAddNewTaskToReadyList+0x104>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <prvAddNewTaskToReadyList+0x100>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	429a      	cmp	r2, r3
 800263e:	d207      	bcs.n	8002650 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <prvAddNewTaskToReadyList+0x114>)
 8002642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bdb0      	pop	{r4, r5, r7, pc}
 8002658:	200001c4 	.word	0x200001c4
 800265c:	200000ec 	.word	0x200000ec
 8002660:	200001d0 	.word	0x200001d0
 8002664:	200001e0 	.word	0x200001e0
 8002668:	200001cc 	.word	0x200001cc
 800266c:	200000f0 	.word	0x200000f0
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <vTaskStartScheduler+0x98>)
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	2282      	movs	r2, #130	; 0x82
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <vTaskStartScheduler+0x9c>)
 8002688:	4822      	ldr	r0, [pc, #136]	; (8002714 <vTaskStartScheduler+0xa0>)
 800268a:	f7ff fe90 	bl	80023ae <xTaskCreate>
 800268e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d124      	bne.n	80026e0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	60bb      	str	r3, [r7, #8]
    }
 80026a8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <vTaskStartScheduler+0xa4>)
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <vTaskStartScheduler+0xa8>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <vTaskStartScheduler+0xac>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <vTaskStartScheduler+0xb0>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <vTaskStartScheduler+0x98>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d102      	bne.n	80026d0 <vTaskStartScheduler+0x5c>
 80026ca:	f003 f881 	bl	80057d0 <SEGGER_SYSVIEW_OnIdle>
 80026ce:	e004      	b.n	80026da <vTaskStartScheduler+0x66>
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <vTaskStartScheduler+0xb0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 f8d9 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026da:	f000 fb4b 	bl	8002d74 <xPortStartScheduler>
 80026de:	e00e      	b.n	80026fe <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d10a      	bne.n	80026fe <vTaskStartScheduler+0x8a>
        __asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	607b      	str	r3, [r7, #4]
    }
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <vTaskStartScheduler+0xb4>)
 8002700:	681b      	ldr	r3, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200001e8 	.word	0x200001e8
 8002710:	080067e4 	.word	0x080067e4
 8002714:	08002af9 	.word	0x08002af9
 8002718:	200001e4 	.word	0x200001e4
 800271c:	200001d0 	.word	0x200001d0
 8002720:	200001c8 	.word	0x200001c8
 8002724:	200000ec 	.word	0x200000ec
 8002728:	2000000c 	.word	0x2000000c

0800272c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <vTaskSuspendAll+0x18>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a03      	ldr	r2, [pc, #12]	; (8002744 <vTaskSuspendAll+0x18>)
 8002738:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	200001ec 	.word	0x200001ec

08002748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002756:	4b43      	ldr	r3, [pc, #268]	; (8002864 <xTaskResumeAll+0x11c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xTaskResumeAll+0x2c>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	603b      	str	r3, [r7, #0]
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002774:	f000 fc1e 	bl	8002fb4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002778:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <xTaskResumeAll+0x11c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <xTaskResumeAll+0x11c>)
 8002780:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <xTaskResumeAll+0x11c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d165      	bne.n	8002856 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <xTaskResumeAll+0x120>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d061      	beq.n	8002856 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002792:	e032      	b.n	80027fa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <xTaskResumeAll+0x124>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3318      	adds	r3, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fdda 	bl	800235a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fdd5 	bl	800235a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f8ac 	bl	8005910 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <xTaskResumeAll+0x128>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <xTaskResumeAll+0x128>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <xTaskResumeAll+0x12c>)
 80027d8:	441a      	add	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7ff fd96 	bl	8002312 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <xTaskResumeAll+0x130>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <xTaskResumeAll+0x134>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <xTaskResumeAll+0x124>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1c8      	bne.n	8002794 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002808:	f000 fa0c 	bl	8002c24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <xTaskResumeAll+0x138>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002818:	f000 f848 	bl	80028ac <xTaskIncrementTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <xTaskResumeAll+0x134>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f1      	bne.n	8002818 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <xTaskResumeAll+0x138>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <xTaskResumeAll+0x134>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002842:	2301      	movs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <xTaskResumeAll+0x13c>)
 8002848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002856:	f000 fbdd 	bl	8003014 <vPortExitCritical>

    return xAlreadyYielded;
 800285a:	68bb      	ldr	r3, [r7, #8]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200001ec 	.word	0x200001ec
 8002868:	200001c4 	.word	0x200001c4
 800286c:	20000184 	.word	0x20000184
 8002870:	200001cc 	.word	0x200001cc
 8002874:	200000f0 	.word	0x200000f0
 8002878:	200000ec 	.word	0x200000ec
 800287c:	200001d8 	.word	0x200001d8
 8002880:	200001d4 	.word	0x200001d4
 8002884:	e000ed04 	.word	0xe000ed04

08002888 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800288e:	f000 fc7d 	bl	800318c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <xTaskGetTickCountFromISR+0x20>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800289c:	683b      	ldr	r3, [r7, #0]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001c8 	.word	0x200001c8

080028ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028b6:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <xTaskIncrementTick+0x14c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8092 	bne.w	80029e4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <xTaskIncrementTick+0x150>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028c8:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <xTaskIncrementTick+0x150>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d120      	bne.n	8002916 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <xTaskIncrementTick+0x154>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	603b      	str	r3, [r7, #0]
    }
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xTaskIncrementTick+0x46>
 80028f4:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <xTaskIncrementTick+0x154>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <xTaskIncrementTick+0x158>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <xTaskIncrementTick+0x154>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <xTaskIncrementTick+0x158>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <xTaskIncrementTick+0x15c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <xTaskIncrementTick+0x15c>)
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	f000 f987 	bl	8002c24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <xTaskIncrementTick+0x160>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d34c      	bcc.n	80029ba <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <xTaskIncrementTick+0x154>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <xTaskIncrementTick+0x160>)
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	601a      	str	r2, [r3, #0]
                    break;
 8002932:	e042      	b.n	80029ba <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <xTaskIncrementTick+0x154>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d203      	bcs.n	8002954 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800294c:	4a2f      	ldr	r2, [pc, #188]	; (8002a0c <xTaskIncrementTick+0x160>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002952:	e032      	b.n	80029ba <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3304      	adds	r3, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fcfe 	bl	800235a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3318      	adds	r3, #24
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fcf5 	bl	800235a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4618      	mov	r0, r3
 8002974:	f002 ffcc 	bl	8005910 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <xTaskIncrementTick+0x164>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <xTaskIncrementTick+0x164>)
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <xTaskIncrementTick+0x168>)
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3304      	adds	r3, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f7ff fcb6 	bl	8002312 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <xTaskIncrementTick+0x16c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3b5      	bcc.n	8002920 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b8:	e7b2      	b.n	8002920 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <xTaskIncrementTick+0x16c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4914      	ldr	r1, [pc, #80]	; (8002a14 <xTaskIncrementTick+0x168>)
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d901      	bls.n	80029d6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <xTaskIncrementTick+0x170>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e004      	b.n	80029ee <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <xTaskIncrementTick+0x174>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <xTaskIncrementTick+0x174>)
 80029ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200001ec 	.word	0x200001ec
 80029fc:	200001c8 	.word	0x200001c8
 8002a00:	2000017c 	.word	0x2000017c
 8002a04:	20000180 	.word	0x20000180
 8002a08:	200001dc 	.word	0x200001dc
 8002a0c:	200001e4 	.word	0x200001e4
 8002a10:	200001cc 	.word	0x200001cc
 8002a14:	200000f0 	.word	0x200000f0
 8002a18:	200000ec 	.word	0x200000ec
 8002a1c:	200001d8 	.word	0x200001d8
 8002a20:	200001d4 	.word	0x200001d4

08002a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <vTaskSwitchContext+0xbc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <vTaskSwitchContext+0xc0>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a38:	e04d      	b.n	8002ad6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <vTaskSwitchContext+0xc0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <vTaskSwitchContext+0xc4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f1c3 031f 	rsb	r3, r3, #31
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4925      	ldr	r1, [pc, #148]	; (8002aec <vTaskSwitchContext+0xc8>)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	607b      	str	r3, [r7, #4]
    }
 8002a7c:	bf00      	nop
 8002a7e:	e7fe      	b.n	8002a7e <vTaskSwitchContext+0x5a>
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <vTaskSwitchContext+0xc8>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d104      	bne.n	8002ab0 <vTaskSwitchContext+0x8c>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <vTaskSwitchContext+0xcc>)
 8002ab8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <vTaskSwitchContext+0xcc>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <vTaskSwitchContext+0xd0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d102      	bne.n	8002acc <vTaskSwitchContext+0xa8>
 8002ac6:	f002 fe83 	bl	80057d0 <SEGGER_SYSVIEW_OnIdle>
}
 8002aca:	e004      	b.n	8002ad6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <vTaskSwitchContext+0xcc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fedb 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200001ec 	.word	0x200001ec
 8002ae4:	200001d8 	.word	0x200001d8
 8002ae8:	200001cc 	.word	0x200001cc
 8002aec:	200000f0 	.word	0x200000f0
 8002af0:	200000ec 	.word	0x200000ec
 8002af4:	200001e8 	.word	0x200001e8

08002af8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b00:	f000 f852 	bl	8002ba8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <prvIdleTask+0x28>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d9f9      	bls.n	8002b00 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <prvIdleTask+0x2c>)
 8002b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b1c:	e7f0      	b.n	8002b00 <prvIdleTask+0x8>
 8002b1e:	bf00      	nop
 8002b20:	200000f0 	.word	0x200000f0
 8002b24:	e000ed04 	.word	0xe000ed04

08002b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e00c      	b.n	8002b4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <prvInitialiseTaskLists+0x60>)
 8002b40:	4413      	add	r3, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fbb8 	bl	80022b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d9ef      	bls.n	8002b34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <prvInitialiseTaskLists+0x64>)
 8002b56:	f7ff fbaf 	bl	80022b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b5a:	480d      	ldr	r0, [pc, #52]	; (8002b90 <prvInitialiseTaskLists+0x68>)
 8002b5c:	f7ff fbac 	bl	80022b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b60:	480c      	ldr	r0, [pc, #48]	; (8002b94 <prvInitialiseTaskLists+0x6c>)
 8002b62:	f7ff fba9 	bl	80022b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b66:	480c      	ldr	r0, [pc, #48]	; (8002b98 <prvInitialiseTaskLists+0x70>)
 8002b68:	f7ff fba6 	bl	80022b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b6c:	480b      	ldr	r0, [pc, #44]	; (8002b9c <prvInitialiseTaskLists+0x74>)
 8002b6e:	f7ff fba3 	bl	80022b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <prvInitialiseTaskLists+0x78>)
 8002b74:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <prvInitialiseTaskLists+0x64>)
 8002b76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <prvInitialiseTaskLists+0x7c>)
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <prvInitialiseTaskLists+0x68>)
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200000f0 	.word	0x200000f0
 8002b8c:	20000154 	.word	0x20000154
 8002b90:	20000168 	.word	0x20000168
 8002b94:	20000184 	.word	0x20000184
 8002b98:	20000198 	.word	0x20000198
 8002b9c:	200001b0 	.word	0x200001b0
 8002ba0:	2000017c 	.word	0x2000017c
 8002ba4:	20000180 	.word	0x20000180

08002ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bae:	e019      	b.n	8002be4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002bb0:	f000 fa00 	bl	8002fb4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <prvCheckTasksWaitingTermination+0x50>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fbca 	bl	800235a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <prvCheckTasksWaitingTermination+0x54>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <prvCheckTasksWaitingTermination+0x54>)
 8002bce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <prvCheckTasksWaitingTermination+0x58>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <prvCheckTasksWaitingTermination+0x58>)
 8002bd8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002bda:	f000 fa1b 	bl	8003014 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f810 	bl	8002c04 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <prvCheckTasksWaitingTermination+0x58>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e1      	bne.n	8002bb0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000198 	.word	0x20000198
 8002bfc:	200001c4 	.word	0x200001c4
 8002c00:	200001ac 	.word	0x200001ac

08002c04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fbdb 	bl	80033cc <vPortFree>
                vPortFree( pxTCB );
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fbd8 	bl	80033cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <prvResetNextTaskUnblockTime+0x30>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c3a:	e005      	b.n	8002c48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <prvResetNextTaskUnblockTime+0x30>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <prvResetNextTaskUnblockTime+0x34>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000017c 	.word	0x2000017c
 8002c58:	200001e4 	.word	0x200001e4

08002c5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b04      	subs	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <pxPortInitialiseStack+0x64>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3b14      	subs	r3, #20
 8002c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f06f 0202 	mvn.w	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3b20      	subs	r3, #32
 8002cb0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	08002cc5 	.word	0x08002cc5

08002cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <prvTaskExitError+0x54>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d00a      	beq.n	8002cee <prvTaskExitError+0x2a>
        __asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	60fb      	str	r3, [r7, #12]
    }
 8002cea:	bf00      	nop
 8002cec:	e7fe      	b.n	8002cec <prvTaskExitError+0x28>
        __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	60bb      	str	r3, [r7, #8]
    }
 8002d00:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d02:	bf00      	nop
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0fc      	beq.n	8002d04 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d0a:	bf00      	nop
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000010 	.word	0x20000010
 8002d1c:	00000000 	.word	0x00000000

08002d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <pxCurrentTCBConst2>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	f380 8809 	msr	PSP, r0
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f380 8811 	msr	BASEPRI, r0
 8002d3a:	4770      	bx	lr
 8002d3c:	f3af 8000 	nop.w

08002d40 <pxCurrentTCBConst2>:
 8002d40:	200000ec 	.word	0x200000ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d48:	4808      	ldr	r0, [pc, #32]	; (8002d6c <prvPortStartFirstTask+0x24>)
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	6800      	ldr	r0, [r0, #0]
 8002d4e:	f380 8808 	msr	MSP, r0
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f380 8814 	msr	CONTROL, r0
 8002d5a:	b662      	cpsie	i
 8002d5c:	b661      	cpsie	f
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	df00      	svc	0
 8002d68:	bf00      	nop
 8002d6a:	0000      	.short	0x0000
 8002d6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop

08002d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <xPortStartScheduler+0x120>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a46      	ldr	r2, [pc, #280]	; (8002e98 <xPortStartScheduler+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10a      	bne.n	8002d9a <xPortStartScheduler+0x26>
        __asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	613b      	str	r3, [r7, #16]
    }
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <xPortStartScheduler+0x120>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <xPortStartScheduler+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10a      	bne.n	8002dba <xPortStartScheduler+0x46>
        __asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	60fb      	str	r3, [r7, #12]
    }
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dba:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <xPortStartScheduler+0x12c>)
 8002dbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <xPortStartScheduler+0x130>)
 8002de0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de8:	e009      	b.n	8002dfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002df2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	d0ef      	beq.n	8002dea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e0a:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00a      	beq.n	8002e2c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	60bb      	str	r3, [r7, #8]
    }
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002e34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <xPortStartScheduler+0x134>)
 8002e40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <xPortStartScheduler+0x138>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <xPortStartScheduler+0x138>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <xPortStartScheduler+0x138>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a14      	ldr	r2, [pc, #80]	; (8002eac <xPortStartScheduler+0x138>)
 8002e5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e62:	f000 f963 	bl	800312c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <xPortStartScheduler+0x13c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e6c:	f000 f982 	bl	8003174 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <xPortStartScheduler+0x140>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <xPortStartScheduler+0x140>)
 8002e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e7c:	f7ff ff64 	bl	8002d48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e80:	f7ff fdd0 	bl	8002a24 <vTaskSwitchContext>
    prvTaskExitError();
 8002e84:	f7ff ff1e 	bl	8002cc4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	410fc271 	.word	0x410fc271
 8002e9c:	410fc270 	.word	0x410fc270
 8002ea0:	e000e400 	.word	0xe000e400
 8002ea4:	200001f0 	.word	0x200001f0
 8002ea8:	200001f4 	.word	0x200001f4
 8002eac:	e000ed20 	.word	0xe000ed20
 8002eb0:	20000010 	.word	0x20000010
 8002eb4:	e000ef34 	.word	0xe000ef34

08002eb8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <vInitPrioGroupValue+0xe4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <vInitPrioGroupValue+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10a      	bne.n	8002ede <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	613b      	str	r3, [r7, #16]
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <vInitPrioGroupValue+0xe4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <vInitPrioGroupValue+0xec>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10a      	bne.n	8002efe <vInitPrioGroupValue+0x46>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60fb      	str	r3, [r7, #12]
    }
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <vInitPrioGroupValue+0xf0>)
 8002f00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <vInitPrioGroupValue+0xf4>)
 8002f24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f2c:	e009      	b.n	8002f42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d0ef      	beq.n	8002f2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1c3 0307 	rsb	r3, r3, #7
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d00a      	beq.n	8002f70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	60bb      	str	r3, [r7, #8]
    }
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	4a0e      	ldr	r2, [pc, #56]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <vInitPrioGroupValue+0xf8>)
 8002f84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00
 8002fa0:	410fc271 	.word	0x410fc271
 8002fa4:	410fc270 	.word	0x410fc270
 8002fa8:	e000e400 	.word	0xe000e400
 8002fac:	200001f0 	.word	0x200001f0
 8002fb0:	200001f4 	.word	0x200001f4

08002fb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	607b      	str	r3, [r7, #4]
    }
 8002fcc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <vPortEnterCritical+0x58>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <vPortEnterCritical+0x58>)
 8002fd6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <vPortEnterCritical+0x58>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10f      	bne.n	8003000 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <vPortEnterCritical+0x5c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	603b      	str	r3, [r7, #0]
    }
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <vPortEnterCritical+0x4a>
    }
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000010 	.word	0x20000010
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <vPortExitCritical+0x50>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <vPortExitCritical+0x24>
        __asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	607b      	str	r3, [r7, #4]
    }
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <vPortExitCritical+0x50>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <vPortExitCritical+0x50>)
 8003040:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <vPortExitCritical+0x50>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <vPortExitCritical+0x42>
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003054:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000010 	.word	0x20000010
	...

08003070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003070:	f3ef 8009 	mrs	r0, PSP
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <pxCurrentTCBConst>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f01e 0f10 	tst.w	lr, #16
 8003080:	bf08      	it	eq
 8003082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003094:	f380 8811 	msr	BASEPRI, r0
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f7ff fcc0 	bl	8002a24 <vTaskSwitchContext>
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f380 8811 	msr	BASEPRI, r0
 80030ac:	bc09      	pop	{r0, r3}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b6:	f01e 0f10 	tst.w	lr, #16
 80030ba:	bf08      	it	eq
 80030bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030c0:	f380 8809 	msr	PSP, r0
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst>:
 80030d0:	200000ec 	.word	0x200000ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
        __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	607b      	str	r3, [r7, #4]
    }
 80030f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80030f2:	f002 faf3 	bl	80056dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030f6:	f7ff fbd9 	bl	80028ac <xTaskIncrementTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003100:	f002 fb4a 	bl	8005798 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <SysTick_Handler+0x50>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e001      	b.n	8003112 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800310e:	f002 fb27 	bl	8005760 <SEGGER_SYSVIEW_RecordExitISR>
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f383 8811 	msr	BASEPRI, r3
    }
 800311c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <vPortSetupTimerInterrupt+0x34>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <vPortSetupTimerInterrupt+0x38>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <vPortSetupTimerInterrupt+0x3c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <vPortSetupTimerInterrupt+0x40>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <vPortSetupTimerInterrupt+0x44>)
 800314a:	3b01      	subs	r3, #1
 800314c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <vPortSetupTimerInterrupt+0x34>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e010 	.word	0xe000e010
 8003164:	e000e018 	.word	0xe000e018
 8003168:	20000000 	.word	0x20000000
 800316c:	10624dd3 	.word	0x10624dd3
 8003170:	e000e014 	.word	0xe000e014

08003174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003184 <vPortEnableVFP+0x10>
 8003178:	6801      	ldr	r1, [r0, #0]
 800317a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800317e:	6001      	str	r1, [r0, #0]
 8003180:	4770      	bx	lr
 8003182:	0000      	.short	0x0000
 8003184:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop

0800318c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003192:	f3ef 8305 	mrs	r3, IPSR
 8003196:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	d914      	bls.n	80031c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800319e:	4a17      	ldr	r2, [pc, #92]	; (80031fc <vPortValidateInterruptPriority+0x70>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <vPortValidateInterruptPriority+0x74>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	7afa      	ldrb	r2, [r7, #11]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20a      	bcs.n	80031c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	607b      	str	r3, [r7, #4]
    }
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <vPortValidateInterruptPriority+0x78>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <vPortValidateInterruptPriority+0x7c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d90a      	bls.n	80031ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	603b      	str	r3, [r7, #0]
    }
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <vPortValidateInterruptPriority+0x60>
    }
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e3f0 	.word	0xe000e3f0
 8003200:	200001f0 	.word	0x200001f0
 8003204:	e000ed0c 	.word	0xe000ed0c
 8003208:	200001f4 	.word	0x200001f4

0800320c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003218:	f7ff fa88 	bl	800272c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800321c:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <pvPortMalloc+0x1a8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003224:	f000 f934 	bl	8003490 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003228:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <pvPortMalloc+0x1ac>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 80a7 	bne.w	8003384 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02d      	beq.n	8003298 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800323c:	2208      	movs	r2, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d227      	bcs.n	8003298 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003248:	2208      	movs	r2, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	2b00      	cmp	r3, #0
 8003258:	d021      	beq.n	800329e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	3308      	adds	r3, #8
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d214      	bcs.n	8003292 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	3308      	adds	r3, #8
 8003270:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <pvPortMalloc+0x92>
        __asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	617b      	str	r3, [r7, #20]
    }
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003296:	e002      	b.n	800329e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	e000      	b.n	80032a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800329e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d06e      	beq.n	8003384 <pvPortMalloc+0x178>
 80032a6:	4b45      	ldr	r3, [pc, #276]	; (80033bc <pvPortMalloc+0x1b0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d869      	bhi.n	8003384 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <pvPortMalloc+0x1b4>)
 80032b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <pvPortMalloc+0x1b4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032ba:	e004      	b.n	80032c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d903      	bls.n	80032d8 <pvPortMalloc+0xcc>
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f1      	bne.n	80032bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <pvPortMalloc+0x1a8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d050      	beq.n	8003384 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2208      	movs	r2, #8
 80032e8:	4413      	add	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	2308      	movs	r3, #8
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	429a      	cmp	r2, r3
 8003302:	d91f      	bls.n	8003344 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <pvPortMalloc+0x120>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	613b      	str	r3, [r7, #16]
    }
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad2      	subs	r2, r2, r3
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800333e:	69b8      	ldr	r0, [r7, #24]
 8003340:	f000 f908 	bl	8003554 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <pvPortMalloc+0x1b0>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <pvPortMalloc+0x1b0>)
 8003350:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <pvPortMalloc+0x1b0>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <pvPortMalloc+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d203      	bcs.n	8003366 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <pvPortMalloc+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <pvPortMalloc+0x1b8>)
 8003364:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <pvPortMalloc+0x1ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	431a      	orrs	r2, r3
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <pvPortMalloc+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <pvPortMalloc+0x1bc>)
 8003382:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003384:	f7ff f9e0 	bl	8002748 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	60fb      	str	r3, [r7, #12]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80033a8:	69fb      	ldr	r3, [r7, #28]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20019200 	.word	0x20019200
 80033b8:	20019214 	.word	0x20019214
 80033bc:	20019204 	.word	0x20019204
 80033c0:	200191f8 	.word	0x200191f8
 80033c4:	20019208 	.word	0x20019208
 80033c8:	2001920c 	.word	0x2001920c

080033cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04d      	beq.n	800347a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80033de:	2308      	movs	r3, #8
 80033e0:	425b      	negs	r3, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4413      	add	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <vPortFree+0xb8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <vPortFree+0x44>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	60fb      	str	r3, [r7, #12]
    }
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <vPortFree+0x62>
        __asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	60bb      	str	r3, [r7, #8]
    }
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <vPortFree+0xb8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01e      	beq.n	800347a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11a      	bne.n	800347a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <vPortFree+0xb8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003454:	f7ff f96a 	bl	800272c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <vPortFree+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <vPortFree+0xbc>)
 8003464:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003466:	6938      	ldr	r0, [r7, #16]
 8003468:	f000 f874 	bl	8003554 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <vPortFree+0xc0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	4a06      	ldr	r2, [pc, #24]	; (800348c <vPortFree+0xc0>)
 8003474:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003476:	f7ff f967 	bl	8002748 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20019214 	.word	0x20019214
 8003488:	20019204 	.word	0x20019204
 800348c:	20019210 	.word	0x20019210

08003490 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003496:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800349a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <prvHeapInit+0xac>)
 800349e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3307      	adds	r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0307 	bic.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <prvHeapInit+0xac>)
 80034c0:	4413      	add	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <prvHeapInit+0xb0>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <prvHeapInit+0xb0>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80034dc:	2208      	movs	r2, #8
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <prvHeapInit+0xb4>)
 80034f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <prvHeapInit+0xb4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <prvHeapInit+0xb4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <prvHeapInit+0xb4>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <prvHeapInit+0xb8>)
 800351e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <prvHeapInit+0xbc>)
 8003526:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <prvHeapInit+0xc0>)
 800352a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	200001f8 	.word	0x200001f8
 8003540:	200191f8 	.word	0x200191f8
 8003544:	20019200 	.word	0x20019200
 8003548:	20019208 	.word	0x20019208
 800354c:	20019204 	.word	0x20019204
 8003550:	20019214 	.word	0x20019214

08003554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <prvInsertBlockIntoFreeList+0xac>)
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e002      	b.n	8003568 <prvInsertBlockIntoFreeList+0x14>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d8f7      	bhi.n	8003562 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4413      	add	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d108      	bne.n	8003596 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	441a      	add	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d118      	bne.n	80035dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <prvInsertBlockIntoFreeList+0xb0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d00d      	beq.n	80035d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e008      	b.n	80035e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <prvInsertBlockIntoFreeList+0xb0>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e003      	b.n	80035e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d002      	beq.n	80035f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	200191f8 	.word	0x200191f8
 8003604:	20019200 	.word	0x20019200

08003608 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <_cbSendSystemDesc+0x14>)
 800360e:	f002 f80f 	bl	8005630 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003612:	4803      	ldr	r0, [pc, #12]	; (8003620 <_cbSendSystemDesc+0x18>)
 8003614:	f002 f80c 	bl	8005630 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	080067ec 	.word	0x080067ec
 8003620:	08006830 	.word	0x08006830

08003624 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <SEGGER_SYSVIEW_Conf+0x20>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SEGGER_SYSVIEW_Conf+0x20>)
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SEGGER_SYSVIEW_Conf+0x24>)
 8003632:	4a06      	ldr	r2, [pc, #24]	; (800364c <SEGGER_SYSVIEW_Conf+0x28>)
 8003634:	f001 fc80 	bl	8004f38 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003638:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800363c:	f001 fcc0 	bl	8004fc0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000000 	.word	0x20000000
 8003648:	08003609 	.word	0x08003609
 800364c:	080068d0 	.word	0x080068d0

08003650 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e033      	b.n	80036c4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800365c:	491e      	ldr	r1, [pc, #120]	; (80036d8 <_cbSendTaskList+0x88>)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	491a      	ldr	r1, [pc, #104]	; (80036d8 <_cbSendTaskList+0x88>)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	4c16      	ldr	r4, [pc, #88]	; (80036d8 <_cbSendTaskList+0x88>)
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4423      	add	r3, r4
 800368c:	3308      	adds	r3, #8
 800368e:	681c      	ldr	r4, [r3, #0]
 8003690:	4d11      	ldr	r5, [pc, #68]	; (80036d8 <_cbSendTaskList+0x88>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	442b      	add	r3, r5
 800369e:	330c      	adds	r3, #12
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	4e0d      	ldr	r6, [pc, #52]	; (80036d8 <_cbSendTaskList+0x88>)
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4433      	add	r3, r6
 80036b0:	3310      	adds	r3, #16
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	462b      	mov	r3, r5
 80036b8:	4622      	mov	r2, r4
 80036ba:	f000 f8bd 	bl	8003838 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3301      	adds	r3, #1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <_cbSendTaskList+0x8c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3c6      	bcc.n	800365c <_cbSendTaskList+0xc>
  }
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d8:	20019218 	.word	0x20019218
 80036dc:	200192b8 	.word	0x200192b8

080036e0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80036e8:	f7ff f8ce 	bl	8002888 <xTaskGetTickCountFromISR>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2200      	movs	r2, #0
 80036f0:	469a      	mov	sl, r3
 80036f2:	4693      	mov	fp, r2
 80036f4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80036f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	f04f 0a00 	mov.w	sl, #0
 8003704:	f04f 0b00 	mov.w	fp, #0
 8003708:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800370c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003710:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003714:	4652      	mov	r2, sl
 8003716:	465b      	mov	r3, fp
 8003718:	1a14      	subs	r4, r2, r0
 800371a:	eb63 0501 	sbc.w	r5, r3, r1
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	00ab      	lsls	r3, r5, #2
 8003728:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800372c:	00a2      	lsls	r2, r4, #2
 800372e:	4614      	mov	r4, r2
 8003730:	461d      	mov	r5, r3
 8003732:	eb14 0800 	adds.w	r8, r4, r0
 8003736:	eb45 0901 	adc.w	r9, r5, r1
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800374e:	4690      	mov	r8, r2
 8003750:	4699      	mov	r9, r3
 8003752:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003756:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003768 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003776:	2205      	movs	r2, #5
 8003778:	492b      	ldr	r1, [pc, #172]	; (8003828 <SYSVIEW_AddTask+0xc0>)
 800377a:	68b8      	ldr	r0, [r7, #8]
 800377c:	f002 fac0 	bl	8005d00 <memcmp>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04b      	beq.n	800381e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <SYSVIEW_AddTask+0xc4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b07      	cmp	r3, #7
 800378c:	d903      	bls.n	8003796 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800378e:	4828      	ldr	r0, [pc, #160]	; (8003830 <SYSVIEW_AddTask+0xc8>)
 8003790:	f002 f9f0 	bl	8005b74 <SEGGER_SYSVIEW_Warn>
    return;
 8003794:	e044      	b.n	8003820 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <SYSVIEW_AddTask+0xc4>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4926      	ldr	r1, [pc, #152]	; (8003834 <SYSVIEW_AddTask+0xcc>)
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <SYSVIEW_AddTask+0xc4>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4921      	ldr	r1, [pc, #132]	; (8003834 <SYSVIEW_AddTask+0xcc>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3304      	adds	r3, #4
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <SYSVIEW_AddTask+0xc4>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	491b      	ldr	r1, [pc, #108]	; (8003834 <SYSVIEW_AddTask+0xcc>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3308      	adds	r3, #8
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <SYSVIEW_AddTask+0xc4>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4916      	ldr	r1, [pc, #88]	; (8003834 <SYSVIEW_AddTask+0xcc>)
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	330c      	adds	r3, #12
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <SYSVIEW_AddTask+0xc4>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4910      	ldr	r1, [pc, #64]	; (8003834 <SYSVIEW_AddTask+0xcc>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3310      	adds	r3, #16
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <SYSVIEW_AddTask+0xc4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <SYSVIEW_AddTask+0xc4>)
 800380a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f80e 	bl	8003838 <SYSVIEW_SendTaskInfo>
 800381c:	e000      	b.n	8003820 <SYSVIEW_AddTask+0xb8>
    return;
 800381e:	bf00      	nop

}
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08006840 	.word	0x08006840
 800382c:	200192b8 	.word	0x200192b8
 8003830:	08006848 	.word	0x08006848
 8003834:	20019218 	.word	0x20019218

08003838 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	2214      	movs	r2, #20
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f002 fa74 	bl	8005d3c <memset>
  TaskInfo.TaskID     = TaskID;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	4618      	mov	r0, r3
 800386e:	f001 fde7 	bl	8005440 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <__NVIC_EnableIRQ>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	db0a      	blt.n	80038e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	490c      	ldr	r1, [pc, #48]	; (8003904 <__NVIC_SetPriority+0x4c>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	440b      	add	r3, r1
 80038dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038e0:	e00a      	b.n	80038f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <__NVIC_SetPriority+0x50>)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	3b04      	subs	r3, #4
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	440b      	add	r3, r1
 80038f6:	761a      	strb	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003912:	f002 f98b 	bl	8005c2c <SEGGER_SYSVIEW_IsStarted>
 8003916:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800391e:	f001 fc13 	bl	8005148 <SEGGER_SYSVIEW_Start>
  }
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <_cbOnUARTRx+0x3c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d806      	bhi.n	800394c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <_cbOnUARTRx+0x3c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <_cbOnUARTRx+0x3c>)
 8003948:	701a      	strb	r2, [r3, #0]
    goto Done;
 800394a:	e009      	b.n	8003960 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800394c:	f7ff ffde 	bl	800390c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <_cbOnUARTRx+0x3c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	2201      	movs	r2, #1
 800395a:	4619      	mov	r1, r3
 800395c:	f000 fbea 	bl	8004134 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003960:	bf00      	nop
}
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000014 	.word	0x20000014

0800396c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <_cbOnUARTTx+0x5c>)
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d80f      	bhi.n	800399c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <_cbOnUARTTx+0x5c>)
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	461a      	mov	r2, r3
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <_cbOnUARTTx+0x60>)
 8003984:	5c9a      	ldrb	r2, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <_cbOnUARTTx+0x5c>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	3301      	adds	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <_cbOnUARTTx+0x5c>)
 8003994:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
    goto Done;
 800399a:	e00f      	b.n	80039bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <_cbOnUARTTx+0x5c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa19 	bl	8003ddc <SEGGER_RTT_ReadUpBufferNoLock>
 80039aa:	4603      	mov	r3, r0
 80039ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da02      	bge.n	80039ba <_cbOnUARTTx+0x4e>
    r = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e000      	b.n	80039bc <_cbOnUARTTx+0x50>
  }
Done:
 80039ba:	bf00      	nop
  return r;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000014 	.word	0x20000014
 80039cc:	080068d8 	.word	0x080068d8

080039d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <SEGGER_UART_init+0x1c>)
 80039da:	4905      	ldr	r1, [pc, #20]	; (80039f0 <SEGGER_UART_init+0x20>)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f863 	bl	8003aa8 <HIF_UART_Init>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	0800392d 	.word	0x0800392d
 80039f0:	0800396d 	.word	0x0800396d

080039f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <USART2_IRQHandler+0x80>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d011      	beq.n	8003a2e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <USART2_IRQHandler+0x84>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 030b 	and.w	r3, r3, #11
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <USART2_IRQHandler+0x88>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <USART2_IRQHandler+0x88>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01a      	beq.n	8003a6e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <USART2_IRQHandler+0x8c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <USART2_IRQHandler+0x8c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1dfa      	adds	r2, r7, #7
 8003a46:	4610      	mov	r0, r2
 8003a48:	4798      	blx	r3
 8003a4a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <USART2_IRQHandler+0x90>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <USART2_IRQHandler+0x90>)
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e006      	b.n	8003a6e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <USART2_IRQHandler+0x80>)
 8003a62:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003a64:	79fa      	ldrb	r2, [r7, #7]
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <USART2_IRQHandler+0x84>)
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e000      	b.n	8003a6e <USART2_IRQHandler+0x7a>
      return;
 8003a6c:	bf00      	nop
    }
  }
}
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40004400 	.word	0x40004400
 8003a78:	40004404 	.word	0x40004404
 8003a7c:	200192bc 	.word	0x200192bc
 8003a80:	200192c0 	.word	0x200192c0
 8003a84:	4000440c 	.word	0x4000440c

08003a88 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	4000440c 	.word	0x4000440c

08003aa8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HIF_UART_Init+0xc8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HIF_UART_Init+0xc8>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <HIF_UART_Init+0xcc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <HIF_UART_Init+0xcc>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HIF_UART_Init+0xd0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003ae0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <HIF_UART_Init+0xd0>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HIF_UART_Init+0xd4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003afc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <HIF_UART_Init+0xd4>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HIF_UART_Init+0xd8>)
 8003b06:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b0a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HIF_UART_Init+0xdc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HIF_UART_Init+0xe0>)
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HIF_UART_Init+0xe4>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d302      	bcc.n	8003b3e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003b38:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003b3c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HIF_UART_Init+0xe8>)
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003b4e:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HIF_UART_Init+0xec>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003b54:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HIF_UART_Init+0xf0>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003b5a:	2106      	movs	r1, #6
 8003b5c:	2026      	movs	r0, #38	; 0x26
 8003b5e:	f7ff feab 	bl	80038b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003b62:	2026      	movs	r0, #38	; 0x26
 8003b64:	f7ff fe8a 	bl	800387c <__NVIC_EnableIRQ>
}
 8003b68:	bf00      	nop
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023840 	.word	0x40023840
 8003b74:	40023830 	.word	0x40023830
 8003b78:	40020020 	.word	0x40020020
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	4000440c 	.word	0x4000440c
 8003b84:	40004410 	.word	0x40004410
 8003b88:	40004414 	.word	0x40004414
 8003b8c:	0501bd00 	.word	0x0501bd00
 8003b90:	40004408 	.word	0x40004408
 8003b94:	200192bc 	.word	0x200192bc
 8003b98:	200192c0 	.word	0x200192c0

08003b9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <_DoInit+0x98>)
 8003ba4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <_DoInit+0x9c>)
 8003bb6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <_DoInit+0xa0>)
 8003bbc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <_DoInit+0x9c>)
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <_DoInit+0xa4>)
 8003be2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2210      	movs	r2, #16
 8003be8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3307      	adds	r3, #7
 8003c00:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <_DoInit+0xa8>)
 8003c02:	6810      	ldr	r0, [r2, #0]
 8003c04:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c06:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <_DoInit+0xac>)
 8003c0e:	6810      	ldr	r0, [r2, #0]
 8003c10:	6018      	str	r0, [r3, #0]
 8003c12:	8891      	ldrh	r1, [r2, #4]
 8003c14:	7992      	ldrb	r2, [r2, #6]
 8003c16:	8099      	strh	r1, [r3, #4]
 8003c18:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c1a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c24:	f3bf 8f5f 	dmb	sy
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	200192c4 	.word	0x200192c4
 8003c38:	08006898 	.word	0x08006898
 8003c3c:	2001936c 	.word	0x2001936c
 8003c40:	2001976c 	.word	0x2001976c
 8003c44:	080068a4 	.word	0x080068a4
 8003c48:	080068a8 	.word	0x080068a8

08003c4c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d905      	bls.n	8003c7c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	e007      	b.n	8003c8c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	1acb      	subs	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bf28      	it	cs
 8003c9a:	4613      	movcs	r3, r2
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf28      	it	cs
 8003ca6:	4613      	movcs	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f002 f831 	bl	8005d20 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	4413      	add	r3, r2
 8003cc4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	4413      	add	r3, r2
 8003ccc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	4413      	add	r3, r2
 8003cdc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d101      	bne.n	8003cec <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1b2      	bne.n	8003c62 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d911      	bls.n	8003d4e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6938      	ldr	r0, [r7, #16]
 8003d3a:	f001 fff1 	bl	8005d20 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d3e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d4c:	e01f      	b.n	8003d8e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	6938      	ldr	r0, [r7, #16]
 8003d62:	f001 ffdd 	bl	8005d20 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6938      	ldr	r0, [r7, #16]
 8003d80:	f001 ffce 	bl	8005d20 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	60da      	str	r2, [r3, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d808      	bhi.n	8003dc4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e004      	b.n	8003dce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003df6:	f7ff fed1 	bl	8003b9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d92b      	bls.n	8003e80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bf28      	it	cs
 8003e3a:	4613      	movcs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	4413      	add	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e4e:	f001 ff67 	bl	8005d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d101      	bne.n	8003e80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bf28      	it	cs
 8003e90:	4613      	movcs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d019      	beq.n	8003ece <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	4413      	add	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	6939      	ldr	r1, [r7, #16]
 8003ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eaa:	f001 ff39 	bl	8005d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	; 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200192c4 	.word	0x200192c4

08003ee8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f02:	f7ff fe4b 	bl	8003b9c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3360      	adds	r3, #96	; 0x60
 8003f12:	4a37      	ldr	r2, [pc, #220]	; (8003ff0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f14:	4413      	add	r3, r2
 8003f16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d92b      	bls.n	8003f8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bf28      	it	cs
 8003f46:	4613      	movcs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	4413      	add	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f5a:	f001 fee1 	bl	8005d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4413      	add	r3, r2
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d101      	bne.n	8003f8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bf28      	it	cs
 8003f9c:	4613      	movcs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	4413      	add	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6939      	ldr	r1, [r7, #16]
 8003fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb6:	f001 feb3 	bl	8005d20 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	; 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200192c4 	.word	0x200192c4

08003ff4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	3360      	adds	r3, #96	; 0x60
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d029      	beq.n	8004072 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800401e:	2b02      	cmp	r3, #2
 8004020:	d82e      	bhi.n	8004080 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004026:	2b01      	cmp	r3, #1
 8004028:	d013      	beq.n	8004052 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800402a:	e029      	b.n	8004080 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7ff feb2 	bl	8003d96 <_GetAvailWriteSpace>
 8004032:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d202      	bcs.n	8004042 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004040:	e021      	b.n	8004086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff fe5b 	bl	8003d06 <_WriteNoCheck>
    break;
 8004050:	e019      	b.n	8004086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff fe9f 	bl	8003d96 <_GetAvailWriteSpace>
 8004058:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4293      	cmp	r3, r2
 8004060:	bf28      	it	cs
 8004062:	4613      	movcs	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff fe4b 	bl	8003d06 <_WriteNoCheck>
    break;
 8004070:	e009      	b.n	8004086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff fde8 	bl	8003c4c <_WriteBlocking>
 800407c:	61f8      	str	r0, [r7, #28]
    break;
 800407e:	e002      	b.n	8004086 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
    break;
 8004084:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004086:	69fb      	ldr	r3, [r7, #28]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200192c4 	.word	0x200192c4

08004094 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <SEGGER_RTT_WriteNoLock+0x9c>)
 80040b2:	4413      	add	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d029      	beq.n	8004112 <SEGGER_RTT_WriteNoLock+0x7e>
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d82e      	bhi.n	8004120 <SEGGER_RTT_WriteNoLock+0x8c>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <SEGGER_RTT_WriteNoLock+0x38>
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d013      	beq.n	80040f2 <SEGGER_RTT_WriteNoLock+0x5e>
 80040ca:	e029      	b.n	8004120 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040cc:	6978      	ldr	r0, [r7, #20]
 80040ce:	f7ff fe62 	bl	8003d96 <_GetAvailWriteSpace>
 80040d2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d202      	bcs.n	80040e2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040e0:	e021      	b.n	8004126 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff fe0b 	bl	8003d06 <_WriteNoCheck>
    break;
 80040f0:	e019      	b.n	8004126 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff fe4f 	bl	8003d96 <_GetAvailWriteSpace>
 80040f8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4293      	cmp	r3, r2
 8004100:	bf28      	it	cs
 8004102:	4613      	movcs	r3, r2
 8004104:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	f7ff fdfb 	bl	8003d06 <_WriteNoCheck>
    break;
 8004110:	e009      	b.n	8004126 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff fd98 	bl	8003c4c <_WriteBlocking>
 800411c:	61f8      	str	r0, [r7, #28]
    break;
 800411e:	e002      	b.n	8004126 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
    break;
 8004124:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004126:	69fb      	ldr	r3, [r7, #28]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	200192c4 	.word	0x200192c4

08004134 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800414e:	f7ff fd25 	bl	8003b9c <_DoInit>
  SEGGER_RTT_LOCK();
 8004152:	f3ef 8311 	mrs	r3, BASEPRI
 8004156:	f04f 0120 	mov.w	r1, #32
 800415a:	f381 8811 	msr	BASEPRI, r1
 800415e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff ff45 	bl	8003ff4 <SEGGER_RTT_WriteDownBufferNoLock>
 800416a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004172:	697b      	ldr	r3, [r7, #20]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200192c4 	.word	0x200192c4

08004180 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <SEGGER_RTT_Write+0x48>)
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <SEGGER_RTT_Write+0x1e>
 800419a:	f7ff fcff 	bl	8003b9c <_DoInit>
  SEGGER_RTT_LOCK();
 800419e:	f3ef 8311 	mrs	r3, BASEPRI
 80041a2:	f04f 0120 	mov.w	r1, #32
 80041a6:	f381 8811 	msr	BASEPRI, r1
 80041aa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff6f 	bl	8004094 <SEGGER_RTT_WriteNoLock>
 80041b6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80041be:	697b      	ldr	r3, [r7, #20]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200192c4 	.word	0x200192c4

080041cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80041e8:	f7ff fcd8 	bl	8003b9c <_DoInit>
  SEGGER_RTT_LOCK();
 80041ec:	f3ef 8311 	mrs	r3, BASEPRI
 80041f0:	f04f 0120 	mov.w	r1, #32
 80041f4:	f381 8811 	msr	BASEPRI, r1
 80041f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041fa:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004202:	6939      	ldr	r1, [r7, #16]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	3304      	adds	r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	429a      	cmp	r2, r3
 8004228:	dbeb      	blt.n	8004202 <SEGGER_RTT_AllocUpBuffer+0x36>
 800422a:	e000      	b.n	800422e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800422c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	429a      	cmp	r2, r3
 8004236:	da3f      	bge.n	80042b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004238:	6939      	ldr	r1, [r7, #16]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	440b      	add	r3, r1
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800424c:	6939      	ldr	r1, [r7, #16]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3304      	adds	r3, #4
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	3320      	adds	r3, #32
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004276:	6939      	ldr	r1, [r7, #16]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	440b      	add	r3, r1
 8004284:	3328      	adds	r3, #40	; 0x28
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800428a:	6939      	ldr	r1, [r7, #16]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4613      	mov	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	3324      	adds	r3, #36	; 0x24
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800429e:	6939      	ldr	r1, [r7, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	332c      	adds	r3, #44	; 0x2c
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042b2:	f3bf 8f5f 	dmb	sy
 80042b6:	e002      	b.n	80042be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80042c4:	69fb      	ldr	r3, [r7, #28]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200192c4 	.word	0x200192c4

080042d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80042e2:	4b33      	ldr	r3, [pc, #204]	; (80043b0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80042f0:	f7ff fc54 	bl	8003b9c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042f4:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80042f6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4293      	cmp	r3, r2
 8004302:	d24d      	bcs.n	80043a0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004304:	f3ef 8311 	mrs	r3, BASEPRI
 8004308:	f04f 0120 	mov.w	r1, #32
 800430c:	f381 8811 	msr	BASEPRI, r1
 8004310:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d031      	beq.n	800437c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	3364      	adds	r3, #100	; 0x64
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004340:	6979      	ldr	r1, [r7, #20]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	3368      	adds	r3, #104	; 0x68
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	3370      	adds	r3, #112	; 0x70
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004368:	6979      	ldr	r1, [r7, #20]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	336c      	adds	r3, #108	; 0x6c
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	3374      	adds	r3, #116	; 0x74
 800438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004390:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e002      	b.n	80043a6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80043a0:	f04f 33ff 	mov.w	r3, #4294967295
 80043a4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80043a6:	69fb      	ldr	r3, [r7, #28]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200192c4 	.word	0x200192c4

080043b4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043c4:	e002      	b.n	80043cc <_EncodeStr+0x18>
    Len++;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3301      	adds	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f6      	bne.n	80043c6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d901      	bls.n	80043e4 <_EncodeStr+0x30>
    Len = Limit;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2bfe      	cmp	r3, #254	; 0xfe
 80043e8:	d806      	bhi.n	80043f8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e011      	b.n	800441c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	60fa      	str	r2, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	; 0xff
 8004400:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	60fa      	str	r2, [r7, #12]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	0a19      	lsrs	r1, r3, #8
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	b2ca      	uxtb	r2, r1
 800441a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004420:	e00a      	b.n	8004438 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	1c53      	adds	r3, r2, #1
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	60f9      	str	r1, [r7, #12]
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
    n++;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d3f0      	bcc.n	8004422 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <_HandleIncomingPacket+0xe0>)
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	4618      	mov	r0, r3
 8004474:	1cfb      	adds	r3, r7, #3
 8004476:	2201      	movs	r2, #1
 8004478:	4619      	mov	r1, r3
 800447a:	f7ff fd35 	bl	8003ee8 <SEGGER_RTT_ReadNoLock>
 800447e:	4603      	mov	r3, r0
 8004480:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	dd54      	ble.n	8004532 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d032      	beq.n	80044f4 <_HandleIncomingPacket+0x8c>
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	dc42      	bgt.n	8004518 <_HandleIncomingPacket+0xb0>
 8004492:	2b07      	cmp	r3, #7
 8004494:	dc16      	bgt.n	80044c4 <_HandleIncomingPacket+0x5c>
 8004496:	2b00      	cmp	r3, #0
 8004498:	dd3e      	ble.n	8004518 <_HandleIncomingPacket+0xb0>
 800449a:	3b01      	subs	r3, #1
 800449c:	2b06      	cmp	r3, #6
 800449e:	d83b      	bhi.n	8004518 <_HandleIncomingPacket+0xb0>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <_HandleIncomingPacket+0x40>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cb 	.word	0x080044cb
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044ef 	.word	0x080044ef
 80044c4:	2b7f      	cmp	r3, #127	; 0x7f
 80044c6:	d036      	beq.n	8004536 <_HandleIncomingPacket+0xce>
 80044c8:	e026      	b.n	8004518 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80044ca:	f000 fe3d 	bl	8005148 <SEGGER_SYSVIEW_Start>
      break;
 80044ce:	e037      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80044d0:	f000 fef6 	bl	80052c0 <SEGGER_SYSVIEW_Stop>
      break;
 80044d4:	e034      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80044d6:	f001 f8cf 	bl	8005678 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80044da:	e031      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80044dc:	f001 f894 	bl	8005608 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80044e0:	e02e      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80044e2:	f000 ff13 	bl	800530c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80044e6:	e02b      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80044e8:	f001 faf2 	bl	8005ad0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80044ec:	e028      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80044ee:	f001 fad1 	bl	8005a94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80044f2:	e025      	b.n	8004540 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <_HandleIncomingPacket+0xe0>)
 80044f6:	7e1b      	ldrb	r3, [r3, #24]
 80044f8:	4618      	mov	r0, r3
 80044fa:	1cfb      	adds	r3, r7, #3
 80044fc:	2201      	movs	r2, #1
 80044fe:	4619      	mov	r1, r3
 8004500:	f7ff fcf2 	bl	8003ee8 <SEGGER_RTT_ReadNoLock>
 8004504:	4603      	mov	r3, r0
 8004506:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	dd15      	ble.n	800453a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	4618      	mov	r0, r3
 8004512:	f001 fa3f 	bl	8005994 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004516:	e010      	b.n	800453a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	b25b      	sxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	da0e      	bge.n	800453e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <_HandleIncomingPacket+0xe0>)
 8004522:	7e1b      	ldrb	r3, [r3, #24]
 8004524:	4618      	mov	r0, r3
 8004526:	1cfb      	adds	r3, r7, #3
 8004528:	2201      	movs	r2, #1
 800452a:	4619      	mov	r1, r3
 800452c:	f7ff fcdc 	bl	8003ee8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004530:	e005      	b.n	800453e <_HandleIncomingPacket+0xd6>
    }
  }
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <_HandleIncomingPacket+0xd8>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <_HandleIncomingPacket+0xd8>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <_HandleIncomingPacket+0xd8>
      break;
 800453e:	bf00      	nop
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2001a784 	.word	0x2001a784

0800454c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	; 0x30
 8004550:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004552:	2301      	movs	r3, #1
 8004554:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <_TrySendOverflowPacket+0xe0>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	e00b      	b.n	8004580 <_TrySendOverflowPacket+0x34>
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	b2da      	uxtb	r2, r3
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	09db      	lsrs	r3, r3, #7
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	2b7f      	cmp	r3, #127	; 0x7f
 8004584:	d8f0      	bhi.n	8004568 <_TrySendOverflowPacket+0x1c>
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <_TrySendOverflowPacket+0xe4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <_TrySendOverflowPacket+0xe0>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	e00b      	b.n	80045c8 <_TrySendOverflowPacket+0x7c>
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1c59      	adds	r1, r3, #1
 80045b8:	6279      	str	r1, [r7, #36]	; 0x24
 80045ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	09db      	lsrs	r3, r3, #7
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2b7f      	cmp	r3, #127	; 0x7f
 80045cc:	d8f0      	bhi.n	80045b0 <_TrySendOverflowPacket+0x64>
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	627a      	str	r2, [r7, #36]	; 0x24
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <_TrySendOverflowPacket+0xe0>)
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	4618      	mov	r0, r3
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fb fdee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045f4:	4603      	mov	r3, r0
 80045f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80045f8:	f7ff fa46 	bl	8003a88 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <_TrySendOverflowPacket+0xe0>)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <_TrySendOverflowPacket+0xe0>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <_TrySendOverflowPacket+0xe0>)
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e004      	b.n	8004620 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <_TrySendOverflowPacket+0xe0>)
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	4a03      	ldr	r2, [pc, #12]	; (800462c <_TrySendOverflowPacket+0xe0>)
 800461e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004620:	693b      	ldr	r3, [r7, #16]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3730      	adds	r7, #48	; 0x30
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2001a784 	.word	0x2001a784
 8004630:	e0001004 	.word	0xe0001004

08004634 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004640:	4b6d      	ldr	r3, [pc, #436]	; (80047f8 <_SendPacket+0x1c4>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d010      	beq.n	800466a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <_SendPacket+0x1c4>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80a5 	beq.w	800479c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004652:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <_SendPacket+0x1c4>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d109      	bne.n	800466e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800465a:	f7ff ff77 	bl	800454c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800465e:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <_SendPacket+0x1c4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 809c 	bne.w	80047a0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004668:	e001      	b.n	800466e <_SendPacket+0x3a>
    goto Send;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <_SendPacket+0x3c>
Send:
 800466e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b1f      	cmp	r3, #31
 8004674:	d809      	bhi.n	800468a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004676:	4b60      	ldr	r3, [pc, #384]	; (80047f8 <_SendPacket+0x1c4>)
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 808d 	bne.w	80047a4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b17      	cmp	r3, #23
 800468e:	d807      	bhi.n	80046a0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e03d      	b.n	800471c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b7f      	cmp	r3, #127	; 0x7f
 80046ac:	d912      	bls.n	80046d4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	09da      	lsrs	r2, r3, #7
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	60fa      	str	r2, [r7, #12]
 80046c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e006      	b.n	80046e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b7f      	cmp	r3, #127	; 0x7f
 80046e6:	d912      	bls.n	800470e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	09da      	lsrs	r2, r3, #7
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	3a01      	subs	r2, #1
 8004700:	60fa      	str	r2, [r7, #12]
 8004702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e006      	b.n	800471c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3b01      	subs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <_SendPacket+0x1c8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004722:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <_SendPacket+0x1c4>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	e00b      	b.n	800474e <_SendPacket+0x11a>
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1c59      	adds	r1, r3, #1
 800473e:	6279      	str	r1, [r7, #36]	; 0x24
 8004740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	09db      	lsrs	r3, r3, #7
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2b7f      	cmp	r3, #127	; 0x7f
 8004752:	d8f0      	bhi.n	8004736 <_SendPacket+0x102>
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	627a      	str	r2, [r7, #36]	; 0x24
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <_SendPacket+0x1c4>)
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	4618      	mov	r0, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	461a      	mov	r2, r3
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f7fb fd2c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004778:	4603      	mov	r3, r0
 800477a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800477c:	f7ff f984 	bl	8003a88 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <_SendPacket+0x1c4>)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	60d3      	str	r3, [r2, #12]
 800478c:	e00b      	b.n	80047a6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <_SendPacket+0x1c4>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <_SendPacket+0x1c4>)
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e004      	b.n	80047a6 <_SendPacket+0x172>
    goto SendDone;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <_SendPacket+0x172>
      goto SendDone;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <_SendPacket+0x172>
      goto SendDone;
 80047a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <_SendPacket+0x1c4>)
 80047a8:	7e1b      	ldrb	r3, [r3, #24]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <_SendPacket+0x1cc>)
 80047ae:	460b      	mov	r3, r1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	440b      	add	r3, r1
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	336c      	adds	r3, #108	; 0x6c
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <_SendPacket+0x1c4>)
 80047be:	7e1b      	ldrb	r3, [r3, #24]
 80047c0:	4618      	mov	r0, r3
 80047c2:	490f      	ldr	r1, [pc, #60]	; (8004800 <_SendPacket+0x1cc>)
 80047c4:	4603      	mov	r3, r0
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4403      	add	r3, r0
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	3370      	adds	r3, #112	; 0x70
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d00b      	beq.n	80047ee <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <_SendPacket+0x1c4>)
 80047d8:	789b      	ldrb	r3, [r3, #2]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <_SendPacket+0x1c4>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047e4:	f7ff fe40 	bl	8004468 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <_SendPacket+0x1c4>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047ee:	bf00      	nop
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	2001a784 	.word	0x2001a784
 80047fc:	e0001004 	.word	0xe0001004
 8004800:	200192c4 	.word	0x200192c4

08004804 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	3301      	adds	r3, #1
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d80a      	bhi.n	8004834 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	1c59      	adds	r1, r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6051      	str	r1, [r2, #4]
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d15a      	bne.n	80048f2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	e00b      	b.n	8004876 <_StoreChar+0x72>
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	6279      	str	r1, [r7, #36]	; 0x24
 8004868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	09db      	lsrs	r3, r3, #7
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d8f0      	bhi.n	800485e <_StoreChar+0x5a>
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	627a      	str	r2, [r7, #36]	; 0x24
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e00b      	b.n	80048ae <_StoreChar+0xaa>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	1c59      	adds	r1, r3, #1
 800489e:	61f9      	str	r1, [r7, #28]
 80048a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	09db      	lsrs	r3, r3, #7
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b7f      	cmp	r3, #127	; 0x7f
 80048b2:	d8f0      	bhi.n	8004896 <_StoreChar+0x92>
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	61fa      	str	r2, [r7, #28]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	221a      	movs	r2, #26
 80048ca:	6939      	ldr	r1, [r7, #16]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff feb1 	bl	8004634 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fdb9 	bl	800444e <_PreparePacket>
 80048dc:	4602      	mov	r2, r0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
  }
}
 80048f2:	bf00      	nop
 80048f4:	3728      	adds	r7, #40	; 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800490e:	2301      	movs	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004916:	e007      	b.n	8004928 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	623b      	str	r3, [r7, #32]
    Width++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d2f3      	bcs.n	8004918 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	429a      	cmp	r2, r3
 8004936:	d901      	bls.n	800493c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d11f      	bne.n	8004986 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01c      	beq.n	8004986 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <_PrintUnsigned+0x66>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <_PrintUnsigned+0x66>
        c = '0';
 800495c:	2330      	movs	r3, #48	; 0x30
 800495e:	76fb      	strb	r3, [r7, #27]
 8004960:	e001      	b.n	8004966 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004962:	2320      	movs	r3, #32
 8004964:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004966:	e007      	b.n	8004978 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	3b01      	subs	r3, #1
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800496e:	7efb      	ldrb	r3, [r7, #27]
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff ff46 	bl	8004804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <_PrintUnsigned+0x8a>
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	429a      	cmp	r2, r3
 8004984:	d3f0      	bcc.n	8004968 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d903      	bls.n	8004994 <_PrintUnsigned+0x98>
      NumDigits--;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	e009      	b.n	80049a8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d200      	bcs.n	80049a8 <_PrintUnsigned+0xac>
        break;
 80049a6:	e005      	b.n	80049b4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80049b2:	e7e8      	b.n	8004986 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <_PrintUnsigned+0x128>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4413      	add	r3, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff ff14 	bl	8004804 <_StoreChar>
    Digit /= Base;
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e3      	bne.n	80049b4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00e      	beq.n	8004a1a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049fc:	e006      	b.n	8004a0c <_PrintUnsigned+0x110>
        FieldWidth--;
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	3b01      	subs	r3, #1
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004a04:	2120      	movs	r1, #32
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fefc 	bl	8004804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <_PrintUnsigned+0x11e>
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3f1      	bcc.n	80049fe <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	080068e8 	.word	0x080068e8

08004a28 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfb8      	it	lt
 8004a3c:	425b      	neglt	r3, r3
 8004a3e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a44:	e007      	b.n	8004a56 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a4e:	613b      	str	r3, [r7, #16]
    Width++;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	daf3      	bge.n	8004a46 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d901      	bls.n	8004a6a <_PrintInt+0x42>
    Width = NumDigits;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <_PrintInt+0x5e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db04      	blt.n	8004a80 <_PrintInt+0x58>
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <_PrintInt+0x5e>
    FieldWidth--;
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <_PrintInt+0x6e>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <_PrintInt+0x9c>
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00e      	beq.n	8004ac4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004aa6:	e006      	b.n	8004ab6 <_PrintInt+0x8e>
        FieldWidth--;
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004aae:	2120      	movs	r1, #32
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fea7 	bl	8004804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <_PrintInt+0x9c>
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3f1      	bcc.n	8004aa8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da07      	bge.n	8004ada <_PrintInt+0xb2>
    v = -v;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	425b      	negs	r3, r3
 8004ace:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004ad0:	212d      	movs	r1, #45	; 0x2d
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fe96 	bl	8004804 <_StoreChar>
 8004ad8:	e008      	b.n	8004aec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004ae4:	212b      	movs	r1, #43	; 0x2b
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff fe8c 	bl	8004804 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d019      	beq.n	8004b2a <_PrintInt+0x102>
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d114      	bne.n	8004b2a <_PrintInt+0x102>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d111      	bne.n	8004b2a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b0c:	e006      	b.n	8004b1c <_PrintInt+0xf4>
        FieldWidth--;
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004b14:	2130      	movs	r1, #48	; 0x30
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff fe74 	bl	8004804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <_PrintInt+0x102>
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d3f1      	bcc.n	8004b0e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff fedf 	bl	80048fc <_PrintUnsigned>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b098      	sub	sp, #96	; 0x60
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	f04f 0120 	mov.w	r1, #32
 8004b5c:	f381 8811 	msr	BASEPRI, r1
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
 8004b62:	48b7      	ldr	r0, [pc, #732]	; (8004e40 <_VPrintTarget+0x2f8>)
 8004b64:	f7ff fc73 	bl	800444e <_PreparePacket>
 8004b68:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004b6a:	4bb5      	ldr	r3, [pc, #724]	; (8004e40 <_VPrintTarget+0x2f8>)
 8004b6c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004b8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8183 	beq.w	8004e9e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9c:	2b25      	cmp	r3, #37	; 0x25
 8004b9e:	f040 8170 	bne.w	8004e82 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb6:	3b23      	subs	r3, #35	; 0x23
 8004bb8:	2b0d      	cmp	r3, #13
 8004bba:	d83f      	bhi.n	8004c3c <_VPrintTarget+0xf4>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <_VPrintTarget+0x7c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004c3d 	.word	0x08004c3d
 8004bcc:	08004c3d 	.word	0x08004c3d
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c3d 	.word	0x08004c3d
 8004be4:	08004c1d 	.word	0x08004c1d
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004bfd 	.word	0x08004bfd
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c0d 	.word	0x08004c0d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e01a      	b.n	8004c42 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e012      	b.n	8004c42 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	f043 0304 	orr.w	r3, r3, #4
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e00a      	b.n	8004c42 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	f043 0308 	orr.w	r3, r3, #8
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e002      	b.n	8004c42 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c40:	bf00      	nop
        }
      } while (v);
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1b0      	bne.n	8004baa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c58:	2b2f      	cmp	r3, #47	; 0x2f
 8004c5a:	d912      	bls.n	8004c82 <_VPrintTarget+0x13a>
 8004c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c60:	2b39      	cmp	r3, #57	; 0x39
 8004c62:	d80e      	bhi.n	8004c82 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	461a      	mov	r2, r3
 8004c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3b30      	subs	r3, #48	; 0x30
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004c80:	e7e4      	b.n	8004c4c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004c82:	2300      	movs	r3, #0
 8004c84:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c92:	2b2e      	cmp	r3, #46	; 0x2e
 8004c94:	d11d      	bne.n	8004cd2 <_VPrintTarget+0x18a>
        sFormat++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8004caa:	d912      	bls.n	8004cd2 <_VPrintTarget+0x18a>
 8004cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cb0:	2b39      	cmp	r3, #57	; 0x39
 8004cb2:	d80e      	bhi.n	8004cd2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cca:	4413      	add	r3, r2
 8004ccc:	3b30      	subs	r3, #48	; 0x30
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004cd0:	e7e4      	b.n	8004c9c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cde:	2b6c      	cmp	r3, #108	; 0x6c
 8004ce0:	d003      	beq.n	8004cea <_VPrintTarget+0x1a2>
 8004ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ce6:	2b68      	cmp	r3, #104	; 0x68
 8004ce8:	d107      	bne.n	8004cfa <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004cf8:	e7ef      	b.n	8004cda <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cfe:	2b25      	cmp	r3, #37	; 0x25
 8004d00:	f000 80b3 	beq.w	8004e6a <_VPrintTarget+0x322>
 8004d04:	2b25      	cmp	r3, #37	; 0x25
 8004d06:	f2c0 80b7 	blt.w	8004e78 <_VPrintTarget+0x330>
 8004d0a:	2b78      	cmp	r3, #120	; 0x78
 8004d0c:	f300 80b4 	bgt.w	8004e78 <_VPrintTarget+0x330>
 8004d10:	2b58      	cmp	r3, #88	; 0x58
 8004d12:	f2c0 80b1 	blt.w	8004e78 <_VPrintTarget+0x330>
 8004d16:	3b58      	subs	r3, #88	; 0x58
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f200 80ad 	bhi.w	8004e78 <_VPrintTarget+0x330>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <_VPrintTarget+0x1dc>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004e1b 	.word	0x08004e1b
 8004d28:	08004e79 	.word	0x08004e79
 8004d2c:	08004e79 	.word	0x08004e79
 8004d30:	08004e79 	.word	0x08004e79
 8004d34:	08004e79 	.word	0x08004e79
 8004d38:	08004e79 	.word	0x08004e79
 8004d3c:	08004e79 	.word	0x08004e79
 8004d40:	08004e79 	.word	0x08004e79
 8004d44:	08004e79 	.word	0x08004e79
 8004d48:	08004e79 	.word	0x08004e79
 8004d4c:	08004e79 	.word	0x08004e79
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dcf 	.word	0x08004dcf
 8004d58:	08004e79 	.word	0x08004e79
 8004d5c:	08004e79 	.word	0x08004e79
 8004d60:	08004e79 	.word	0x08004e79
 8004d64:	08004e79 	.word	0x08004e79
 8004d68:	08004e79 	.word	0x08004e79
 8004d6c:	08004e79 	.word	0x08004e79
 8004d70:	08004e79 	.word	0x08004e79
 8004d74:	08004e79 	.word	0x08004e79
 8004d78:	08004e79 	.word	0x08004e79
 8004d7c:	08004e79 	.word	0x08004e79
 8004d80:	08004e79 	.word	0x08004e79
 8004d84:	08004e45 	.word	0x08004e45
 8004d88:	08004e79 	.word	0x08004e79
 8004d8c:	08004e79 	.word	0x08004e79
 8004d90:	08004e79 	.word	0x08004e79
 8004d94:	08004e79 	.word	0x08004e79
 8004d98:	08004df5 	.word	0x08004df5
 8004d9c:	08004e79 	.word	0x08004e79
 8004da0:	08004e79 	.word	0x08004e79
 8004da4:	08004e1b 	.word	0x08004e1b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004dbc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fd1c 	bl	8004804 <_StoreChar>
        break;
 8004dcc:	e055      	b.n	8004e7a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1d19      	adds	r1, r3, #4
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6011      	str	r1, [r2, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ddc:	f107 0014 	add.w	r0, r7, #20
 8004de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	220a      	movs	r2, #10
 8004dec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dee:	f7ff fe1b 	bl	8004a28 <_PrintInt>
        break;
 8004df2:	e042      	b.n	8004e7a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e04:	f107 0014 	add.w	r0, r7, #20
 8004e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	220a      	movs	r2, #10
 8004e14:	f7ff fd72 	bl	80048fc <_PrintUnsigned>
        break;
 8004e18:	e02f      	b.n	8004e7a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	1d19      	adds	r1, r3, #4
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6011      	str	r1, [r2, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004e28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e2a:	f107 0014 	add.w	r0, r7, #20
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e38:	2210      	movs	r2, #16
 8004e3a:	f7ff fd5f 	bl	80048fc <_PrintUnsigned>
        break;
 8004e3e:	e01c      	b.n	8004e7a <_VPrintTarget+0x332>
 8004e40:	2001a7b4 	.word	0x2001a7b4
      case 'p':
        v = va_arg(*pParamList, int);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e54:	f107 0014 	add.w	r0, r7, #20
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2308      	movs	r3, #8
 8004e62:	2210      	movs	r2, #16
 8004e64:	f7ff fd4a 	bl	80048fc <_PrintUnsigned>
        break;
 8004e68:	e007      	b.n	8004e7a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	2125      	movs	r1, #37	; 0x25
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fcc7 	bl	8004804 <_StoreChar>
        break;
 8004e76:	e000      	b.n	8004e7a <_VPrintTarget+0x332>
      default:
        break;
 8004e78:	bf00      	nop
      }
      sFormat++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e007      	b.n	8004e92 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004e82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fcb9 	bl	8004804 <_StoreChar>
    }
  } while (*sFormat);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f47f ae72 	bne.w	8004b80 <_VPrintTarget+0x38>
 8004e9c:	e000      	b.n	8004ea0 <_VPrintTarget+0x358>
      break;
 8004e9e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d041      	beq.n	8004f2a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	e00b      	b.n	8004ed0 <_VPrintTarget+0x388>
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	1c59      	adds	r1, r3, #1
 8004ec0:	6439      	str	r1, [r7, #64]	; 0x40
 8004ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	09db      	lsrs	r3, r3, #7
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed4:	d8f0      	bhi.n	8004eb8 <_VPrintTarget+0x370>
 8004ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	643a      	str	r2, [r7, #64]	; 0x40
 8004edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eea:	2300      	movs	r3, #0
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	e00b      	b.n	8004f08 <_VPrintTarget+0x3c0>
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	63b9      	str	r1, [r7, #56]	; 0x38
 8004efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	09db      	lsrs	r3, r3, #7
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0c:	d8f0      	bhi.n	8004ef0 <_VPrintTarget+0x3a8>
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	221a      	movs	r2, #26
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fb85 	bl	8004634 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004f30:	bf00      	nop
 8004f32:	3758      	adds	r7, #88	; 0x58
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f46:	2300      	movs	r3, #0
 8004f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f4c:	4917      	ldr	r1, [pc, #92]	; (8004fac <SEGGER_SYSVIEW_Init+0x74>)
 8004f4e:	4818      	ldr	r0, [pc, #96]	; (8004fb0 <SEGGER_SYSVIEW_Init+0x78>)
 8004f50:	f7ff f93c 	bl	80041cc <SEGGER_RTT_AllocUpBuffer>
 8004f54:	4603      	mov	r3, r0
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f5a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f5e:	785a      	ldrb	r2, [r3, #1]
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f62:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2308      	movs	r3, #8
 8004f70:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <SEGGER_SYSVIEW_Init+0x80>)
 8004f72:	490f      	ldr	r1, [pc, #60]	; (8004fb0 <SEGGER_SYSVIEW_Init+0x78>)
 8004f74:	f7ff f9ae 	bl	80042d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <SEGGER_SYSVIEW_Init+0x84>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f84:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004f86:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004f8c:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004f98:	4a06      	ldr	r2, [pc, #24]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	2001977c 	.word	0x2001977c
 8004fb0:	080068b0 	.word	0x080068b0
 8004fb4:	2001a784 	.word	0x2001a784
 8004fb8:	2001a77c 	.word	0x2001a77c
 8004fbc:	e0001004 	.word	0xe0001004

08004fc0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6113      	str	r3, [r2, #16]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2001a784 	.word	0x2001a784

08004fe0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fec:	f04f 0120 	mov.w	r1, #32
 8004ff0:	f381 8811 	msr	BASEPRI, r1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	4808      	ldr	r0, [pc, #32]	; (8005018 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ff8:	f7ff fa29 	bl	800444e <_PreparePacket>
 8004ffc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68b8      	ldr	r0, [r7, #8]
 8005004:	f7ff fb16 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	2001a7b4 	.word	0x2001a7b4

0800501c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005026:	f3ef 8311 	mrs	r3, BASEPRI
 800502a:	f04f 0120 	mov.w	r1, #32
 800502e:	f381 8811 	msr	BASEPRI, r1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	4816      	ldr	r0, [pc, #88]	; (8005090 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005036:	f7ff fa0a 	bl	800444e <_PreparePacket>
 800503a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	e00b      	b.n	8005062 <SEGGER_SYSVIEW_RecordU32+0x46>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	61f9      	str	r1, [r7, #28]
 8005054:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b7f      	cmp	r3, #127	; 0x7f
 8005066:	d8f0      	bhi.n	800504a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	6938      	ldr	r0, [r7, #16]
 800507e:	f7ff fad9 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f383 8811 	msr	BASEPRI, r3
}
 8005088:	bf00      	nop
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	2001a7b4 	.word	0x2001a7b4

08005094 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050a0:	f3ef 8311 	mrs	r3, BASEPRI
 80050a4:	f04f 0120 	mov.w	r1, #32
 80050a8:	f381 8811 	msr	BASEPRI, r1
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	4825      	ldr	r0, [pc, #148]	; (8005144 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80050b0:	f7ff f9cd 	bl	800444e <_PreparePacket>
 80050b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c2:	e00b      	b.n	80050dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	09db      	lsrs	r3, r3, #7
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	2b7f      	cmp	r3, #127	; 0x7f
 80050e0:	d8f0      	bhi.n	80050c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	e00b      	b.n	8005114 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	1c59      	adds	r1, r3, #1
 8005104:	6279      	str	r1, [r7, #36]	; 0x24
 8005106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	09db      	lsrs	r3, r3, #7
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b7f      	cmp	r3, #127	; 0x7f
 8005118:	d8f0      	bhi.n	80050fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	627a      	str	r2, [r7, #36]	; 0x24
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	69b8      	ldr	r0, [r7, #24]
 8005130:	f7ff fa80 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f383 8811 	msr	BASEPRI, r3
}
 800513a:	bf00      	nop
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2001a7b4 	.word	0x2001a7b4

08005148 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08c      	sub	sp, #48	; 0x30
 800514c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	f04f 0120 	mov.w	r1, #32
 800515c:	f381 8811 	msr	BASEPRI, r1
 8005160:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005162:	4b54      	ldr	r3, [pc, #336]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	220a      	movs	r2, #10
 8005168:	4953      	ldr	r1, [pc, #332]	; (80052b8 <SEGGER_SYSVIEW_Start+0x170>)
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb f830 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005176:	f7fe fc87 	bl	8003a88 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800517a:	200a      	movs	r0, #10
 800517c:	f7ff ff30 	bl	8004fe0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005180:	f3ef 8311 	mrs	r3, BASEPRI
 8005184:	f04f 0120 	mov.w	r1, #32
 8005188:	f381 8811 	msr	BASEPRI, r1
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	484b      	ldr	r0, [pc, #300]	; (80052bc <SEGGER_SYSVIEW_Start+0x174>)
 8005190:	f7ff f95d 	bl	800444e <_PreparePacket>
 8005194:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519e:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_Start+0x76>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_Start+0x5e>
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	e00b      	b.n	80051f8 <SEGGER_SYSVIEW_Start+0xb0>
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	6279      	str	r1, [r7, #36]	; 0x24
 80051ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b7f      	cmp	r3, #127	; 0x7f
 80051fc:	d8f0      	bhi.n	80051e0 <SEGGER_SYSVIEW_Start+0x98>
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	627a      	str	r2, [r7, #36]	; 0x24
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e00b      	b.n	8005232 <SEGGER_SYSVIEW_Start+0xea>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	61f9      	str	r1, [r7, #28]
 8005224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	09db      	lsrs	r3, r3, #7
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b7f      	cmp	r3, #127	; 0x7f
 8005236:	d8f0      	bhi.n	800521a <SEGGER_SYSVIEW_Start+0xd2>
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	61fa      	str	r2, [r7, #28]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e00b      	b.n	800526a <SEGGER_SYSVIEW_Start+0x122>
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	6179      	str	r1, [r7, #20]
 800525c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b7f      	cmp	r3, #127	; 0x7f
 800526e:	d8f0      	bhi.n	8005252 <SEGGER_SYSVIEW_Start+0x10a>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	617a      	str	r2, [r7, #20]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005280:	2218      	movs	r2, #24
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f9d5 	bl	8004634 <_SendPacket>
      RECORD_END();
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005290:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800529e:	f000 f9eb 	bl	8005678 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80052a2:	f000 f9b1 	bl	8005608 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80052a6:	f000 fc13 	bl	8005ad0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80052aa:	bf00      	nop
 80052ac:	3730      	adds	r7, #48	; 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	2001a784 	.word	0x2001a784
 80052b8:	080068dc 	.word	0x080068dc
 80052bc:	2001a7b4 	.word	0x2001a7b4

080052c0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052c6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ca:	f04f 0120 	mov.w	r1, #32
 80052ce:	f381 8811 	msr	BASEPRI, r1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	480b      	ldr	r0, [pc, #44]	; (8005304 <SEGGER_SYSVIEW_Stop+0x44>)
 80052d6:	f7ff f8ba 	bl	800444e <_PreparePacket>
 80052da:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <SEGGER_SYSVIEW_Stop+0x48>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80052e4:	220b      	movs	r2, #11
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6838      	ldr	r0, [r7, #0]
 80052ea:	f7ff f9a3 	bl	8004634 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <SEGGER_SYSVIEW_Stop+0x48>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f383 8811 	msr	BASEPRI, r3
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2001a7b4 	.word	0x2001a7b4
 8005308:	2001a784 	.word	0x2001a784

0800530c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	; 0x30
 8005310:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005312:	f3ef 8311 	mrs	r3, BASEPRI
 8005316:	f04f 0120 	mov.w	r1, #32
 800531a:	f381 8811 	msr	BASEPRI, r1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	4845      	ldr	r0, [pc, #276]	; (8005438 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005322:	f7ff f894 	bl	800444e <_PreparePacket>
 8005326:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005330:	4b42      	ldr	r3, [pc, #264]	; (800543c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
 8005336:	e00b      	b.n	8005350 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	b2da      	uxtb	r2, r3
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	09db      	lsrs	r3, r3, #7
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b7f      	cmp	r3, #127	; 0x7f
 8005354:	d8f0      	bhi.n	8005338 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	4b34      	ldr	r3, [pc, #208]	; (800543c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	e00b      	b.n	800538a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	6279      	str	r1, [r7, #36]	; 0x24
 800537c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	09db      	lsrs	r3, r3, #7
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2b7f      	cmp	r3, #127	; 0x7f
 800538e:	d8f0      	bhi.n	8005372 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	627a      	str	r2, [r7, #36]	; 0x24
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e00b      	b.n	80053c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	61f9      	str	r1, [r7, #28]
 80053b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b7f      	cmp	r3, #127	; 0x7f
 80053c8:	d8f0      	bhi.n	80053ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	61fa      	str	r2, [r7, #28]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e00b      	b.n	80053fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	6179      	str	r1, [r7, #20]
 80053ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	617a      	str	r2, [r7, #20]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005412:	2218      	movs	r2, #24
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	68b8      	ldr	r0, [r7, #8]
 8005418:	f7ff f90c 	bl	8004634 <_SendPacket>
  RECORD_END();
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800542a:	4b04      	ldr	r3, [pc, #16]	; (800543c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	4798      	blx	r3
  }
}
 8005430:	bf00      	nop
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	2001a7b4 	.word	0x2001a7b4
 800543c:	2001a784 	.word	0x2001a784

08005440 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b092      	sub	sp, #72	; 0x48
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005448:	f3ef 8311 	mrs	r3, BASEPRI
 800544c:	f04f 0120 	mov.w	r1, #32
 8005450:	f381 8811 	msr	BASEPRI, r1
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	486a      	ldr	r0, [pc, #424]	; (8005600 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005458:	f7fe fff9 	bl	800444e <_PreparePacket>
 800545c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b66      	ldr	r3, [pc, #408]	; (8005604 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	643b      	str	r3, [r7, #64]	; 0x40
 8005472:	e00b      	b.n	800548c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	6479      	str	r1, [r7, #68]	; 0x44
 800547e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	09db      	lsrs	r3, r3, #7
 800548a:	643b      	str	r3, [r7, #64]	; 0x40
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	2b7f      	cmp	r3, #127	; 0x7f
 8005490:	d8f0      	bhi.n	8005474 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	647a      	str	r2, [r7, #68]	; 0x44
 8005498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ac:	e00b      	b.n	80054c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	4619      	mov	r1, r3
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7fe ff65 	bl	80043b4 <_EncodeStr>
 80054ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80054ec:	2209      	movs	r2, #9
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	6938      	ldr	r0, [r7, #16]
 80054f2:	f7ff f89f 	bl	8004634 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b40      	ldr	r3, [pc, #256]	; (8005604 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
 800550a:	e00b      	b.n	8005524 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	b2da      	uxtb	r2, r3
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	6379      	str	r1, [r7, #52]	; 0x34
 8005516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	09db      	lsrs	r3, r3, #7
 8005522:	633b      	str	r3, [r7, #48]	; 0x30
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2b7f      	cmp	r3, #127	; 0x7f
 8005528:	d8f0      	bhi.n	800550c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	637a      	str	r2, [r7, #52]	; 0x34
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
 8005544:	e00b      	b.n	800555e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	d8f0      	bhi.n	8005546 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800556a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	e00b      	b.n	8005598 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	6279      	str	r1, [r7, #36]	; 0x24
 800558a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	09db      	lsrs	r3, r3, #7
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2b7f      	cmp	r3, #127	; 0x7f
 800559c:	d8f0      	bhi.n	8005580 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	627a      	str	r2, [r7, #36]	; 0x24
 80055a4:	6a3a      	ldr	r2, [r7, #32]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e00b      	b.n	80055d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	61f9      	str	r1, [r7, #28]
 80055c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	09db      	lsrs	r3, r3, #7
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b7f      	cmp	r3, #127	; 0x7f
 80055d4:	d8f0      	bhi.n	80055b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	61fa      	str	r2, [r7, #28]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80055e6:	2215      	movs	r2, #21
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f7ff f822 	bl	8004634 <_SendPacket>
  RECORD_END();
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f383 8811 	msr	BASEPRI, r3
}
 80055f6:	bf00      	nop
 80055f8:	3748      	adds	r7, #72	; 0x48
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	2001a7b4 	.word	0x2001a7b4
 8005604:	2001a784 	.word	0x2001a784

08005608 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4798      	blx	r3
  }
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2001a784 	.word	0x2001a784

08005630 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005638:	f3ef 8311 	mrs	r3, BASEPRI
 800563c:	f04f 0120 	mov.w	r1, #32
 8005640:	f381 8811 	msr	BASEPRI, r1
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	480b      	ldr	r0, [pc, #44]	; (8005674 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005648:	f7fe ff01 	bl	800444e <_PreparePacket>
 800564c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	6938      	ldr	r0, [r7, #16]
 8005654:	f7fe feae 	bl	80043b4 <_EncodeStr>
 8005658:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800565a:	220e      	movs	r2, #14
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	6938      	ldr	r0, [r7, #16]
 8005660:	f7fe ffe8 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f383 8811 	msr	BASEPRI, r3
}
 800566a:	bf00      	nop
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2001a7b4 	.word	0x2001a7b4

08005678 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01a      	beq.n	80056bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005690:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4798      	blx	r3
 8005698:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800569c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800569e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	000a      	movs	r2, r1
 80056ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056ae:	4613      	mov	r3, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	4621      	mov	r1, r4
 80056b4:	200d      	movs	r0, #13
 80056b6:	f7ff fced 	bl	8005094 <SEGGER_SYSVIEW_RecordU32x2>
 80056ba:	e006      	b.n	80056ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	200c      	movs	r0, #12
 80056c4:	f7ff fcaa 	bl	800501c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd90      	pop	{r4, r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2001a784 	.word	0x2001a784
 80056d8:	e0001004 	.word	0xe0001004

080056dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056e2:	f3ef 8311 	mrs	r3, BASEPRI
 80056e6:	f04f 0120 	mov.w	r1, #32
 80056ea:	f381 8811 	msr	BASEPRI, r1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	4819      	ldr	r0, [pc, #100]	; (8005758 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80056f2:	f7fe feac 	bl	800444e <_PreparePacket>
 80056f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80056fc:	4b17      	ldr	r3, [pc, #92]	; (800575c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e00b      	b.n	8005728 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6179      	str	r1, [r7, #20]
 800571a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b7f      	cmp	r3, #127	; 0x7f
 800572c:	d8f0      	bhi.n	8005710 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	617a      	str	r2, [r7, #20]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800573e:	2202      	movs	r2, #2
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68b8      	ldr	r0, [r7, #8]
 8005744:	f7fe ff76 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	2001a7b4 	.word	0x2001a7b4
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005766:	f3ef 8311 	mrs	r3, BASEPRI
 800576a:	f04f 0120 	mov.w	r1, #32
 800576e:	f381 8811 	msr	BASEPRI, r1
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	4807      	ldr	r0, [pc, #28]	; (8005794 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005776:	f7fe fe6a 	bl	800444e <_PreparePacket>
 800577a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800577c:	2203      	movs	r2, #3
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6838      	ldr	r0, [r7, #0]
 8005782:	f7fe ff57 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f383 8811 	msr	BASEPRI, r3
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	2001a7b4 	.word	0x2001a7b4

08005798 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800579e:	f3ef 8311 	mrs	r3, BASEPRI
 80057a2:	f04f 0120 	mov.w	r1, #32
 80057a6:	f381 8811 	msr	BASEPRI, r1
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	4807      	ldr	r0, [pc, #28]	; (80057cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80057ae:	f7fe fe4e 	bl	800444e <_PreparePacket>
 80057b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80057b4:	2212      	movs	r2, #18
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6838      	ldr	r0, [r7, #0]
 80057ba:	f7fe ff3b 	bl	8004634 <_SendPacket>
  RECORD_END();
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f383 8811 	msr	BASEPRI, r3
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2001a7b4 	.word	0x2001a7b4

080057d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057d6:	f3ef 8311 	mrs	r3, BASEPRI
 80057da:	f04f 0120 	mov.w	r1, #32
 80057de:	f381 8811 	msr	BASEPRI, r1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	4807      	ldr	r0, [pc, #28]	; (8005804 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80057e6:	f7fe fe32 	bl	800444e <_PreparePacket>
 80057ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80057ec:	2211      	movs	r2, #17
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6838      	ldr	r0, [r7, #0]
 80057f2:	f7fe ff1f 	bl	8004634 <_SendPacket>
  RECORD_END();
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f383 8811 	msr	BASEPRI, r3
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	2001a7b4 	.word	0x2001a7b4

08005808 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005810:	f3ef 8311 	mrs	r3, BASEPRI
 8005814:	f04f 0120 	mov.w	r1, #32
 8005818:	f381 8811 	msr	BASEPRI, r1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	4819      	ldr	r0, [pc, #100]	; (8005884 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005820:	f7fe fe15 	bl	800444e <_PreparePacket>
 8005824:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e00b      	b.n	8005856 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	61f9      	str	r1, [r7, #28]
 8005848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	d8f0      	bhi.n	800583e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800586c:	2208      	movs	r2, #8
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	6938      	ldr	r0, [r7, #16]
 8005872:	f7fe fedf 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f383 8811 	msr	BASEPRI, r3
}
 800587c:	bf00      	nop
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	2001a7b4 	.word	0x2001a7b4
 8005888:	2001a784 	.word	0x2001a784

0800588c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005894:	f3ef 8311 	mrs	r3, BASEPRI
 8005898:	f04f 0120 	mov.w	r1, #32
 800589c:	f381 8811 	msr	BASEPRI, r1
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	4819      	ldr	r0, [pc, #100]	; (8005908 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80058a4:	f7fe fdd3 	bl	800444e <_PreparePacket>
 80058a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	61f9      	str	r1, [r7, #28]
 80058cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b7f      	cmp	r3, #127	; 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80058f0:	2204      	movs	r2, #4
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6938      	ldr	r0, [r7, #16]
 80058f6:	f7fe fe9d 	bl	8004634 <_SendPacket>
  RECORD_END();
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f383 8811 	msr	BASEPRI, r3
}
 8005900:	bf00      	nop
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2001a7b4 	.word	0x2001a7b4
 800590c:	2001a784 	.word	0x2001a784

08005910 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005918:	f3ef 8311 	mrs	r3, BASEPRI
 800591c:	f04f 0120 	mov.w	r1, #32
 8005920:	f381 8811 	msr	BASEPRI, r1
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	4819      	ldr	r0, [pc, #100]	; (800598c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005928:	f7fe fd91 	bl	800444e <_PreparePacket>
 800592c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005932:	4b17      	ldr	r3, [pc, #92]	; (8005990 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e00b      	b.n	800595e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	61f9      	str	r1, [r7, #28]
 8005950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b7f      	cmp	r3, #127	; 0x7f
 8005962:	d8f0      	bhi.n	8005946 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	61fa      	str	r2, [r7, #28]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005974:	2206      	movs	r2, #6
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6938      	ldr	r0, [r7, #16]
 800597a:	f7fe fe5b 	bl	8004634 <_SendPacket>
  RECORD_END();
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f383 8811 	msr	BASEPRI, r3
}
 8005984:	bf00      	nop
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2001a7b4 	.word	0x2001a7b4
 8005990:	2001a784 	.word	0x2001a784

08005994 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800599e:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d06d      	beq.n	8005a82 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80059a6:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b0:	e008      	b.n	80059c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	3301      	adds	r3, #1
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d3f2      	bcc.n	80059b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80059cc:	e000      	b.n	80059d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80059ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d055      	beq.n	8005a82 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059d6:	f3ef 8311 	mrs	r3, BASEPRI
 80059da:	f04f 0120 	mov.w	r1, #32
 80059de:	f381 8811 	msr	BASEPRI, r1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	482a      	ldr	r0, [pc, #168]	; (8005a90 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80059e6:	f7fe fd32 	bl	800444e <_PreparePacket>
 80059ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	e00b      	b.n	8005a12 <SEGGER_SYSVIEW_SendModule+0x7e>
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	6279      	str	r1, [r7, #36]	; 0x24
 8005a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	09db      	lsrs	r3, r3, #7
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2b7f      	cmp	r3, #127	; 0x7f
 8005a16:	d8f0      	bhi.n	80059fa <SEGGER_SYSVIEW_SendModule+0x66>
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a1e:	6a3a      	ldr	r2, [r7, #32]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e00b      	b.n	8005a4c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	61f9      	str	r1, [r7, #28]
 8005a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	09db      	lsrs	r3, r3, #7
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a50:	d8f0      	bhi.n	8005a34 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	61fa      	str	r2, [r7, #28]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	4619      	mov	r1, r3
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7fe fca2 	bl	80043b4 <_EncodeStr>
 8005a70:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a72:	2216      	movs	r2, #22
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f7fe fddc 	bl	8004634 <_SendPacket>
      RECORD_END();
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005a82:	bf00      	nop
 8005a84:	3730      	adds	r7, #48	; 0x30
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2001a7ac 	.word	0x2001a7ac
 8005a90:	2001a7b4 	.word	0x2001a7b4

08005a94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00f      	beq.n	8005ac2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f2      	bne.n	8005aa8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2001a7ac 	.word	0x2001a7ac

08005ad0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ada:	f04f 0120 	mov.w	r1, #32
 8005ade:	f381 8811 	msr	BASEPRI, r1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	4817      	ldr	r0, [pc, #92]	; (8005b44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005ae6:	f7fe fcb2 	bl	800444e <_PreparePacket>
 8005aea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	e00b      	b.n	8005b14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	6179      	str	r1, [r7, #20]
 8005b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	09db      	lsrs	r3, r3, #7
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b7f      	cmp	r3, #127	; 0x7f
 8005b18:	d8f0      	bhi.n	8005afc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	617a      	str	r2, [r7, #20]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005b2a:	221b      	movs	r2, #27
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	68b8      	ldr	r0, [r7, #8]
 8005b30:	f7fe fd80 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f383 8811 	msr	BASEPRI, r3
}
 8005b3a:	bf00      	nop
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2001a7b4 	.word	0x2001a7b4
 8005b48:	2001a7b0 	.word	0x2001a7b0

08005b4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005b4c:	b40f      	push	{r0, r1, r2, r3}
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6938      	ldr	r0, [r7, #16]
 8005b62:	f7fe fff1 	bl	8004b48 <_VPrintTarget>
  va_end(ParamList);
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b70:	b004      	add	sp, #16
 8005b72:	4770      	bx	lr

08005b74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	; 0x28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b80:	f04f 0120 	mov.w	r1, #32
 8005b84:	f381 8811 	msr	BASEPRI, r1
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	4827      	ldr	r0, [pc, #156]	; (8005c28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b8c:	f7fe fc5f 	bl	800444e <_PreparePacket>
 8005b90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	6938      	ldr	r0, [r7, #16]
 8005b98:	f7fe fc0c 	bl	80043b4 <_EncodeStr>
 8005b9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	e00b      	b.n	8005bc0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	09db      	lsrs	r3, r3, #7
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc4:	d8f0      	bhi.n	8005ba8 <SEGGER_SYSVIEW_Warn+0x34>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	627a      	str	r2, [r7, #36]	; 0x24
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e00b      	b.n	8005bf8 <SEGGER_SYSVIEW_Warn+0x84>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	61f9      	str	r1, [r7, #28]
 8005bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	09db      	lsrs	r3, r3, #7
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfc:	d8f0      	bhi.n	8005be0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	61fa      	str	r2, [r7, #28]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c0e:	221a      	movs	r2, #26
 8005c10:	68f9      	ldr	r1, [r7, #12]
 8005c12:	6938      	ldr	r0, [r7, #16]
 8005c14:	f7fe fd0e 	bl	8004634 <_SendPacket>
  RECORD_END();
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
}
 8005c1e:	bf00      	nop
 8005c20:	3728      	adds	r7, #40	; 0x28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	2001a7b4 	.word	0x2001a7b4

08005c2c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c32:	7e1b      	ldrb	r3, [r3, #24]
 8005c34:	4619      	mov	r1, r3
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c38:	460b      	mov	r3, r1
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	440b      	add	r3, r1
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	336c      	adds	r3, #108	; 0x6c
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c48:	7e1b      	ldrb	r3, [r3, #24]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	490d      	ldr	r1, [pc, #52]	; (8005c84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c4e:	4603      	mov	r3, r0
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4403      	add	r3, r0
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	440b      	add	r3, r1
 8005c58:	3370      	adds	r3, #112	; 0x70
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d00b      	beq.n	8005c78 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c6e:	f7fe fbfb 	bl	8004468 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c72:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005c78:	4b01      	ldr	r3, [pc, #4]	; (8005c80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	2001a784 	.word	0x2001a784
 8005c84:	200192c4 	.word	0x200192c4

08005c88 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fe fa70 	bl	8004180 <SEGGER_RTT_Write>
  return len;
 8005ca0:	683b      	ldr	r3, [r7, #0]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000001c 	.word	0x2000001c

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 fd2a 	bl	8006724 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	08006964 	.word	0x08006964
 8005cf4:	08006964 	.word	0x08006964
 8005cf8:	08006964 	.word	0x08006964
 8005cfc:	08006968 	.word	0x08006968

08005d00 <memcmp>:
 8005d00:	b510      	push	{r4, lr}
 8005d02:	3901      	subs	r1, #1
 8005d04:	4402      	add	r2, r0
 8005d06:	4290      	cmp	r0, r2
 8005d08:	d101      	bne.n	8005d0e <memcmp+0xe>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e005      	b.n	8005d1a <memcmp+0x1a>
 8005d0e:	7803      	ldrb	r3, [r0, #0]
 8005d10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	d001      	beq.n	8005d1c <memcmp+0x1c>
 8005d18:	1b18      	subs	r0, r3, r4
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	e7f2      	b.n	8005d06 <memcmp+0x6>

08005d20 <memcpy>:
 8005d20:	440a      	add	r2, r1
 8005d22:	4291      	cmp	r1, r2
 8005d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d28:	d100      	bne.n	8005d2c <memcpy+0xc>
 8005d2a:	4770      	bx	lr
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d36:	4291      	cmp	r1, r2
 8005d38:	d1f9      	bne.n	8005d2e <memcpy+0xe>
 8005d3a:	bd10      	pop	{r4, pc}

08005d3c <memset>:
 8005d3c:	4402      	add	r2, r0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d100      	bne.n	8005d46 <memset+0xa>
 8005d44:	4770      	bx	lr
 8005d46:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4a:	e7f9      	b.n	8005d40 <memset+0x4>

08005d4c <_puts_r>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	460e      	mov	r6, r1
 8005d50:	4605      	mov	r5, r0
 8005d52:	b118      	cbz	r0, 8005d5c <_puts_r+0x10>
 8005d54:	6983      	ldr	r3, [r0, #24]
 8005d56:	b90b      	cbnz	r3, 8005d5c <_puts_r+0x10>
 8005d58:	f000 fa48 	bl	80061ec <__sinit>
 8005d5c:	69ab      	ldr	r3, [r5, #24]
 8005d5e:	68ac      	ldr	r4, [r5, #8]
 8005d60:	b913      	cbnz	r3, 8005d68 <_puts_r+0x1c>
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 fa42 	bl	80061ec <__sinit>
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <_puts_r+0xd0>)
 8005d6a:	429c      	cmp	r4, r3
 8005d6c:	d120      	bne.n	8005db0 <_puts_r+0x64>
 8005d6e:	686c      	ldr	r4, [r5, #4]
 8005d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d72:	07db      	lsls	r3, r3, #31
 8005d74:	d405      	bmi.n	8005d82 <_puts_r+0x36>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	0598      	lsls	r0, r3, #22
 8005d7a:	d402      	bmi.n	8005d82 <_puts_r+0x36>
 8005d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d7e:	f000 fad3 	bl	8006328 <__retarget_lock_acquire_recursive>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	0719      	lsls	r1, r3, #28
 8005d86:	d51d      	bpl.n	8005dc4 <_puts_r+0x78>
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	b1db      	cbz	r3, 8005dc4 <_puts_r+0x78>
 8005d8c:	3e01      	subs	r6, #1
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d94:	3b01      	subs	r3, #1
 8005d96:	60a3      	str	r3, [r4, #8]
 8005d98:	bb39      	cbnz	r1, 8005dea <_puts_r+0x9e>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da38      	bge.n	8005e10 <_puts_r+0xc4>
 8005d9e:	4622      	mov	r2, r4
 8005da0:	210a      	movs	r1, #10
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 f848 	bl	8005e38 <__swbuf_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d011      	beq.n	8005dd0 <_puts_r+0x84>
 8005dac:	250a      	movs	r5, #10
 8005dae:	e011      	b.n	8005dd4 <_puts_r+0x88>
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <_puts_r+0xd4>)
 8005db2:	429c      	cmp	r4, r3
 8005db4:	d101      	bne.n	8005dba <_puts_r+0x6e>
 8005db6:	68ac      	ldr	r4, [r5, #8]
 8005db8:	e7da      	b.n	8005d70 <_puts_r+0x24>
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <_puts_r+0xd8>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	bf08      	it	eq
 8005dc0:	68ec      	ldreq	r4, [r5, #12]
 8005dc2:	e7d5      	b.n	8005d70 <_puts_r+0x24>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f888 	bl	8005edc <__swsetup_r>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d0dd      	beq.n	8005d8c <_puts_r+0x40>
 8005dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8005dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd6:	07da      	lsls	r2, r3, #31
 8005dd8:	d405      	bmi.n	8005de6 <_puts_r+0x9a>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_puts_r+0x9a>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f000 faa2 	bl	800632a <__retarget_lock_release_recursive>
 8005de6:	4628      	mov	r0, r5
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da04      	bge.n	8005df8 <_puts_r+0xac>
 8005dee:	69a2      	ldr	r2, [r4, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	dc06      	bgt.n	8005e02 <_puts_r+0xb6>
 8005df4:	290a      	cmp	r1, #10
 8005df6:	d004      	beq.n	8005e02 <_puts_r+0xb6>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	7019      	strb	r1, [r3, #0]
 8005e00:	e7c5      	b.n	8005d8e <_puts_r+0x42>
 8005e02:	4622      	mov	r2, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f817 	bl	8005e38 <__swbuf_r>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d1bf      	bne.n	8005d8e <_puts_r+0x42>
 8005e0e:	e7df      	b.n	8005dd0 <_puts_r+0x84>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	250a      	movs	r5, #10
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	701d      	strb	r5, [r3, #0]
 8005e1a:	e7db      	b.n	8005dd4 <_puts_r+0x88>
 8005e1c:	0800691c 	.word	0x0800691c
 8005e20:	0800693c 	.word	0x0800693c
 8005e24:	080068fc 	.word	0x080068fc

08005e28 <puts>:
 8005e28:	4b02      	ldr	r3, [pc, #8]	; (8005e34 <puts+0xc>)
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	f7ff bf8d 	b.w	8005d4c <_puts_r>
 8005e32:	bf00      	nop
 8005e34:	2000001c 	.word	0x2000001c

08005e38 <__swbuf_r>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	4605      	mov	r5, r0
 8005e40:	b118      	cbz	r0, 8005e4a <__swbuf_r+0x12>
 8005e42:	6983      	ldr	r3, [r0, #24]
 8005e44:	b90b      	cbnz	r3, 8005e4a <__swbuf_r+0x12>
 8005e46:	f000 f9d1 	bl	80061ec <__sinit>
 8005e4a:	4b21      	ldr	r3, [pc, #132]	; (8005ed0 <__swbuf_r+0x98>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d12b      	bne.n	8005ea8 <__swbuf_r+0x70>
 8005e50:	686c      	ldr	r4, [r5, #4]
 8005e52:	69a3      	ldr	r3, [r4, #24]
 8005e54:	60a3      	str	r3, [r4, #8]
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	071a      	lsls	r2, r3, #28
 8005e5a:	d52f      	bpl.n	8005ebc <__swbuf_r+0x84>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	b36b      	cbz	r3, 8005ebc <__swbuf_r+0x84>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	1ac0      	subs	r0, r0, r3
 8005e66:	6963      	ldr	r3, [r4, #20]
 8005e68:	b2f6      	uxtb	r6, r6
 8005e6a:	4283      	cmp	r3, r0
 8005e6c:	4637      	mov	r7, r6
 8005e6e:	dc04      	bgt.n	8005e7a <__swbuf_r+0x42>
 8005e70:	4621      	mov	r1, r4
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f926 	bl	80060c4 <_fflush_r>
 8005e78:	bb30      	cbnz	r0, 8005ec8 <__swbuf_r+0x90>
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	6022      	str	r2, [r4, #0]
 8005e86:	701e      	strb	r6, [r3, #0]
 8005e88:	6963      	ldr	r3, [r4, #20]
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	4283      	cmp	r3, r0
 8005e8e:	d004      	beq.n	8005e9a <__swbuf_r+0x62>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d506      	bpl.n	8005ea4 <__swbuf_r+0x6c>
 8005e96:	2e0a      	cmp	r6, #10
 8005e98:	d104      	bne.n	8005ea4 <__swbuf_r+0x6c>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f000 f911 	bl	80060c4 <_fflush_r>
 8005ea2:	b988      	cbnz	r0, 8005ec8 <__swbuf_r+0x90>
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <__swbuf_r+0x9c>)
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d101      	bne.n	8005eb2 <__swbuf_r+0x7a>
 8005eae:	68ac      	ldr	r4, [r5, #8]
 8005eb0:	e7cf      	b.n	8005e52 <__swbuf_r+0x1a>
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <__swbuf_r+0xa0>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	bf08      	it	eq
 8005eb8:	68ec      	ldreq	r4, [r5, #12]
 8005eba:	e7ca      	b.n	8005e52 <__swbuf_r+0x1a>
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f80c 	bl	8005edc <__swsetup_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d0cb      	beq.n	8005e60 <__swbuf_r+0x28>
 8005ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ecc:	e7ea      	b.n	8005ea4 <__swbuf_r+0x6c>
 8005ece:	bf00      	nop
 8005ed0:	0800691c 	.word	0x0800691c
 8005ed4:	0800693c 	.word	0x0800693c
 8005ed8:	080068fc 	.word	0x080068fc

08005edc <__swsetup_r>:
 8005edc:	4b32      	ldr	r3, [pc, #200]	; (8005fa8 <__swsetup_r+0xcc>)
 8005ede:	b570      	push	{r4, r5, r6, lr}
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	b125      	cbz	r5, 8005ef2 <__swsetup_r+0x16>
 8005ee8:	69ab      	ldr	r3, [r5, #24]
 8005eea:	b913      	cbnz	r3, 8005ef2 <__swsetup_r+0x16>
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 f97d 	bl	80061ec <__sinit>
 8005ef2:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <__swsetup_r+0xd0>)
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d10f      	bne.n	8005f18 <__swsetup_r+0x3c>
 8005ef8:	686c      	ldr	r4, [r5, #4]
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f00:	0719      	lsls	r1, r3, #28
 8005f02:	d42c      	bmi.n	8005f5e <__swsetup_r+0x82>
 8005f04:	06dd      	lsls	r5, r3, #27
 8005f06:	d411      	bmi.n	8005f2c <__swsetup_r+0x50>
 8005f08:	2309      	movs	r3, #9
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	e03e      	b.n	8005f96 <__swsetup_r+0xba>
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <__swsetup_r+0xd4>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d101      	bne.n	8005f22 <__swsetup_r+0x46>
 8005f1e:	68ac      	ldr	r4, [r5, #8]
 8005f20:	e7eb      	b.n	8005efa <__swsetup_r+0x1e>
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <__swsetup_r+0xd8>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	bf08      	it	eq
 8005f28:	68ec      	ldreq	r4, [r5, #12]
 8005f2a:	e7e6      	b.n	8005efa <__swsetup_r+0x1e>
 8005f2c:	0758      	lsls	r0, r3, #29
 8005f2e:	d512      	bpl.n	8005f56 <__swsetup_r+0x7a>
 8005f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f32:	b141      	cbz	r1, 8005f46 <__swsetup_r+0x6a>
 8005f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <__swsetup_r+0x66>
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f000 fa5b 	bl	80063f8 <_free_r>
 8005f42:	2300      	movs	r3, #0
 8005f44:	6363      	str	r3, [r4, #52]	; 0x34
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	b94b      	cbnz	r3, 8005f76 <__swsetup_r+0x9a>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d003      	beq.n	8005f76 <__swsetup_r+0x9a>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4630      	mov	r0, r6
 8005f72:	f000 fa01 	bl	8006378 <__smakebuf_r>
 8005f76:	89a0      	ldrh	r0, [r4, #12]
 8005f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f7c:	f010 0301 	ands.w	r3, r0, #1
 8005f80:	d00a      	beq.n	8005f98 <__swsetup_r+0xbc>
 8005f82:	2300      	movs	r3, #0
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	6963      	ldr	r3, [r4, #20]
 8005f88:	425b      	negs	r3, r3
 8005f8a:	61a3      	str	r3, [r4, #24]
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	b943      	cbnz	r3, 8005fa2 <__swsetup_r+0xc6>
 8005f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f94:	d1ba      	bne.n	8005f0c <__swsetup_r+0x30>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	0781      	lsls	r1, r0, #30
 8005f9a:	bf58      	it	pl
 8005f9c:	6963      	ldrpl	r3, [r4, #20]
 8005f9e:	60a3      	str	r3, [r4, #8]
 8005fa0:	e7f4      	b.n	8005f8c <__swsetup_r+0xb0>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e7f7      	b.n	8005f96 <__swsetup_r+0xba>
 8005fa6:	bf00      	nop
 8005fa8:	2000001c 	.word	0x2000001c
 8005fac:	0800691c 	.word	0x0800691c
 8005fb0:	0800693c 	.word	0x0800693c
 8005fb4:	080068fc 	.word	0x080068fc

08005fb8 <__sflush_r>:
 8005fb8:	898a      	ldrh	r2, [r1, #12]
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	0710      	lsls	r0, r2, #28
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	d458      	bmi.n	8006078 <__sflush_r+0xc0>
 8005fc6:	684b      	ldr	r3, [r1, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc05      	bgt.n	8005fd8 <__sflush_r+0x20>
 8005fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dc02      	bgt.n	8005fd8 <__sflush_r+0x20>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	d0f9      	beq.n	8005fd2 <__sflush_r+0x1a>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fe4:	682f      	ldr	r7, [r5, #0]
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	d032      	beq.n	8006050 <__sflush_r+0x98>
 8005fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	075a      	lsls	r2, r3, #29
 8005ff0:	d505      	bpl.n	8005ffe <__sflush_r+0x46>
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	1ac0      	subs	r0, r0, r3
 8005ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ff8:	b10b      	cbz	r3, 8005ffe <__sflush_r+0x46>
 8005ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ffc:	1ac0      	subs	r0, r0, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	4602      	mov	r2, r0
 8006002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006004:	6a21      	ldr	r1, [r4, #32]
 8006006:	4628      	mov	r0, r5
 8006008:	47b0      	blx	r6
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	d106      	bne.n	800601e <__sflush_r+0x66>
 8006010:	6829      	ldr	r1, [r5, #0]
 8006012:	291d      	cmp	r1, #29
 8006014:	d82c      	bhi.n	8006070 <__sflush_r+0xb8>
 8006016:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <__sflush_r+0x108>)
 8006018:	40ca      	lsrs	r2, r1
 800601a:	07d6      	lsls	r6, r2, #31
 800601c:	d528      	bpl.n	8006070 <__sflush_r+0xb8>
 800601e:	2200      	movs	r2, #0
 8006020:	6062      	str	r2, [r4, #4]
 8006022:	04d9      	lsls	r1, r3, #19
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	6022      	str	r2, [r4, #0]
 8006028:	d504      	bpl.n	8006034 <__sflush_r+0x7c>
 800602a:	1c42      	adds	r2, r0, #1
 800602c:	d101      	bne.n	8006032 <__sflush_r+0x7a>
 800602e:	682b      	ldr	r3, [r5, #0]
 8006030:	b903      	cbnz	r3, 8006034 <__sflush_r+0x7c>
 8006032:	6560      	str	r0, [r4, #84]	; 0x54
 8006034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006036:	602f      	str	r7, [r5, #0]
 8006038:	2900      	cmp	r1, #0
 800603a:	d0ca      	beq.n	8005fd2 <__sflush_r+0x1a>
 800603c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <__sflush_r+0x92>
 8006044:	4628      	mov	r0, r5
 8006046:	f000 f9d7 	bl	80063f8 <_free_r>
 800604a:	2000      	movs	r0, #0
 800604c:	6360      	str	r0, [r4, #52]	; 0x34
 800604e:	e7c1      	b.n	8005fd4 <__sflush_r+0x1c>
 8006050:	6a21      	ldr	r1, [r4, #32]
 8006052:	2301      	movs	r3, #1
 8006054:	4628      	mov	r0, r5
 8006056:	47b0      	blx	r6
 8006058:	1c41      	adds	r1, r0, #1
 800605a:	d1c7      	bne.n	8005fec <__sflush_r+0x34>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0c4      	beq.n	8005fec <__sflush_r+0x34>
 8006062:	2b1d      	cmp	r3, #29
 8006064:	d001      	beq.n	800606a <__sflush_r+0xb2>
 8006066:	2b16      	cmp	r3, #22
 8006068:	d101      	bne.n	800606e <__sflush_r+0xb6>
 800606a:	602f      	str	r7, [r5, #0]
 800606c:	e7b1      	b.n	8005fd2 <__sflush_r+0x1a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	e7ad      	b.n	8005fd4 <__sflush_r+0x1c>
 8006078:	690f      	ldr	r7, [r1, #16]
 800607a:	2f00      	cmp	r7, #0
 800607c:	d0a9      	beq.n	8005fd2 <__sflush_r+0x1a>
 800607e:	0793      	lsls	r3, r2, #30
 8006080:	680e      	ldr	r6, [r1, #0]
 8006082:	bf08      	it	eq
 8006084:	694b      	ldreq	r3, [r1, #20]
 8006086:	600f      	str	r7, [r1, #0]
 8006088:	bf18      	it	ne
 800608a:	2300      	movne	r3, #0
 800608c:	eba6 0807 	sub.w	r8, r6, r7
 8006090:	608b      	str	r3, [r1, #8]
 8006092:	f1b8 0f00 	cmp.w	r8, #0
 8006096:	dd9c      	ble.n	8005fd2 <__sflush_r+0x1a>
 8006098:	6a21      	ldr	r1, [r4, #32]
 800609a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800609c:	4643      	mov	r3, r8
 800609e:	463a      	mov	r2, r7
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b0      	blx	r6
 80060a4:	2800      	cmp	r0, #0
 80060a6:	dc06      	bgt.n	80060b6 <__sflush_r+0xfe>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	e78e      	b.n	8005fd4 <__sflush_r+0x1c>
 80060b6:	4407      	add	r7, r0
 80060b8:	eba8 0800 	sub.w	r8, r8, r0
 80060bc:	e7e9      	b.n	8006092 <__sflush_r+0xda>
 80060be:	bf00      	nop
 80060c0:	20400001 	.word	0x20400001

080060c4 <_fflush_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	690b      	ldr	r3, [r1, #16]
 80060c8:	4605      	mov	r5, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	b913      	cbnz	r3, 80060d4 <_fflush_r+0x10>
 80060ce:	2500      	movs	r5, #0
 80060d0:	4628      	mov	r0, r5
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	b118      	cbz	r0, 80060de <_fflush_r+0x1a>
 80060d6:	6983      	ldr	r3, [r0, #24]
 80060d8:	b90b      	cbnz	r3, 80060de <_fflush_r+0x1a>
 80060da:	f000 f887 	bl	80061ec <__sinit>
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <_fflush_r+0x6c>)
 80060e0:	429c      	cmp	r4, r3
 80060e2:	d11b      	bne.n	800611c <_fflush_r+0x58>
 80060e4:	686c      	ldr	r4, [r5, #4]
 80060e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ef      	beq.n	80060ce <_fflush_r+0xa>
 80060ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060f0:	07d0      	lsls	r0, r2, #31
 80060f2:	d404      	bmi.n	80060fe <_fflush_r+0x3a>
 80060f4:	0599      	lsls	r1, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_fflush_r+0x3a>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f000 f915 	bl	8006328 <__retarget_lock_acquire_recursive>
 80060fe:	4628      	mov	r0, r5
 8006100:	4621      	mov	r1, r4
 8006102:	f7ff ff59 	bl	8005fb8 <__sflush_r>
 8006106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006108:	07da      	lsls	r2, r3, #31
 800610a:	4605      	mov	r5, r0
 800610c:	d4e0      	bmi.n	80060d0 <_fflush_r+0xc>
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	059b      	lsls	r3, r3, #22
 8006112:	d4dd      	bmi.n	80060d0 <_fflush_r+0xc>
 8006114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006116:	f000 f908 	bl	800632a <__retarget_lock_release_recursive>
 800611a:	e7d9      	b.n	80060d0 <_fflush_r+0xc>
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <_fflush_r+0x70>)
 800611e:	429c      	cmp	r4, r3
 8006120:	d101      	bne.n	8006126 <_fflush_r+0x62>
 8006122:	68ac      	ldr	r4, [r5, #8]
 8006124:	e7df      	b.n	80060e6 <_fflush_r+0x22>
 8006126:	4b04      	ldr	r3, [pc, #16]	; (8006138 <_fflush_r+0x74>)
 8006128:	429c      	cmp	r4, r3
 800612a:	bf08      	it	eq
 800612c:	68ec      	ldreq	r4, [r5, #12]
 800612e:	e7da      	b.n	80060e6 <_fflush_r+0x22>
 8006130:	0800691c 	.word	0x0800691c
 8006134:	0800693c 	.word	0x0800693c
 8006138:	080068fc 	.word	0x080068fc

0800613c <std>:
 800613c:	2300      	movs	r3, #0
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	e9c0 3300 	strd	r3, r3, [r0]
 8006146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614a:	6083      	str	r3, [r0, #8]
 800614c:	8181      	strh	r1, [r0, #12]
 800614e:	6643      	str	r3, [r0, #100]	; 0x64
 8006150:	81c2      	strh	r2, [r0, #14]
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	2208      	movs	r2, #8
 8006158:	305c      	adds	r0, #92	; 0x5c
 800615a:	f7ff fdef 	bl	8005d3c <memset>
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x38>)
 8006160:	6263      	str	r3, [r4, #36]	; 0x24
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x3c>)
 8006164:	62a3      	str	r3, [r4, #40]	; 0x28
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x40>)
 8006168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <std+0x44>)
 800616c:	6224      	str	r4, [r4, #32]
 800616e:	6323      	str	r3, [r4, #48]	; 0x30
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	080065d9 	.word	0x080065d9
 8006178:	080065fb 	.word	0x080065fb
 800617c:	08006633 	.word	0x08006633
 8006180:	08006657 	.word	0x08006657

08006184 <_cleanup_r>:
 8006184:	4901      	ldr	r1, [pc, #4]	; (800618c <_cleanup_r+0x8>)
 8006186:	f000 b8af 	b.w	80062e8 <_fwalk_reent>
 800618a:	bf00      	nop
 800618c:	080060c5 	.word	0x080060c5

08006190 <__sfmoreglue>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	2268      	movs	r2, #104	; 0x68
 8006194:	1e4d      	subs	r5, r1, #1
 8006196:	4355      	muls	r5, r2
 8006198:	460e      	mov	r6, r1
 800619a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800619e:	f000 f997 	bl	80064d0 <_malloc_r>
 80061a2:	4604      	mov	r4, r0
 80061a4:	b140      	cbz	r0, 80061b8 <__sfmoreglue+0x28>
 80061a6:	2100      	movs	r1, #0
 80061a8:	e9c0 1600 	strd	r1, r6, [r0]
 80061ac:	300c      	adds	r0, #12
 80061ae:	60a0      	str	r0, [r4, #8]
 80061b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b4:	f7ff fdc2 	bl	8005d3c <memset>
 80061b8:	4620      	mov	r0, r4
 80061ba:	bd70      	pop	{r4, r5, r6, pc}

080061bc <__sfp_lock_acquire>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__sfp_lock_acquire+0x8>)
 80061be:	f000 b8b3 	b.w	8006328 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	2001a898 	.word	0x2001a898

080061c8 <__sfp_lock_release>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__sfp_lock_release+0x8>)
 80061ca:	f000 b8ae 	b.w	800632a <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	2001a898 	.word	0x2001a898

080061d4 <__sinit_lock_acquire>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__sinit_lock_acquire+0x8>)
 80061d6:	f000 b8a7 	b.w	8006328 <__retarget_lock_acquire_recursive>
 80061da:	bf00      	nop
 80061dc:	2001a899 	.word	0x2001a899

080061e0 <__sinit_lock_release>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__sinit_lock_release+0x8>)
 80061e2:	f000 b8a2 	b.w	800632a <__retarget_lock_release_recursive>
 80061e6:	bf00      	nop
 80061e8:	2001a899 	.word	0x2001a899

080061ec <__sinit>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4604      	mov	r4, r0
 80061f0:	f7ff fff0 	bl	80061d4 <__sinit_lock_acquire>
 80061f4:	69a3      	ldr	r3, [r4, #24]
 80061f6:	b11b      	cbz	r3, 8006200 <__sinit+0x14>
 80061f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fc:	f7ff bff0 	b.w	80061e0 <__sinit_lock_release>
 8006200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006204:	6523      	str	r3, [r4, #80]	; 0x50
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <__sinit+0x68>)
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <__sinit+0x6c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	62a2      	str	r2, [r4, #40]	; 0x28
 800620e:	42a3      	cmp	r3, r4
 8006210:	bf04      	itt	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	61a3      	streq	r3, [r4, #24]
 8006216:	4620      	mov	r0, r4
 8006218:	f000 f820 	bl	800625c <__sfp>
 800621c:	6060      	str	r0, [r4, #4]
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f81c 	bl	800625c <__sfp>
 8006224:	60a0      	str	r0, [r4, #8]
 8006226:	4620      	mov	r0, r4
 8006228:	f000 f818 	bl	800625c <__sfp>
 800622c:	2200      	movs	r2, #0
 800622e:	60e0      	str	r0, [r4, #12]
 8006230:	2104      	movs	r1, #4
 8006232:	6860      	ldr	r0, [r4, #4]
 8006234:	f7ff ff82 	bl	800613c <std>
 8006238:	68a0      	ldr	r0, [r4, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	2109      	movs	r1, #9
 800623e:	f7ff ff7d 	bl	800613c <std>
 8006242:	68e0      	ldr	r0, [r4, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	2112      	movs	r1, #18
 8006248:	f7ff ff78 	bl	800613c <std>
 800624c:	2301      	movs	r3, #1
 800624e:	61a3      	str	r3, [r4, #24]
 8006250:	e7d2      	b.n	80061f8 <__sinit+0xc>
 8006252:	bf00      	nop
 8006254:	080068f8 	.word	0x080068f8
 8006258:	08006185 	.word	0x08006185

0800625c <__sfp>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	4607      	mov	r7, r0
 8006260:	f7ff ffac 	bl	80061bc <__sfp_lock_acquire>
 8006264:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <__sfp+0x84>)
 8006266:	681e      	ldr	r6, [r3, #0]
 8006268:	69b3      	ldr	r3, [r6, #24]
 800626a:	b913      	cbnz	r3, 8006272 <__sfp+0x16>
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff ffbd 	bl	80061ec <__sinit>
 8006272:	3648      	adds	r6, #72	; 0x48
 8006274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006278:	3b01      	subs	r3, #1
 800627a:	d503      	bpl.n	8006284 <__sfp+0x28>
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	b30b      	cbz	r3, 80062c4 <__sfp+0x68>
 8006280:	6836      	ldr	r6, [r6, #0]
 8006282:	e7f7      	b.n	8006274 <__sfp+0x18>
 8006284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006288:	b9d5      	cbnz	r5, 80062c0 <__sfp+0x64>
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <__sfp+0x88>)
 800628c:	60e3      	str	r3, [r4, #12]
 800628e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006292:	6665      	str	r5, [r4, #100]	; 0x64
 8006294:	f000 f847 	bl	8006326 <__retarget_lock_init_recursive>
 8006298:	f7ff ff96 	bl	80061c8 <__sfp_lock_release>
 800629c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062a4:	6025      	str	r5, [r4, #0]
 80062a6:	61a5      	str	r5, [r4, #24]
 80062a8:	2208      	movs	r2, #8
 80062aa:	4629      	mov	r1, r5
 80062ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062b0:	f7ff fd44 	bl	8005d3c <memset>
 80062b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062bc:	4620      	mov	r0, r4
 80062be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062c0:	3468      	adds	r4, #104	; 0x68
 80062c2:	e7d9      	b.n	8006278 <__sfp+0x1c>
 80062c4:	2104      	movs	r1, #4
 80062c6:	4638      	mov	r0, r7
 80062c8:	f7ff ff62 	bl	8006190 <__sfmoreglue>
 80062cc:	4604      	mov	r4, r0
 80062ce:	6030      	str	r0, [r6, #0]
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d1d5      	bne.n	8006280 <__sfp+0x24>
 80062d4:	f7ff ff78 	bl	80061c8 <__sfp_lock_release>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	e7ee      	b.n	80062bc <__sfp+0x60>
 80062de:	bf00      	nop
 80062e0:	080068f8 	.word	0x080068f8
 80062e4:	ffff0001 	.word	0xffff0001

080062e8 <_fwalk_reent>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	4606      	mov	r6, r0
 80062ee:	4688      	mov	r8, r1
 80062f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062f4:	2700      	movs	r7, #0
 80062f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062fa:	f1b9 0901 	subs.w	r9, r9, #1
 80062fe:	d505      	bpl.n	800630c <_fwalk_reent+0x24>
 8006300:	6824      	ldr	r4, [r4, #0]
 8006302:	2c00      	cmp	r4, #0
 8006304:	d1f7      	bne.n	80062f6 <_fwalk_reent+0xe>
 8006306:	4638      	mov	r0, r7
 8006308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630c:	89ab      	ldrh	r3, [r5, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d907      	bls.n	8006322 <_fwalk_reent+0x3a>
 8006312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006316:	3301      	adds	r3, #1
 8006318:	d003      	beq.n	8006322 <_fwalk_reent+0x3a>
 800631a:	4629      	mov	r1, r5
 800631c:	4630      	mov	r0, r6
 800631e:	47c0      	blx	r8
 8006320:	4307      	orrs	r7, r0
 8006322:	3568      	adds	r5, #104	; 0x68
 8006324:	e7e9      	b.n	80062fa <_fwalk_reent+0x12>

08006326 <__retarget_lock_init_recursive>:
 8006326:	4770      	bx	lr

08006328 <__retarget_lock_acquire_recursive>:
 8006328:	4770      	bx	lr

0800632a <__retarget_lock_release_recursive>:
 800632a:	4770      	bx	lr

0800632c <__swhatbuf_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	460e      	mov	r6, r1
 8006330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006334:	2900      	cmp	r1, #0
 8006336:	b096      	sub	sp, #88	; 0x58
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	da08      	bge.n	8006350 <__swhatbuf_r+0x24>
 800633e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	061a      	lsls	r2, r3, #24
 8006348:	d410      	bmi.n	800636c <__swhatbuf_r+0x40>
 800634a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634e:	e00e      	b.n	800636e <__swhatbuf_r+0x42>
 8006350:	466a      	mov	r2, sp
 8006352:	f000 f995 	bl	8006680 <_fstat_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	dbf1      	blt.n	800633e <__swhatbuf_r+0x12>
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006364:	425a      	negs	r2, r3
 8006366:	415a      	adcs	r2, r3
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	e7ee      	b.n	800634a <__swhatbuf_r+0x1e>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	2000      	movs	r0, #0
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	b016      	add	sp, #88	; 0x58
 8006374:	bd70      	pop	{r4, r5, r6, pc}
	...

08006378 <__smakebuf_r>:
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800637c:	079d      	lsls	r5, r3, #30
 800637e:	4606      	mov	r6, r0
 8006380:	460c      	mov	r4, r1
 8006382:	d507      	bpl.n	8006394 <__smakebuf_r+0x1c>
 8006384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	2301      	movs	r3, #1
 800638e:	6163      	str	r3, [r4, #20]
 8006390:	b002      	add	sp, #8
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	ab01      	add	r3, sp, #4
 8006396:	466a      	mov	r2, sp
 8006398:	f7ff ffc8 	bl	800632c <__swhatbuf_r>
 800639c:	9900      	ldr	r1, [sp, #0]
 800639e:	4605      	mov	r5, r0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 f895 	bl	80064d0 <_malloc_r>
 80063a6:	b948      	cbnz	r0, 80063bc <__smakebuf_r+0x44>
 80063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ac:	059a      	lsls	r2, r3, #22
 80063ae:	d4ef      	bmi.n	8006390 <__smakebuf_r+0x18>
 80063b0:	f023 0303 	bic.w	r3, r3, #3
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	e7e3      	b.n	8006384 <__smakebuf_r+0xc>
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <__smakebuf_r+0x7c>)
 80063be:	62b3      	str	r3, [r6, #40]	; 0x28
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	6163      	str	r3, [r4, #20]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	6120      	str	r0, [r4, #16]
 80063d2:	b15b      	cbz	r3, 80063ec <__smakebuf_r+0x74>
 80063d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f963 	bl	80066a4 <_isatty_r>
 80063de:	b128      	cbz	r0, 80063ec <__smakebuf_r+0x74>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	89a0      	ldrh	r0, [r4, #12]
 80063ee:	4305      	orrs	r5, r0
 80063f0:	81a5      	strh	r5, [r4, #12]
 80063f2:	e7cd      	b.n	8006390 <__smakebuf_r+0x18>
 80063f4:	08006185 	.word	0x08006185

080063f8 <_free_r>:
 80063f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fa:	2900      	cmp	r1, #0
 80063fc:	d044      	beq.n	8006488 <_free_r+0x90>
 80063fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006402:	9001      	str	r0, [sp, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f1a1 0404 	sub.w	r4, r1, #4
 800640a:	bfb8      	it	lt
 800640c:	18e4      	addlt	r4, r4, r3
 800640e:	f000 f96b 	bl	80066e8 <__malloc_lock>
 8006412:	4a1e      	ldr	r2, [pc, #120]	; (800648c <_free_r+0x94>)
 8006414:	9801      	ldr	r0, [sp, #4]
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b933      	cbnz	r3, 8006428 <_free_r+0x30>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6014      	str	r4, [r2, #0]
 800641e:	b003      	add	sp, #12
 8006420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006424:	f000 b966 	b.w	80066f4 <__malloc_unlock>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d908      	bls.n	800643e <_free_r+0x46>
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	1961      	adds	r1, r4, r5
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1949      	addeq	r1, r1, r5
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	e7ed      	b.n	800641a <_free_r+0x22>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x50>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x46>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1855      	adds	r5, r2, r1
 800644c:	42a5      	cmp	r5, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x70>
 8006450:	6824      	ldr	r4, [r4, #0]
 8006452:	4421      	add	r1, r4
 8006454:	1854      	adds	r4, r2, r1
 8006456:	42a3      	cmp	r3, r4
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1e0      	bne.n	800641e <_free_r+0x26>
 800645c:	681c      	ldr	r4, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6053      	str	r3, [r2, #4]
 8006462:	4421      	add	r1, r4
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	e7da      	b.n	800641e <_free_r+0x26>
 8006468:	d902      	bls.n	8006470 <_free_r+0x78>
 800646a:	230c      	movs	r3, #12
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	e7d6      	b.n	800641e <_free_r+0x26>
 8006470:	6825      	ldr	r5, [r4, #0]
 8006472:	1961      	adds	r1, r4, r5
 8006474:	428b      	cmp	r3, r1
 8006476:	bf04      	itt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	bf04      	itt	eq
 8006480:	1949      	addeq	r1, r1, r5
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6054      	str	r4, [r2, #4]
 8006486:	e7ca      	b.n	800641e <_free_r+0x26>
 8006488:	b003      	add	sp, #12
 800648a:	bd30      	pop	{r4, r5, pc}
 800648c:	2001a89c 	.word	0x2001a89c

08006490 <sbrk_aligned>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4e0e      	ldr	r6, [pc, #56]	; (80064cc <sbrk_aligned+0x3c>)
 8006494:	460c      	mov	r4, r1
 8006496:	6831      	ldr	r1, [r6, #0]
 8006498:	4605      	mov	r5, r0
 800649a:	b911      	cbnz	r1, 80064a2 <sbrk_aligned+0x12>
 800649c:	f000 f88c 	bl	80065b8 <_sbrk_r>
 80064a0:	6030      	str	r0, [r6, #0]
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f887 	bl	80065b8 <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d00a      	beq.n	80064c4 <sbrk_aligned+0x34>
 80064ae:	1cc4      	adds	r4, r0, #3
 80064b0:	f024 0403 	bic.w	r4, r4, #3
 80064b4:	42a0      	cmp	r0, r4
 80064b6:	d007      	beq.n	80064c8 <sbrk_aligned+0x38>
 80064b8:	1a21      	subs	r1, r4, r0
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f87c 	bl	80065b8 <_sbrk_r>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d101      	bne.n	80064c8 <sbrk_aligned+0x38>
 80064c4:	f04f 34ff 	mov.w	r4, #4294967295
 80064c8:	4620      	mov	r0, r4
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	2001a8a0 	.word	0x2001a8a0

080064d0 <_malloc_r>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	1ccd      	adds	r5, r1, #3
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	4607      	mov	r7, r0
 80064e6:	db01      	blt.n	80064ec <_malloc_r+0x1c>
 80064e8:	42a9      	cmp	r1, r5
 80064ea:	d905      	bls.n	80064f8 <_malloc_r+0x28>
 80064ec:	230c      	movs	r3, #12
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	2600      	movs	r6, #0
 80064f2:	4630      	mov	r0, r6
 80064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f8:	4e2e      	ldr	r6, [pc, #184]	; (80065b4 <_malloc_r+0xe4>)
 80064fa:	f000 f8f5 	bl	80066e8 <__malloc_lock>
 80064fe:	6833      	ldr	r3, [r6, #0]
 8006500:	461c      	mov	r4, r3
 8006502:	bb34      	cbnz	r4, 8006552 <_malloc_r+0x82>
 8006504:	4629      	mov	r1, r5
 8006506:	4638      	mov	r0, r7
 8006508:	f7ff ffc2 	bl	8006490 <sbrk_aligned>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	4604      	mov	r4, r0
 8006510:	d14d      	bne.n	80065ae <_malloc_r+0xde>
 8006512:	6834      	ldr	r4, [r6, #0]
 8006514:	4626      	mov	r6, r4
 8006516:	2e00      	cmp	r6, #0
 8006518:	d140      	bne.n	800659c <_malloc_r+0xcc>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	4631      	mov	r1, r6
 800651e:	4638      	mov	r0, r7
 8006520:	eb04 0803 	add.w	r8, r4, r3
 8006524:	f000 f848 	bl	80065b8 <_sbrk_r>
 8006528:	4580      	cmp	r8, r0
 800652a:	d13a      	bne.n	80065a2 <_malloc_r+0xd2>
 800652c:	6821      	ldr	r1, [r4, #0]
 800652e:	3503      	adds	r5, #3
 8006530:	1a6d      	subs	r5, r5, r1
 8006532:	f025 0503 	bic.w	r5, r5, #3
 8006536:	3508      	adds	r5, #8
 8006538:	2d0c      	cmp	r5, #12
 800653a:	bf38      	it	cc
 800653c:	250c      	movcc	r5, #12
 800653e:	4629      	mov	r1, r5
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa5 	bl	8006490 <sbrk_aligned>
 8006546:	3001      	adds	r0, #1
 8006548:	d02b      	beq.n	80065a2 <_malloc_r+0xd2>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	442b      	add	r3, r5
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	e00e      	b.n	8006570 <_malloc_r+0xa0>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	1b52      	subs	r2, r2, r5
 8006556:	d41e      	bmi.n	8006596 <_malloc_r+0xc6>
 8006558:	2a0b      	cmp	r2, #11
 800655a:	d916      	bls.n	800658a <_malloc_r+0xba>
 800655c:	1961      	adds	r1, r4, r5
 800655e:	42a3      	cmp	r3, r4
 8006560:	6025      	str	r5, [r4, #0]
 8006562:	bf18      	it	ne
 8006564:	6059      	strne	r1, [r3, #4]
 8006566:	6863      	ldr	r3, [r4, #4]
 8006568:	bf08      	it	eq
 800656a:	6031      	streq	r1, [r6, #0]
 800656c:	5162      	str	r2, [r4, r5]
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	4638      	mov	r0, r7
 8006572:	f104 060b 	add.w	r6, r4, #11
 8006576:	f000 f8bd 	bl	80066f4 <__malloc_unlock>
 800657a:	f026 0607 	bic.w	r6, r6, #7
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	1af2      	subs	r2, r6, r3
 8006582:	d0b6      	beq.n	80064f2 <_malloc_r+0x22>
 8006584:	1b9b      	subs	r3, r3, r6
 8006586:	50a3      	str	r3, [r4, r2]
 8006588:	e7b3      	b.n	80064f2 <_malloc_r+0x22>
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	42a3      	cmp	r3, r4
 800658e:	bf0c      	ite	eq
 8006590:	6032      	streq	r2, [r6, #0]
 8006592:	605a      	strne	r2, [r3, #4]
 8006594:	e7ec      	b.n	8006570 <_malloc_r+0xa0>
 8006596:	4623      	mov	r3, r4
 8006598:	6864      	ldr	r4, [r4, #4]
 800659a:	e7b2      	b.n	8006502 <_malloc_r+0x32>
 800659c:	4634      	mov	r4, r6
 800659e:	6876      	ldr	r6, [r6, #4]
 80065a0:	e7b9      	b.n	8006516 <_malloc_r+0x46>
 80065a2:	230c      	movs	r3, #12
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4638      	mov	r0, r7
 80065a8:	f000 f8a4 	bl	80066f4 <__malloc_unlock>
 80065ac:	e7a1      	b.n	80064f2 <_malloc_r+0x22>
 80065ae:	6025      	str	r5, [r4, #0]
 80065b0:	e7de      	b.n	8006570 <_malloc_r+0xa0>
 80065b2:	bf00      	nop
 80065b4:	2001a89c 	.word	0x2001a89c

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	; (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fa fb8a 	bl	8000cdc <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	2001a8a4 	.word	0x2001a8a4

080065d8 <__sread>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	460c      	mov	r4, r1
 80065dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e0:	f000 f88e 	bl	8006700 <_read_r>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	bfab      	itete	ge
 80065e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ea:	89a3      	ldrhlt	r3, [r4, #12]
 80065ec:	181b      	addge	r3, r3, r0
 80065ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065f2:	bfac      	ite	ge
 80065f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065f6:	81a3      	strhlt	r3, [r4, #12]
 80065f8:	bd10      	pop	{r4, pc}

080065fa <__swrite>:
 80065fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	461f      	mov	r7, r3
 8006600:	898b      	ldrh	r3, [r1, #12]
 8006602:	05db      	lsls	r3, r3, #23
 8006604:	4605      	mov	r5, r0
 8006606:	460c      	mov	r4, r1
 8006608:	4616      	mov	r6, r2
 800660a:	d505      	bpl.n	8006618 <__swrite+0x1e>
 800660c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006610:	2302      	movs	r3, #2
 8006612:	2200      	movs	r2, #0
 8006614:	f000 f856 	bl	80066c4 <_lseek_r>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	4628      	mov	r0, r5
 800662a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	f7ff bb2b 	b.w	8005c88 <_write_r>

08006632 <__sseek>:
 8006632:	b510      	push	{r4, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663a:	f000 f843 	bl	80066c4 <_lseek_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	bf15      	itete	ne
 8006644:	6560      	strne	r0, [r4, #84]	; 0x54
 8006646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800664a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800664e:	81a3      	strheq	r3, [r4, #12]
 8006650:	bf18      	it	ne
 8006652:	81a3      	strhne	r3, [r4, #12]
 8006654:	bd10      	pop	{r4, pc}

08006656 <__sclose>:
 8006656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665a:	f000 b801 	b.w	8006660 <_close_r>
	...

08006660 <_close_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4d06      	ldr	r5, [pc, #24]	; (800667c <_close_r+0x1c>)
 8006664:	2300      	movs	r3, #0
 8006666:	4604      	mov	r4, r0
 8006668:	4608      	mov	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fa fb01 	bl	8000c72 <_close>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_close_r+0x1a>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_close_r+0x1a>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	2001a8a4 	.word	0x2001a8a4

08006680 <_fstat_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d07      	ldr	r5, [pc, #28]	; (80066a0 <_fstat_r+0x20>)
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	f7fa fafc 	bl	8000c8a <_fstat>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d102      	bne.n	800669c <_fstat_r+0x1c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b103      	cbz	r3, 800669c <_fstat_r+0x1c>
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	bd38      	pop	{r3, r4, r5, pc}
 800669e:	bf00      	nop
 80066a0:	2001a8a4 	.word	0x2001a8a4

080066a4 <_isatty_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_isatty_r+0x1c>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	f7fa fafb 	bl	8000caa <_isatty>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_isatty_r+0x1a>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_isatty_r+0x1a>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	2001a8a4 	.word	0x2001a8a4

080066c4 <_lseek_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d07      	ldr	r5, [pc, #28]	; (80066e4 <_lseek_r+0x20>)
 80066c8:	4604      	mov	r4, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	602a      	str	r2, [r5, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fa faf4 	bl	8000cc0 <_lseek>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_lseek_r+0x1e>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_lseek_r+0x1e>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	2001a8a4 	.word	0x2001a8a4

080066e8 <__malloc_lock>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__malloc_lock+0x8>)
 80066ea:	f7ff be1d 	b.w	8006328 <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	2001a897 	.word	0x2001a897

080066f4 <__malloc_unlock>:
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <__malloc_unlock+0x8>)
 80066f6:	f7ff be18 	b.w	800632a <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	2001a897 	.word	0x2001a897

08006700 <_read_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	; (8006720 <_read_r+0x20>)
 8006704:	4604      	mov	r4, r0
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	2200      	movs	r2, #0
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fa fa92 	bl	8000c38 <_read>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_read_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_read_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	2001a8a4 	.word	0x2001a8a4

08006724 <_init>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr

08006730 <_fini>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr
