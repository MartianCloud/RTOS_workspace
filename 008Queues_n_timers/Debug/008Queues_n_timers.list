
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800908c  0800908c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009094  08009094  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019318  2000008c  08009128  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200193a4  08009128  000293a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001597e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003825  00000000  00000000  00035a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00039260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025366  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001825e  00000000  00000000  00060d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad43  00000000  00000000  00078f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  00153d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008be0 	.word	0x08008be0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008be0 	.word	0x08008be0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 f9fa 	bl	80069bc <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000130 	.word	0x20000130

080005e4 <led_effect>:

void led_effect(int n )
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 fae1 	bl	8005bc0 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 f9d6 	bl	80069bc <xTimerGenericCommand>

}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000130 	.word	0x20000130

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 ff66 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 ff60 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 ff5a 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 ff54 	bl	80024f8 <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 ff48 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 ff42 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 ff3c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 ff36 	bl	80024f8 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <turn_on_odd_leds+0x38>)
 80006a0:	f001 ff2a 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <turn_on_odd_leds+0x38>)
 80006ac:	f001 ff24 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <turn_on_odd_leds+0x38>)
 80006b8:	f001 ff1e 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <turn_on_odd_leds+0x38>)
 80006c4:	f001 ff18 	bl	80024f8 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <turn_on_even_leds+0x38>)
 80006dc:	f001 ff0c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <turn_on_even_leds+0x38>)
 80006e8:	f001 ff06 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <turn_on_even_leds+0x38>)
 80006f4:	f001 ff00 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <turn_on_even_leds+0x38>)
 8000700:	f001 fefa 	bl	80024f8 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <LED_control>:

void LED_control( int value )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e014      	b.n	8000744 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b299      	uxth	r1, r3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <LED_control+0x48>)
 800073a:	f001 fedd 	bl	80024f8 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dde7      	ble.n	800071a <LED_control+0xe>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020c00 	.word	0x40020c00

08000758 <LED_effect1>:


void LED_effect1(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_effect1+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <LED_effect1+0x28>)
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_effect1+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <LED_effect1+0x1e>
 8000770:	f7ff ff54 	bl	800061c <turn_off_all_leds>
}
 8000774:	e001      	b.n	800077a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000776:	f7ff ff6f 	bl	8000658 <turn_on_all_leds>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <LED_effect2>:


void LED_effect2(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LED_effect2+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <LED_effect2+0x28>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_effect2+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <LED_effect2+0x1e>
 800079c:	f7ff ff98 	bl	80006d0 <turn_on_even_leds>
}
 80007a0:	e001      	b.n	80007a6 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007a2:	f7ff ff77 	bl	8000694 <turn_on_odd_leds>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000004 	.word	0x20000004

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff9a 	bl	800070c <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <LED_effect4>:


void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff82 	bl	800070c <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 fb1d 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f911 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9e1 	bl	8000be4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f98f 	bl	8000b44 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f9b3 	bl	8000b90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x1cc>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2302      	movs	r3, #2
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	22fa      	movs	r2, #250	; 0xfa
 8000836:	496a      	ldr	r1, [pc, #424]	; (80009e0 <main+0x1d0>)
 8000838:	486a      	ldr	r0, [pc, #424]	; (80009e4 <main+0x1d4>)
 800083a:	f004 ff7f 	bl	800573c <xTaskCreate>
 800083e:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00a      	beq.n	800085c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000858:	bf00      	nop
 800085a:	e7fe      	b.n	800085a <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x1d8>)
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	22fa      	movs	r2, #250	; 0xfa
 8000868:	4960      	ldr	r1, [pc, #384]	; (80009ec <main+0x1dc>)
 800086a:	4861      	ldr	r0, [pc, #388]	; (80009f0 <main+0x1e0>)
 800086c:	f004 ff66 	bl	800573c <xTaskCreate>
 8000870:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00a      	beq.n	800088e <main+0x7e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <main+0x1e4>)
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	22fa      	movs	r2, #250	; 0xfa
 800089a:	4957      	ldr	r1, [pc, #348]	; (80009f8 <main+0x1e8>)
 800089c:	4857      	ldr	r0, [pc, #348]	; (80009fc <main+0x1ec>)
 800089e:	f004 ff4d 	bl	800573c <xTaskCreate>
 80008a2:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00a      	beq.n	80008c0 <main+0xb0>
        __asm volatile
 80008aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ae:	f383 8811 	msr	BASEPRI, r3
 80008b2:	f3bf 8f6f 	isb	sy
 80008b6:	f3bf 8f4f 	dsb	sy
 80008ba:	617b      	str	r3, [r7, #20]
    }
 80008bc:	bf00      	nop
 80008be:	e7fe      	b.n	80008be <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x1f0>)
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	2302      	movs	r3, #2
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	494d      	ldr	r1, [pc, #308]	; (8000a04 <main+0x1f4>)
 80008ce:	484e      	ldr	r0, [pc, #312]	; (8000a08 <main+0x1f8>)
 80008d0:	f004 ff34 	bl	800573c <xTaskCreate>
 80008d4:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00a      	beq.n	80008f2 <main+0xe2>
        __asm volatile
 80008dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	613b      	str	r3, [r7, #16]
    }
 80008ee:	bf00      	nop
 80008f0:	e7fe      	b.n	80008f0 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <main+0x1fc>)
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	4944      	ldr	r1, [pc, #272]	; (8000a10 <main+0x200>)
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <main+0x204>)
 8000902:	f004 ff1b 	bl	800573c <xTaskCreate>
 8000906:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d00a      	beq.n	8000924 <main+0x114>
        __asm volatile
 800090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000912:	f383 8811 	msr	BASEPRI, r3
 8000916:	f3bf 8f6f 	isb	sy
 800091a:	f3bf 8f4f 	dsb	sy
 800091e:	60fb      	str	r3, [r7, #12]
    }
 8000920:	bf00      	nop
 8000922:	e7fe      	b.n	8000922 <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	200a      	movs	r0, #10
 800092a:	f004 f9bb 	bl	8004ca4 <xQueueGenericCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <main+0x208>)
 8000932:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <main+0x208>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x142>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	60bb      	str	r3, [r7, #8]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	200a      	movs	r0, #10
 8000958:	f004 f9a4 	bl	8004ca4 <xQueueGenericCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <main+0x20c>)
 8000960:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <main+0x20c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <main+0x170>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	607b      	str	r3, [r7, #4]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	e013      	b.n	80009ae <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x210>)
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000998:	4822      	ldr	r0, [pc, #136]	; (8000a24 <main+0x214>)
 800099a:	f005 ffb3 	bl	8006904 <xTimerCreate>
 800099e:	4602      	mov	r2, r0
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <main+0x218>)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3301      	adds	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dde8      	ble.n	8000986 <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <main+0x21c>)
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <main+0x220>)
 80009c2:	f005 ff9f 	bl	8006904 <xTimerCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <main+0x224>)
 80009ca:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	491a      	ldr	r1, [pc, #104]	; (8000a38 <main+0x228>)
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <main+0x22c>)
 80009d2:	f003 fa16 	bl	8003e02 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009d6:	f004 fff7 	bl	80059c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x1ca>
 80009dc:	20000118 	.word	0x20000118
 80009e0:	08008bf8 	.word	0x08008bf8
 80009e4:	080015dd 	.word	0x080015dd
 80009e8:	20000114 	.word	0x20000114
 80009ec:	08008c04 	.word	0x08008c04
 80009f0:	08001ce5 	.word	0x08001ce5
 80009f4:	2000011c 	.word	0x2000011c
 80009f8:	08008c10 	.word	0x08008c10
 80009fc:	08001ca5 	.word	0x08001ca5
 8000a00:	20000120 	.word	0x20000120
 8000a04:	08008c1c 	.word	0x08008c1c
 8000a08:	080016c5 	.word	0x080016c5
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	08008c28 	.word	0x08008c28
 8000a14:	08001839 	.word	0x08001839
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	2000012c 	.word	0x2000012c
 8000a20:	08000eb9 	.word	0x08000eb9
 8000a24:	08008c34 	.word	0x08008c34
 8000a28:	20000130 	.word	0x20000130
 8000a2c:	08000ea5 	.word	0x08000ea5
 8000a30:	08008c40 	.word	0x08008c40
 8000a34:	20000140 	.word	0x20000140
 8000a38:	20000144 	.word	0x20000144
 8000a3c:	200000d0 	.word	0x200000d0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b098      	sub	sp, #96	; 0x60
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 ff62 	bl	8007918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a30      	ldr	r2, [pc, #192]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <SystemClock_Config+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <SystemClock_Config+0x100>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ac6:	2332      	movs	r3, #50	; 0x32
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd28 	bl	800252c <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 fa77 	bl	8000fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 ff89 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b10:	f000 fa60 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f9cc 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 fa51 	bl	8000fd4 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3760      	adds	r7, #96	; 0x60
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <MX_RTC_Init+0x48>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b56:	227f      	movs	r2, #127	; 0x7f
 8000b58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b5c:	22ff      	movs	r2, #255	; 0xff
 8000b5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_RTC_Init+0x44>)
 8000b74:	f002 fa86 	bl	8003084 <HAL_RTC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b7e:	f000 fa29 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	40002800 	.word	0x40002800

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f003 f83c 	bl	8003c44 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f9ff 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4ba1      	ldr	r3, [pc, #644]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4aa0      	ldr	r2, [pc, #640]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b9e      	ldr	r3, [pc, #632]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b9a      	ldr	r3, [pc, #616]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a99      	ldr	r2, [pc, #612]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b93      	ldr	r3, [pc, #588]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a92      	ldr	r2, [pc, #584]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b90      	ldr	r3, [pc, #576]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a8b      	ldr	r2, [pc, #556]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b85      	ldr	r3, [pc, #532]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a84      	ldr	r2, [pc, #528]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b82      	ldr	r3, [pc, #520]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b7e      	ldr	r3, [pc, #504]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a7d      	ldr	r2, [pc, #500]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <MX_GPIO_Init+0x2a0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4878      	ldr	r0, [pc, #480]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000ca8:	f001 fc26 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4876      	ldr	r0, [pc, #472]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000cb2:	f001 fc21 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cbc:	4874      	ldr	r0, [pc, #464]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000cbe:	f001 fc1b 	bl	80024f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	486b      	ldr	r0, [pc, #428]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000cda:	f001 fa71 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4865      	ldr	r0, [pc, #404]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000cf6:	f001 fa63 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	485d      	ldr	r0, [pc, #372]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000d16:	f001 fa53 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <MX_GPIO_Init+0x2b0>)
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	485a      	ldr	r0, [pc, #360]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d2e:	f001 fa47 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d32:	2310      	movs	r3, #16
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d42:	2306      	movs	r3, #6
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4852      	ldr	r0, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d4e:	f001 fa37 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d52:	23e0      	movs	r3, #224	; 0xe0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	484a      	ldr	r0, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000d6e:	f001 fa27 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d72:	2304      	movs	r3, #4
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4845      	ldr	r0, [pc, #276]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000d86:	f001 fa1b 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	483d      	ldr	r0, [pc, #244]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000da8:	f001 fa0a 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dac:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000db0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4832      	ldr	r0, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000dc6:	f001 f9fb 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dca:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ddc:	2306      	movs	r3, #6
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4829      	ldr	r0, [pc, #164]	; (8000e8c <MX_GPIO_Init+0x2a8>)
 8000de8:	f001 f9ea 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e02:	f001 f9dd 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	481d      	ldr	r0, [pc, #116]	; (8000e98 <MX_GPIO_Init+0x2b4>)
 8000e24:	f001 f9cc 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e28:	2320      	movs	r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x2ac>)
 8000e3c:	f001 f9c0 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e40:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e46:	2312      	movs	r3, #18
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e52:	2304      	movs	r3, #4
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x2b8>)
 8000e5e:	f001 f9af 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_GPIO_Init+0x2bc>)
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0x2a4>)
 8000e76:	f001 f9a3 	bl	80021c0 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	10110000 	.word	0x10110000
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	10120000 	.word	0x10120000

08000ea4 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000eac:	f000 f898 	bl	8000fe0 <show_time_date_itm>

}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f006 f884 	bl	8006fce <pvTimerGetTimerID>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d816      	bhi.n	8000f00 <led_effect_callback+0x48>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <led_effect_callback+0x20>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ee9 	.word	0x08000ee9
 8000edc:	08000eef 	.word	0x08000eef
 8000ee0:	08000ef5 	.word	0x08000ef5
 8000ee4:	08000efb 	.word	0x08000efb
	 {
	 case 1 :
		 LED_effect1();
 8000ee8:	f7ff fc36 	bl	8000758 <LED_effect1>
		 break;
 8000eec:	e008      	b.n	8000f00 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eee:	f7ff fc49 	bl	8000784 <LED_effect2>
		 break;
 8000ef2:	e005      	b.n	8000f00 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ef4:	f7ff fc5c 	bl	80007b0 <LED_effect3>
		 break;
 8000ef8:	e002      	b.n	8000f00 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000efa:	f7ff fc71 	bl	80007e0 <LED_effect4>
	 }


}
 8000efe:	e7ff      	b.n	8000f00 <led_effect_callback+0x48>
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e002      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x14>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f22:	d3f8      	bcc.n	8000f16 <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_UART_RxCpltCallback+0x98>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fb82 	bl	8005632 <xQueueIsQueueFullFromISR>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_UART_RxCpltCallback+0x98>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4919      	ldr	r1, [pc, #100]	; (8000fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8000f3e:	f004 f831 	bl	8004fa4 <xQueueGenericSendFromISR>
 8000f42:	e013      	b.n	8000f6c <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d10e      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_UART_RxCpltCallback+0x98>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f107 010b 	add.w	r1, r7, #11
 8000f56:	2200      	movs	r2, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f9ad 	bl	80052b8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_UART_RxCpltCallback+0x98>)
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	2200      	movs	r2, #0
 8000f66:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8000f68:	f004 f81c 	bl	8004fa4 <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d10a      	bne.n	8000f8c <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_UART_RxCpltCallback+0xa0>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	f005 fb22 	bl	80065d0 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <HAL_UART_RxCpltCallback+0xa4>)
 8000f92:	f002 ff36 	bl	8003e02 <HAL_UART_Receive_IT>


}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000128 	.word	0x20000128
 8000fa4:	20000144 	.word	0x20000144
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	200000d0 	.word	0x200000d0

08000fb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fc2:	f000 ff69 	bl	8001e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40001000 	.word	0x40001000

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2204      	movs	r2, #4
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fc92 	bl	8007918 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 fc8c 	bl	8007918 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4815      	ldr	r0, [pc, #84]	; (800105c <show_time_date_itm+0x7c>)
 8001008:	f002 f98a 	bl	8003320 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <show_time_date_itm+0x7c>)
 8001016:	f002 fa88 	bl	800352a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <show_time_date_itm+0x44>
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <show_time_date_itm+0x80>)
 8001022:	e000      	b.n	8001026 <show_time_date_itm+0x46>
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <show_time_date_itm+0x84>)
 8001026:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001028:	793b      	ldrb	r3, [r7, #4]
 800102a:	4619      	mov	r1, r3
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	461a      	mov	r2, r3
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	4618      	mov	r0, r3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4603      	mov	r3, r0
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <show_time_date_itm+0x88>)
 800103c:	f006 fc74 	bl	8007928 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001040:	7e7b      	ldrb	r3, [r7, #25]
 8001042:	4619      	mov	r1, r3
 8001044:	7ebb      	ldrb	r3, [r7, #26]
 8001046:	461a      	mov	r2, r3
 8001048:	7efb      	ldrb	r3, [r7, #27]
 800104a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <show_time_date_itm+0x8c>)
 8001050:	f006 fc6a 	bl	8007928 <iprintf>

 }
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000b0 	.word	0x200000b0
 8001060:	08008c54 	.word	0x08008c54
 8001064:	08008c58 	.word	0x08008c58
 8001068:	08008c5c 	.word	0x08008c5c
 800106c:	08008c70 	.word	0x08008c70

08001070 <show_time_date>:

void show_time_date(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	2204      	movs	r2, #4
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f006 fc4a 	bl	8007918 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f006 fc44 	bl	8007918 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4821      	ldr	r0, [pc, #132]	; (800111c <show_time_date+0xac>)
 8001098:	f002 f942 	bl	8003320 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <show_time_date+0xac>)
 80010a6:	f002 fa40 	bl	800352a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <show_time_date+0x44>
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <show_time_date+0xb0>)
 80010b2:	e000      	b.n	80010b6 <show_time_date+0x46>
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <show_time_date+0xb4>)
 80010b6:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 80010b8:	793b      	ldrb	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	461a      	mov	r2, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	4619      	mov	r1, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	9101      	str	r1, [sp, #4]
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <show_time_date+0xb8>)
 80010d0:	4916      	ldr	r1, [pc, #88]	; (800112c <show_time_date+0xbc>)
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <show_time_date+0xc0>)
 80010d4:	f006 fc40 	bl	8007958 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <show_time_date+0xc4>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	4915      	ldr	r1, [pc, #84]	; (8001138 <show_time_date+0xc8>)
 80010e4:	f003 fe60 	bl	8004da8 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010e8:	7e7b      	ldrb	r3, [r7, #25]
 80010ea:	461a      	mov	r2, r3
 80010ec:	7ebb      	ldrb	r3, [r7, #26]
 80010ee:	4619      	mov	r1, r3
 80010f0:	7efb      	ldrb	r3, [r7, #27]
 80010f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	460b      	mov	r3, r1
 80010fa:	4910      	ldr	r1, [pc, #64]	; (800113c <show_time_date+0xcc>)
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <show_time_date+0xd0>)
 80010fe:	f006 fc2b 	bl	8007958 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <show_time_date+0xc4>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	490d      	ldr	r1, [pc, #52]	; (8001144 <show_time_date+0xd4>)
 800110e:	f003 fe4b 	bl	8004da8 <xQueueGenericSend>
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b0 	.word	0x200000b0
 8001120:	08008c54 	.word	0x08008c54
 8001124:	08008c58 	.word	0x08008c58
 8001128:	08008c80 	.word	0x08008c80
 800112c:	08008c94 	.word	0x08008c94
 8001130:	20000148 	.word	0x20000148
 8001134:	2000012c 	.word	0x2000012c
 8001138:	20000008 	.word	0x20000008
 800113c:	08008c70 	.word	0x08008c70
 8001140:	20000170 	.word	0x20000170
 8001144:	2000000c 	.word	0x2000000c

08001148 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <rtc_configure_time+0x2c>)
 8001168:	f002 f81d 	bl	80031a6 <HAL_RTC_SetTime>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000b0 	.word	0x200000b0

08001178 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <rtc_configure_date+0x1c>)
 8001186:	f002 f929 	bl	80033dc <HAL_RTC_SetDate>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000b0 	.word	0x200000b0

08001198 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	if(time){
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d807      	bhi.n	80011c0 <validate_rtc_information+0x28>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	2b3b      	cmp	r3, #59	; 0x3b
 80011b6:	d803      	bhi.n	80011c0 <validate_rtc_information+0x28>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	2b3b      	cmp	r3, #59	; 0x3b
 80011be:	d901      	bls.n	80011c4 <validate_rtc_information+0x2c>
			return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e015      	b.n	80011f0 <validate_rtc_information+0x58>
	}

	if(date){
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d011      	beq.n	80011ee <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	2b1f      	cmp	r3, #31
 80011d0:	d80b      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d807      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	2b63      	cmp	r3, #99	; 0x63
 80011e0:	d803      	bhi.n	80011ea <validate_rtc_information+0x52>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b0c      	cmp	r3, #12
 80011e8:	d901      	bls.n	80011ee <validate_rtc_information+0x56>
			return 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <validate_rtc_information+0x58>
	}

	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_MspInit+0x4c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x4c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_RTC_MspInit+0x24>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d102      	bne.n	8001264 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RTC_MspInit+0x28>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40002800 	.word	0x40002800
 8001274:	42470e3c 	.word	0x42470e3c

08001278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_UART_MspInit+0x94>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d133      	bne.n	8001302 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_UART_MspInit+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d2:	230c      	movs	r3, #12
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <HAL_UART_MspInit+0x9c>)
 80012ee:	f000 ff67 	bl	80021c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2106      	movs	r1, #6
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f000 fea6 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fc:	2026      	movs	r0, #38	; 0x26
 80012fe:	f000 febf 	bl	8002080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2036      	movs	r0, #54	; 0x36
 800132e:	f000 fe8b 	bl	8002048 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001332:	2036      	movs	r0, #54	; 0x36
 8001334:	f000 fea4 	bl	8002080 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_InitTick+0xa4>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_InitTick+0xa4>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_InitTick+0xa4>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001354:	f107 0210 	add.w	r2, r7, #16
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fd7c 	bl	8002e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001364:	f001 fd52 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8001368:	4603      	mov	r3, r0
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_InitTick+0xa8>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9b      	lsrs	r3, r3, #18
 8001378:	3b01      	subs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_InitTick+0xac>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_InitTick+0xb0>)
 8001380:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_InitTick+0xac>)
 8001384:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001388:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_InitTick+0xac>)
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_InitTick+0xac>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_InitTick+0xac>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_InitTick+0xac>)
 800139e:	f002 f9a3 	bl	80036e8 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d104      	bne.n	80013b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_InitTick+0xac>)
 80013aa:	f002 f9f7 	bl	800379c <HAL_TIM_Base_Start_IT>
 80013ae:	4603      	mov	r3, r0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3730      	adds	r7, #48	; 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	431bde83 	.word	0x431bde83
 80013c4:	20000198 	.word	0x20000198
 80013c8:	40001000 	.word	0x40001000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <USART2_IRQHandler+0x10>)
 80013fe:	f002 fd31 	bl	8003e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000d0 	.word	0x200000d0

0800140c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <TIM6_DAC_IRQHandler+0x10>)
 8001412:	f002 fa33 	bl	800387c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000198 	.word	0x20000198

08001420 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <ITM_SendChar+0x48>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <ITM_SendChar+0x48>)
 8001430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <ITM_SendChar+0x4c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0c      	ldr	r2, [pc, #48]	; (800146c <ITM_SendChar+0x4c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001442:	bf00      	nop
 8001444:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f8      	beq.n	8001444 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000edfc 	.word	0xe000edfc
 800146c:	e0000e00 	.word	0xe0000e00

08001470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffab 	bl	8001420 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
	}
	return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f006 f994 	bl	80078a8 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	200001e0 	.word	0x200001e0
 80015b4:	200193a8 	.word	0x200193a8

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <menu_task+0xd0>)
 80015e6:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <menu_task+0xd4>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	f107 0108 	add.w	r1, r7, #8
 80015f0:	2300      	movs	r3, #0
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
 80015f6:	f003 fbd7 	bl	8004da8 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f004 fe81 	bl	8006310 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d133      	bne.n	8001682 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3b30      	subs	r3, #48	; 0x30
 8001620:	613b      	str	r3, [r7, #16]
			switch(option)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d035      	beq.n	8001694 <menu_task+0xb8>
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b02      	cmp	r3, #2
 800162c:	dc20      	bgt.n	8001670 <menu_task+0x94>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <menu_task+0x60>
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d00d      	beq.n	8001656 <menu_task+0x7a>
 800163a:	e019      	b.n	8001670 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <menu_task+0xd8>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <menu_task+0xdc>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	f004 fede 	bl	8006410 <xTaskGenericNotify>
					break;
 8001654:	e01f      	b.n	8001696 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <menu_task+0xd8>)
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <menu_task+0xe0>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	f004 fed1 	bl	8006410 <xTaskGenericNotify>
					break;
 800166e:	e012      	b.n	8001696 <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <menu_task+0xd4>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	f04f 32ff 	mov.w	r2, #4294967295
 800167a:	4911      	ldr	r1, [pc, #68]	; (80016c0 <menu_task+0xe4>)
 800167c:	f003 fb94 	bl	8004da8 <xQueueGenericSend>
					continue;
 8001680:	e012      	b.n	80016a8 <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <menu_task+0xd4>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	2300      	movs	r3, #0
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <menu_task+0xe4>)
 800168e:	f003 fb8b 	bl	8004da8 <xQueueGenericSend>
			continue;
 8001692:	e009      	b.n	80016a8 <menu_task+0xcc>
					break;
 8001694:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f004 fe34 	bl	8006310 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80016a8:	e79e      	b.n	80015e8 <menu_task+0xc>
 80016aa:	bf00      	nop
 80016ac:	08008cc4 	.word	0x08008cc4
 80016b0:	2000012c 	.word	0x2000012c
 80016b4:	20000145 	.word	0x20000145
 80016b8:	20000120 	.word	0x20000120
 80016bc:	20000124 	.word	0x20000124
 80016c0:	20000014 	.word	0x20000014

080016c4 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <led_task+0x104>)
 80016ce:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2000      	movs	r0, #0
 80016de:	f004 fe17 	bl	8006310 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <led_task+0x108>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f107 010c 	add.w	r1, r7, #12
 80016ea:	2300      	movs	r3, #0
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	f003 fb5a 	bl	8004da8 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2000      	movs	r0, #0
 8001704:	f004 fe04 	bl	8006310 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d843      	bhi.n	800179c <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	492e      	ldr	r1, [pc, #184]	; (80017d0 <led_task+0x10c>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strcmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <led_task+0x66>
				led_effect_stop();
 8001724:	f7fe ff3e 	bl	80005a4 <led_effect_stop>
 8001728:	e040      	b.n	80017ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	4929      	ldr	r1, [pc, #164]	; (80017d4 <led_task+0x110>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd4e 	bl	80001d0 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <led_task+0x7e>
				led_effect(1);
 800173a:	2001      	movs	r0, #1
 800173c:	f7fe ff52 	bl	80005e4 <led_effect>
 8001740:	e034      	b.n	80017ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4924      	ldr	r1, [pc, #144]	; (80017d8 <led_task+0x114>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <strcmp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <led_task+0x96>
				led_effect(2);
 8001752:	2002      	movs	r0, #2
 8001754:	f7fe ff46 	bl	80005e4 <led_effect>
 8001758:	e028      	b.n	80017ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	491f      	ldr	r1, [pc, #124]	; (80017dc <led_task+0x118>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd36 	bl	80001d0 <strcmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d103      	bne.n	8001772 <led_task+0xae>
				led_effect(3);
 800176a:	2003      	movs	r0, #3
 800176c:	f7fe ff3a 	bl	80005e4 <led_effect>
 8001770:	e01c      	b.n	80017ac <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	491a      	ldr	r1, [pc, #104]	; (80017e0 <led_task+0x11c>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd2a 	bl	80001d0 <strcmp>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <led_task+0xc6>
				led_effect(4);
 8001782:	2004      	movs	r0, #4
 8001784:	f7fe ff2e 	bl	80005e4 <led_effect>
 8001788:	e010      	b.n	80017ac <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <led_task+0x108>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <led_task+0x120>)
 8001796:	f003 fb07 	bl	8004da8 <xQueueGenericSend>
 800179a:	e007      	b.n	80017ac <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <led_task+0x108>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295
 80017a6:	490f      	ldr	r1, [pc, #60]	; (80017e4 <led_task+0x120>)
 80017a8:	f003 fafe 	bl	8004da8 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <led_task+0x124>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <led_task+0x128>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	f004 fe26 	bl	8006410 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017c4:	e784      	b.n	80016d0 <led_task+0xc>
 80017c6:	bf00      	nop
 80017c8:	08008d6c 	.word	0x08008d6c
 80017cc:	2000012c 	.word	0x2000012c
 80017d0:	08008de4 	.word	0x08008de4
 80017d4:	08008dec 	.word	0x08008dec
 80017d8:	08008df0 	.word	0x08008df0
 80017dc:	08008df4 	.word	0x08008df4
 80017e0:	08008df8 	.word	0x08008df8
 80017e4:	20000014 	.word	0x20000014
 80017e8:	20000145 	.word	0x20000145
 80017ec:	20000118 	.word	0x20000118

080017f0 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	dd0f      	ble.n	8001820 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3b30      	subs	r3, #48	; 0x30
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e003      	b.n	8001828 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3b30      	subs	r3, #48	; 0x30
 8001826:	60fb      	str	r3, [r7, #12]

	return value;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	b2db      	uxtb	r3, r3

}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <rtc_task>:

void rtc_task(void *param)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b09b      	sub	sp, #108	; 0x6c
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001840:	4bb2      	ldr	r3, [pc, #712]	; (8001b0c <rtc_task+0x2d4>)
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001844:	4bb2      	ldr	r3, [pc, #712]	; (8001b10 <rtc_task+0x2d8>)
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001848:	4bb2      	ldr	r3, [pc, #712]	; (8001b14 <rtc_task+0x2dc>)
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 800184c:	4bb2      	ldr	r3, [pc, #712]	; (8001b18 <rtc_task+0x2e0>)
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001850:	4bb2      	ldr	r3, [pc, #712]	; (8001b1c <rtc_task+0x2e4>)
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001854:	4bb2      	ldr	r3, [pc, #712]	; (8001b20 <rtc_task+0x2e8>)
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001858:	4bb2      	ldr	r3, [pc, #712]	; (8001b24 <rtc_task+0x2ec>)
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 800185c:	4bb2      	ldr	r3, [pc, #712]	; (8001b28 <rtc_task+0x2f0>)
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001860:	4bb2      	ldr	r3, [pc, #712]	; (8001b2c <rtc_task+0x2f4>)
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001864:	4bb2      	ldr	r3, [pc, #712]	; (8001b30 <rtc_task+0x2f8>)
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001868:	4bb2      	ldr	r3, [pc, #712]	; (8001b34 <rtc_task+0x2fc>)
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2000      	movs	r0, #0
 800187a:	f004 fd49 	bl	8006310 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 800187e:	4bae      	ldr	r3, [pc, #696]	; (8001b38 <rtc_task+0x300>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001886:	2300      	movs	r3, #0
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	f003 fa8c 	bl	8004da8 <xQueueGenericSend>
		show_time_date();
 8001890:	f7ff fbee 	bl	8001070 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8001894:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <rtc_task+0x300>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800189c:	2300      	movs	r3, #0
 800189e:	f04f 32ff 	mov.w	r2, #4294967295
 80018a2:	f003 fa81 	bl	8004da8 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80018a6:	bf00      	nop
 80018a8:	e1e1      	b.n	8001c6e <rtc_task+0x436>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	f04f 32ff 	mov.w	r2, #4294967295
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f004 fd29 	bl	8006310 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 80018c2:	4b9e      	ldr	r3, [pc, #632]	; (8001b3c <rtc_task+0x304>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3b02      	subs	r3, #2
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	f200 81d0 	bhi.w	8001c6e <rtc_task+0x436>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <rtc_task+0x9c>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	08001997 	.word	0x08001997
 80018dc:	08001a85 	.word	0x08001a85
 80018e0:	08001beb 	.word	0x08001beb
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 80018e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d148      	bne.n	800197e <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3b30      	subs	r3, #48	; 0x30
 80018f2:	653b      	str	r3, [r7, #80]	; 0x50
 80018f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d835      	bhi.n	8001966 <rtc_task+0x12e>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <rtc_task+0xc8>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001911 	.word	0x08001911
 8001904:	0800192b 	.word	0x0800192b
 8001908:	08001945 	.word	0x08001945
 800190c:	0800195f 	.word	0x0800195f
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001910:	4b8a      	ldr	r3, [pc, #552]	; (8001b3c <rtc_task+0x304>)
 8001912:	2203      	movs	r2, #3
 8001914:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <rtc_task+0x300>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800191e:	2300      	movs	r3, #0
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	f003 fa40 	bl	8004da8 <xQueueGenericSend>
							break;
 8001928:	e034      	b.n	8001994 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 800192a:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <rtc_task+0x304>)
 800192c:	2204      	movs	r2, #4
 800192e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <rtc_task+0x300>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001938:	2300      	movs	r3, #0
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	f003 fa33 	bl	8004da8 <xQueueGenericSend>
							break;
 8001942:	e027      	b.n	8001994 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8001944:	4b7d      	ldr	r3, [pc, #500]	; (8001b3c <rtc_task+0x304>)
 8001946:	2205      	movs	r2, #5
 8001948:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <rtc_task+0x300>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001952:	2300      	movs	r3, #0
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	f003 fa26 	bl	8004da8 <xQueueGenericSend>
							break;
 800195c:	e01a      	b.n	8001994 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 800195e:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <rtc_task+0x304>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
							break;
 8001964:	e016      	b.n	8001994 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <rtc_task+0x304>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800196c:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <rtc_task+0x300>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	f04f 32ff 	mov.w	r2, #4294967295
 8001976:	4972      	ldr	r1, [pc, #456]	; (8001b40 <rtc_task+0x308>)
 8001978:	f003 fa16 	bl	8004da8 <xQueueGenericSend>
 800197c:	e177      	b.n	8001c6e <rtc_task+0x436>
						}

					}else{
						curr_state = sMainMenu;
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <rtc_task+0x304>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001984:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <rtc_task+0x300>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	f04f 32ff 	mov.w	r2, #4294967295
 800198e:	496c      	ldr	r1, [pc, #432]	; (8001b40 <rtc_task+0x308>)
 8001990:	f003 fa0a 	bl	8004da8 <xQueueGenericSend>
					}
					break;}
 8001994:	e16b      	b.n	8001c6e <rtc_task+0x436>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8001996:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <rtc_task+0x30c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d03b      	beq.n	8001a16 <rtc_task+0x1de>
 800199e:	2b02      	cmp	r3, #2
 80019a0:	f300 8165 	bgt.w	8001c6e <rtc_task+0x436>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <rtc_task+0x176>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d01a      	beq.n	80019e2 <rtc_task+0x1aa>
 80019ac:	e15f      	b.n	8001c6e <rtc_task+0x436>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 80019ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff ff1a 	bl	80017f0 <getnumber>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80019c2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019c6:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <rtc_task+0x30c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <rtc_task+0x300>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019d6:	2300      	movs	r3, #0
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	f003 f9e4 	bl	8004da8 <xQueueGenericSend>
								break;}
 80019e0:	e04f      	b.n	8001a82 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80019e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff ff00 	bl	80017f0 <getnumber>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 80019f6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80019fa:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <rtc_task+0x30c>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001a02:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <rtc_task+0x300>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	f003 f9ca 	bl	8004da8 <xQueueGenericSend>
								break;}
 8001a14:	e035      	b.n	8001a82 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7ff fee6 	bl	80017f0 <getnumber>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001a2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a2e:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fbae 	bl	8001198 <validate_rtc_information>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d110      	bne.n	8001a64 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fb7e 	bl	8001148 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <rtc_task+0x300>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a54:	2300      	movs	r3, #0
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	f003 f9a5 	bl	8004da8 <xQueueGenericSend>
									show_time_date();
 8001a5e:	f7ff fb07 	bl	8001070 <show_time_date>
 8001a62:	e007      	b.n	8001a74 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <rtc_task+0x300>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	4934      	ldr	r1, [pc, #208]	; (8001b40 <rtc_task+0x308>)
 8001a70:	f003 f99a 	bl	8004da8 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <rtc_task+0x304>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <rtc_task+0x30c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
								break;}
 8001a80:	bf00      	nop
						}

					break;}
 8001a82:	e0f4      	b.n	8001c6e <rtc_task+0x436>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <rtc_task+0x30c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	f200 80f0 	bhi.w	8001c6e <rtc_task+0x436>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <rtc_task+0x25c>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001ad9 	.word	0x08001ad9
 8001a9c:	08001b7d 	.word	0x08001b7d
 8001aa0:	08001b49 	.word	0x08001b49
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f7ff fe9f 	bl	80017f0 <getnumber>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001ab8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001abc:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <rtc_task+0x30c>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <rtc_task+0x300>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001acc:	2300      	movs	r3, #0
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	f003 f969 	bl	8004da8 <xQueueGenericSend>
								break;}
 8001ad6:	e087      	b.n	8001be8 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001ad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7ff fe85 	bl	80017f0 <getnumber>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001aec:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001af0:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <rtc_task+0x30c>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <rtc_task+0x300>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b00:	2300      	movs	r3, #0
 8001b02:	f04f 32ff 	mov.w	r2, #4294967295
 8001b06:	f003 f94f 	bl	8004da8 <xQueueGenericSend>
								break;}
 8001b0a:	e06d      	b.n	8001be8 <rtc_task+0x3b0>
 8001b0c:	08008dfc 	.word	0x08008dfc
 8001b10:	08008e48 	.word	0x08008e48
 8001b14:	08008eec 	.word	0x08008eec
 8001b18:	08008f00 	.word	0x08008f00
 8001b1c:	08008f18 	.word	0x08008f18
 8001b20:	08008f30 	.word	0x08008f30
 8001b24:	08008f44 	.word	0x08008f44
 8001b28:	08008f58 	.word	0x08008f58
 8001b2c:	08008f70 	.word	0x08008f70
 8001b30:	08008f84 	.word	0x08008f84
 8001b34:	08008fa0 	.word	0x08008fa0
 8001b38:	2000012c 	.word	0x2000012c
 8001b3c:	20000145 	.word	0x20000145
 8001b40:	20000014 	.word	0x20000014
 8001b44:	200001e4 	.word	0x200001e4
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001b48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff fe4d 	bl	80017f0 <getnumber>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001b5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b60:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <rtc_task+0x454>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <rtc_task+0x458>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b70:	2300      	movs	r3, #0
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295
 8001b76:	f003 f917 	bl	8004da8 <xQueueGenericSend>
								break;}
 8001b7a:	e035      	b.n	8001be8 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff fe33 	bl	80017f0 <getnumber>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001b90:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b94:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fafb 	bl	8001198 <validate_rtc_information>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d110      	bne.n	8001bca <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fae3 	bl	8001178 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <rtc_task+0x458>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	f003 f8f2 	bl	8004da8 <xQueueGenericSend>
									show_time_date();
 8001bc4:	f7ff fa54 	bl	8001070 <show_time_date>
 8001bc8:	e007      	b.n	8001bda <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <rtc_task+0x458>)
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	492f      	ldr	r1, [pc, #188]	; (8001c94 <rtc_task+0x45c>)
 8001bd6:	f003 f8e7 	bl	8004da8 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <rtc_task+0x460>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <rtc_task+0x454>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
								break;}
 8001be6:	bf00      	nop
						}


					break;}
 8001be8:	e041      	b.n	8001c6e <rtc_task+0x436>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d131      	bne.n	8001c56 <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b79      	cmp	r3, #121	; 0x79
 8001bf8:	d115      	bne.n	8001c26 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <rtc_task+0x464>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 f9bc 	bl	8006f7c <xTimerIsTimerActive>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12d      	bne.n	8001c66 <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <rtc_task+0x464>)
 8001c0c:	681c      	ldr	r4, [r3, #0]
 8001c0e:	f003 ffd7 	bl	8005bc0 <xTaskGetTickCount>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f004 fecc 	bl	80069bc <xTimerGenericCommand>
 8001c24:	e01f      	b.n	8001c66 <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c2c:	d10a      	bne.n	8001c44 <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <rtc_task+0x464>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	f004 febd 	bl	80069bc <xTimerGenericCommand>
 8001c42:	e010      	b.n	8001c66 <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <rtc_task+0x458>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4e:	4911      	ldr	r1, [pc, #68]	; (8001c94 <rtc_task+0x45c>)
 8001c50:	f003 f8aa 	bl	8004da8 <xQueueGenericSend>
 8001c54:	e007      	b.n	8001c66 <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <rtc_task+0x458>)
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <rtc_task+0x45c>)
 8001c62:	f003 f8a1 	bl	8004da8 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <rtc_task+0x460>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
					break;}
 8001c6c:	bf00      	nop
		while(curr_state != sMainMenu){
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <rtc_task+0x460>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae19 	bne.w	80018aa <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <rtc_task+0x468>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	f004 fbc3 	bl	8006410 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c8a:	e5ef      	b.n	800186c <rtc_task+0x34>
 8001c8c:	200001e4 	.word	0x200001e4
 8001c90:	2000012c 	.word	0x2000012c
 8001c94:	20000014 	.word	0x20000014
 8001c98:	20000145 	.word	0x20000145
 8001c9c:	20000140 	.word	0x20000140
 8001ca0:	20000118 	.word	0x20000118

08001ca4 <print_task>:
}



void print_task(void *param)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <print_task+0x38>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f107 010c 	add.w	r1, r7, #12
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fa1d 	bl	80050f8 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001cbe:	68fc      	ldr	r4, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fa8e 	bl	80001e4 <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <print_task+0x3c>)
 8001cd4:	f002 f803 	bl	8003cde <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001cd8:	e7e8      	b.n	8001cac <print_task+0x8>
 8001cda:	bf00      	nop
 8001cdc:	2000012c 	.word	0x2000012c
 8001ce0:	200000d0 	.word	0x200000d0

08001ce4 <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f004 fb09 	bl	8006310 <xTaskGenericNotifyWait>
 8001cfe:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d1f2      	bne.n	8001cec <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f802 	bl	8001d14 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001d10:	e7ec      	b.n	8001cec <cmd_handler_task+0x8>
	...

08001d14 <process_command>:

}


void process_command(command_t *cmd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f835 	bl	8001d8c <extract_command>

	switch(curr_state)
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <process_command+0x68>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	dc24      	bgt.n	8001d74 <process_command+0x60>
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	da18      	bge.n	8001d60 <process_command+0x4c>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <process_command+0x24>
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d00a      	beq.n	8001d4c <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001d36:	e01d      	b.n	8001d74 <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <process_command+0x6c>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2303      	movs	r3, #3
 8001d44:	2100      	movs	r1, #0
 8001d46:	f004 fb63 	bl	8006410 <xTaskGenericNotify>
		break;
 8001d4a:	e013      	b.n	8001d74 <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <process_command+0x70>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2303      	movs	r3, #3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f004 fb59 	bl	8006410 <xTaskGenericNotify>
		break;
 8001d5e:	e009      	b.n	8001d74 <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <process_command+0x74>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f004 fb4f 	bl	8006410 <xTaskGenericNotify>
		break;
 8001d72:	bf00      	nop
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000145 	.word	0x20000145
 8001d80:	20000118 	.word	0x20000118
 8001d84:	20000120 	.word	0x20000120
 8001d88:	20000124 	.word	0x20000124

08001d8c <extract_command>:


int extract_command(command_t *cmd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <extract_command+0x70>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fb1c 	bl	80053d6 <uxQueueMessagesWaiting>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <extract_command+0x22>
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	e022      	b.n	8001df4 <extract_command+0x68>
	uint8_t i =0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <extract_command+0x70>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f107 010f 	add.w	r1, r7, #15
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 f99b 	bl	80050f8 <xQueueReceive>
 8001dc2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <extract_command+0x4c>
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	75fa      	strb	r2, [r7, #23]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	7bf9      	ldrb	r1, [r7, #15]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d1e9      	bne.n	8001db2 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	2100      	movs	r1, #0
 8001de6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60da      	str	r2, [r3, #12]

	return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000128 	.word	0x20000128

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	; (8001e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff fbc5 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f005 fd41 	bl	80078b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7fe fced 	bl	8000810 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e44:	0800909c 	.word	0x0800909c
  ldr r2, =_sbss
 8001e48:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e4c:	200193a4 	.word	0x200193a4

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f8d8 	bl	8002032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fa48 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff f9b8 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	2000001c 	.word	0x2000001c
 8001ebc:	200001e8 	.word	0x200001e8

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200001e8 	.word	0x200001e8

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff4c 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205a:	f7ff ff61 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 800205e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff ffb1 	bl	8001fcc <NVIC_EncodePriority>
 800206a:	4602      	mov	r2, r0
 800206c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff80 	bl	8001f78 <__NVIC_SetPriority>
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff54 	bl	8001f3c <__NVIC_EnableIRQ>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020aa:	f7ff ff09 	bl	8001ec0 <HAL_GetTick>
 80020ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e052      	b.n	8002174 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_Abort+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211e:	e013      	b.n	8002148 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002120:	f7ff fece 	bl	8001ec0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b05      	cmp	r3, #5
 800212c:	d90c      	bls.n	8002148 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2203      	movs	r2, #3
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e015      	b.n	8002174 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e4      	bne.n	8002120 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	223f      	movs	r2, #63	; 0x3f
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d004      	beq.n	800219a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00c      	b.n	80021b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e16b      	b.n	80024b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 815a 	bne.w	80024ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80b4 	beq.w	80024ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <HAL_GPIO_Init+0x30c>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a5b      	ldr	r2, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x310>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x314>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02b      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x318>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_GPIO_Init+0x31c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_GPIO_Init+0x320>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_GPIO_Init+0x324>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_GPIO_Init+0x328>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x32c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x20e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_GPIO_Init+0x330>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x20a>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ca:	2308      	movs	r3, #8
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x228>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_GPIO_Init+0x310>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002454:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_GPIO_Init+0x334>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae90 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e267      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d075      	beq.n	8002636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b04      	cmp	r3, #4
 8002554:	d00c      	beq.n	8002570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b85      	ldr	r3, [pc, #532]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b82      	ldr	r3, [pc, #520]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256e:	d10b      	bne.n	8002588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	4b7e      	ldr	r3, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d05b      	beq.n	8002634 <HAL_RCC_OscConfig+0x108>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d157      	bne.n	8002634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e242      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x74>
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6d      	ldr	r3, [pc, #436]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6c      	ldr	r2, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xb0>
 80025c4:	4b69      	ldr	r3, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a68      	ldr	r2, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff fc6c 	bl	8001ec0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff fc68 	bl	8001ec0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e207      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xc0>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fc58 	bl	8001ec0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff fc54 	bl	8001ec0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1f3      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0xe8>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b44      	ldr	r3, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1c7      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_RCC_OscConfig+0x240>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff fc0d 	bl	8001ec0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff fc09 	bl	8001ec0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1a8      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4925      	ldr	r1, [pc, #148]	; (800276c <HAL_RCC_OscConfig+0x240>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x244>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff fbec 	bl	8001ec0 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff fbe8 	bl	8001ec0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e187      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d036      	beq.n	8002784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff fbcc 	bl	8001ec0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff fbc8 	bl	8001ec0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e167      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x240>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x200>
 800274a:	e01b      	b.n	8002784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x248>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff fbb5 	bl	8001ec0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	e00e      	b.n	8002778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275a:	f7ff fbb1 	bl	8001ec0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d907      	bls.n	8002778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e150      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	42470000 	.word	0x42470000
 8002774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ea      	bne.n	800275a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8097 	beq.w	80028c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a7c      	ldr	r2, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b77      	ldr	r3, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ce:	4b74      	ldr	r3, [pc, #464]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7ff fb71 	bl	8001ec0 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7ff fb6d 	bl	8001ec0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e10c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x474>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x2ea>
 8002808:	4b64      	ldr	r3, [pc, #400]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a63      	ldr	r2, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x30c>
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x324>
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff fb32 	bl	8001ec0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7ff fb2e 	bl	8001ec0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0cb      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ee      	beq.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7ff fb1c 	bl	8001ec0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7ff fb18 	bl	8001ec0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0b5      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ee      	bne.n	800288c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a38      	ldr	r2, [pc, #224]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a1 	beq.w	8002a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x470>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d05c      	beq.n	8002990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d141      	bne.n	8002962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff faec 	bl	8001ec0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7ff fae8 	bl	8001ec0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e087      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff fac1 	bl	8001ec0 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002942:	f7ff fabd 	bl	8001ec0 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e05c      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x416>
 8002960:	e054      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff faaa 	bl	8001ec0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff faa6 	bl	8001ec0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e045      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
 800298e:	e03d      	b.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e038      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4ec>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d028      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d121      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11a      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0cc      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d90c      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b65      	ldr	r3, [pc, #404]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d044      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d119      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b3f      	ldr	r3, [pc, #252]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e06f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e067      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4934      	ldr	r1, [pc, #208]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7ff f9d8 	bl	8001ec0 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7ff f9d4 	bl	8001ec0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d20c      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fba8 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	08008fdc 	.word	0x08008fdc
 8002be0:	20000010 	.word	0x20000010
 8002be4:	20000018 	.word	0x20000018

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b094      	sub	sp, #80	; 0x50
 8002bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	f200 80e1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1a:	e0db      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c20:	e0db      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e0d8      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
 8002c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4621      	mov	r1, r4
 8002c74:	1a51      	subs	r1, r2, r1
 8002c76:	6139      	str	r1, [r7, #16]
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	018b      	lsls	r3, r1, #6
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c96:	4651      	mov	r1, sl
 8002c98:	018a      	lsls	r2, r1, #6
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	eb18 0303 	adds.w	r3, r8, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	eb49 0303 	adc.w	r3, r9, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	024b      	lsls	r3, r1, #9
 8002cde:	4621      	mov	r1, r4
 8002ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	024a      	lsls	r2, r1, #9
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf8:	f7fd fad2 	bl	80002a0 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	e058      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4611      	mov	r1, r2
 8002d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d58:	ebb2 040a 	subs.w	r4, r2, sl
 8002d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	eb45 0303 	adc.w	r3, r5, r3
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	f7fd fa78 	bl	80002a0 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3750      	adds	r7, #80	; 0x50
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000010 	.word	0x20000010

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08008fec 	.word	0x08008fec

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08008fec 	.word	0x08008fec

08002e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	220f      	movs	r2, #15
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCC_GetClockConfig+0x60>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d035      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee8:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eee:	f7fe ffe7 	bl	8001ec0 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ef6:	f7fe ffe3 	bl	8001ec0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0b0      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	019a      	lsls	r2, r3, #6
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	071b      	lsls	r3, r3, #28
 8002f20:	4955      	ldr	r1, [pc, #340]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f28:	4b52      	ldr	r3, [pc, #328]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe ffc7 	bl	8001ec0 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f36:	f7fe ffc3 	bl	8001ec0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e090      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8083 	beq.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b44      	ldr	r3, [pc, #272]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3e      	ldr	r2, [pc, #248]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe ff99 	bl	8001ec0 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe ff95 	bl	8001ec0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e062      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d028      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d114      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe ff63 	bl	8001ec0 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe ff5f 	bl	8001ec0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e02a      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302c:	d10d      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800303e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]
 8003048:	e005      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003050:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	4905      	ldr	r1, [pc, #20]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003064:	4313      	orrs	r3, r2
 8003066:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	42470068 	.word	0x42470068
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000
 8003080:	42470e40 	.word	0x42470e40

08003084 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e083      	b.n	800319e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7f5b      	ldrb	r3, [r3, #29]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe f8d0 	bl	800124c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	22ca      	movs	r2, #202	; 0xca
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2253      	movs	r2, #83	; 0x53
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 faa8 	bl	8003618 <RTC_EnterInitMode>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e05e      	b.n	800319e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800313e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa3a 	bl	80035c8 <HAL_RTC_WaitForSynchro>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2204      	movs	r2, #4
 8003166:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e018      	b.n	800319e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031a6:	b590      	push	{r4, r7, lr}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	7f1b      	ldrb	r3, [r3, #28]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_RTC_SetTime+0x1c>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0aa      	b.n	8003318 <HAL_RTC_SetTime+0x172>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2202      	movs	r2, #2
 80031cc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d126      	bne.n	8003222 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa3f 	bl	8003670 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
 80031f4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fa38 	bl	8003670 <RTC_ByteToBcd2>
 8003200:	4603      	mov	r3, r0
 8003202:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003204:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	789b      	ldrb	r3, [r3, #2]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa30 	bl	8003670 <RTC_ByteToBcd2>
 8003210:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003212:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e018      	b.n	8003254 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003242:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003248:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	78db      	ldrb	r3, [r3, #3]
 800324e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	22ca      	movs	r2, #202	; 0xca
 800325a:	625a      	str	r2, [r3, #36]	; 0x24
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2253      	movs	r2, #83	; 0x53
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f9d7 	bl	8003618 <RTC_EnterInitMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2204      	movs	r2, #4
 800327c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e047      	b.n	8003318 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003292:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003296:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032a6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d111      	bne.n	8003302 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f972 	bl	80035c8 <HAL_RTC_WaitForSynchro>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	22ff      	movs	r2, #255	; 0xff
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2204      	movs	r2, #4
 80032f6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00a      	b.n	8003318 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003316:	2300      	movs	r3, #0
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}

08003320 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003352:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11a      	bne.n	80033d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f983 	bl	80036ac <RTC_Bcd2ToByte>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f97a 	bl	80036ac <RTC_Bcd2ToByte>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	789b      	ldrb	r3, [r3, #2]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f971 	bl	80036ac <RTC_Bcd2ToByte>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	7f1b      	ldrb	r3, [r3, #28]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_RTC_SetDate+0x1c>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e094      	b.n	8003522 <HAL_RTC_SetDate+0x146>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10e      	bne.n	8003428 <HAL_RTC_SetDate+0x4c>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	f023 0310 	bic.w	r3, r3, #16
 800341e:	b2db      	uxtb	r3, r3
 8003420:	330a      	adds	r3, #10
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11c      	bne.n	8003468 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	78db      	ldrb	r3, [r3, #3]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f91c 	bl	8003670 <RTC_ByteToBcd2>
 8003438:	4603      	mov	r3, r0
 800343a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f915 	bl	8003670 <RTC_ByteToBcd2>
 8003446:	4603      	mov	r3, r0
 8003448:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800344a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	789b      	ldrb	r3, [r3, #2]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f90d 	bl	8003670 <RTC_ByteToBcd2>
 8003456:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003458:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e00e      	b.n	8003486 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003474:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800347a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	22ca      	movs	r2, #202	; 0xca
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2253      	movs	r2, #83	; 0x53
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8be 	bl	8003618 <RTC_EnterInitMode>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2204      	movs	r2, #4
 80034ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e033      	b.n	8003522 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f86d 	bl	80035c8 <HAL_RTC_WaitForSynchro>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	22ff      	movs	r2, #255	; 0xff
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2204      	movs	r2, #4
 8003500:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e00a      	b.n	8003522 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}

0800352a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003544:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003548:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	0b5b      	lsrs	r3, r3, #13
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11a      	bne.n	80035be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	78db      	ldrb	r3, [r3, #3]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f88d 	bl	80036ac <RTC_Bcd2ToByte>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f884 	bl	80036ac <RTC_Bcd2ToByte>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f87b 	bl	80036ac <RTC_Bcd2ToByte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fc6c 	bl	8001ec0 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80035ea:	e009      	b.n	8003600 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035ec:	f7fe fc68 	bl	8001ec0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fa:	d901      	bls.n	8003600 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e007      	b.n	8003610 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe fc40 	bl	8001ec0 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003642:	e009      	b.n	8003658 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003644:	f7fe fc3c 	bl	8001ec0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003652:	d901      	bls.n	8003658 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e007      	b.n	8003668 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ee      	beq.n	8003644 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800367e:	e005      	b.n	800368c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3301      	adds	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	3b0a      	subs	r3, #10
 800368a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b09      	cmp	r3, #9
 8003690:	d8f6      	bhi.n	8003680 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	b2da      	uxtb	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4313      	orrs	r3, r2
 800369e:	b2db      	uxtb	r3, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4413      	add	r3, r2
 80036da:	b2db      	uxtb	r3, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e041      	b.n	800377e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f839 	bl	8003786 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f000 f9d8 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e04e      	b.n	8003852 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_TIM_Base_Start_IT+0xc4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d01d      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_TIM_Base_Start_IT+0xc8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_TIM_Base_Start_IT+0xcc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_TIM_Base_Start_IT+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_TIM_Base_Start_IT+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_Start_IT+0xd8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIM_Base_Start_IT+0x80>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_TIM_Base_Start_IT+0xdc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b06      	cmp	r3, #6
 800382c:	d010      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	e007      	b.n	8003850 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40010400 	.word	0x40010400
 8003874:	40014000 	.word	0x40014000
 8003878:	40001800 	.word	0x40001800

0800387c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0202 	mvn.w	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8ee 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8e0 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8f1 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0204 	mvn.w	r2, #4
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8c4 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8b6 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8c7 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0208 	mvn.w	r2, #8
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f89a 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f88c 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f89d 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0210 	mvn.w	r2, #16
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2208      	movs	r2, #8
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f870 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f862 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f873 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0201 	mvn.w	r2, #1
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fad8 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f902 	bl	8003c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f838 	bl	8003ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0220 	mvn.w	r2, #32
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8cc 	bl	8003c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3b      	ldr	r2, [pc, #236]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d027      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0x118>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d023      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_Base_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d017      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a24      	ldr	r2, [pc, #144]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <TIM_Base_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xf8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800
 8003c10:	40001800 	.word	0x40001800
 8003c14:	40001c00 	.word	0x40001c00
 8003c18:	40002000 	.word	0x40002000

08003c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fb04 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fc7b 	bl	8004584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d17c      	bne.n	8003df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Transmit+0x2c>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e075      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x3e>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e06e      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fe f8c5 	bl	8001ec0 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d70:	e02a      	b.n	8003dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fa3d 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e036      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e007      	b.n	8003dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cf      	bne.n	8003d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa0d 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d11d      	bne.n	8003e58 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Receive_IT+0x26>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e016      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Receive_IT+0x38>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e00f      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa1e 	bl	8004290 <UART_Start_Receive_IT>
 8003e54:	4603      	mov	r3, r0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fad1 	bl	8004456 <UART_Receive_IT>
      return;
 8003eb4:	e17c      	b.n	80041b0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80b1 	beq.w	8004020 <HAL_UART_IRQHandler+0x1bc>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x70>
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a6 	beq.w	8004020 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0202 	orr.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_IRQHandler+0xee>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 811f 	beq.w	80041a6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_UART_IRQHandler+0x11e>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa6a 	bl	8004456 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_UART_IRQHandler+0x146>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d031      	beq.n	800400e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9aa 	bl	8004304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d123      	bne.n	8004006 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4a77      	ldr	r2, [pc, #476]	; (80041b8 <HAL_UART_IRQHandler+0x354>)
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe f8ca 	bl	800217c <HAL_DMA_Abort_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e00e      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e6 	bl	80041d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e00a      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8e2 	bl	80041d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	e006      	b.n	800401c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8de 	bl	80041d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800401a:	e0c4      	b.n	80041a6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	bf00      	nop
    return;
 800401e:	e0c2      	b.n	80041a6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80a2 	bne.w	800416e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809c 	beq.w	800416e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8096 	beq.w	800416e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d14f      	bne.n	8004106 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004070:	8a3b      	ldrh	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8099 	beq.w	80041aa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800407c:	8a3a      	ldrh	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	f080 8093 	bcs.w	80041aa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8a3a      	ldrh	r2, [r7, #16]
 8004088:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004094:	d02b      	beq.n	80040ee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0210 	bic.w	r2, r2, #16
 80040e2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd ffd7 	bl	800209c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f870 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004104:	e051      	b.n	80041aa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d047      	beq.n	80041ae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800411e:	8a7b      	ldrh	r3, [r7, #18]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d044      	beq.n	80041ae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004132:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0210 	bic.w	r2, r2, #16
 8004160:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004162:	8a7b      	ldrh	r3, [r7, #18]
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f83c 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800416c:	e01f      	b.n	80041ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_UART_IRQHandler+0x326>
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8ff 	bl	8004386 <UART_Transmit_IT>
    return;
 8004188:	e012      	b.n	80041b0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00d      	beq.n	80041b0 <HAL_UART_IRQHandler+0x34c>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f941 	bl	8004426 <UART_EndTransmit_IT>
    return;
 80041a4:	e004      	b.n	80041b0 <HAL_UART_IRQHandler+0x34c>
    return;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80041ae:	bf00      	nop
  }
}
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	0800435f 	.word	0x0800435f

080041bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420c:	e02c      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d028      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	f7fd fe50 	bl	8001ec0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d21d      	bcs.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800423a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e00f      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	429a      	cmp	r2, r3
 8004284:	d0c3      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2222      	movs	r2, #34	; 0x22
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800431a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d107      	bne.n	8004344 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0210 	bic.w	r2, r2, #16
 8004342:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff29 	bl	80041d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b21      	cmp	r3, #33	; 0x21
 8004398:	d13e      	bne.n	8004418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a2:	d114      	bne.n	80043ce <UART_Transmit_IT+0x48>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	e008      	b.n	80043e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6211      	str	r1, [r2, #32]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4619      	mov	r1, r3
 80043ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff feb8 	bl	80041bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b22      	cmp	r3, #34	; 0x22
 8004468:	f040 8087 	bne.w	800457a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d117      	bne.n	80044a6 <UART_Receive_IT+0x50>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	b29a      	uxth	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	1c9a      	adds	r2, r3, #2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
 80044a4:	e026      	b.n	80044f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d007      	beq.n	80044ca <UART_Receive_IT+0x74>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <UART_Receive_IT+0x82>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e008      	b.n	80044ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4619      	mov	r1, r3
 8004502:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004504:	2b00      	cmp	r3, #0
 8004506:	d136      	bne.n	8004576 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0220 	bic.w	r2, r2, #32
 8004516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10e      	bne.n	8004566 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0210 	bic.w	r2, r2, #16
 8004556:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fe40 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
 8004564:	e002      	b.n	800456c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fcce 	bl	8000f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e002      	b.n	800457c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b0c0      	sub	sp, #256	; 0x100
 800458a:	af00      	add	r7, sp, #0
 800458c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	ea40 0301 	orr.w	r3, r0, r1
 80045ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045dc:	f021 010c 	bic.w	r1, r1, #12
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ea:	430b      	orrs	r3, r1
 80045ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	6999      	ldr	r1, [r3, #24]
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	ea40 0301 	orr.w	r3, r0, r1
 800460a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b8f      	ldr	r3, [pc, #572]	; (8004850 <UART_SetConfig+0x2cc>)
 8004614:	429a      	cmp	r2, r3
 8004616:	d005      	beq.n	8004624 <UART_SetConfig+0xa0>
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b8d      	ldr	r3, [pc, #564]	; (8004854 <UART_SetConfig+0x2d0>)
 8004620:	429a      	cmp	r2, r3
 8004622:	d104      	bne.n	800462e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fc06 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8004628:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800462c:	e003      	b.n	8004636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800462e:	f7fe fbed 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8004632:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004640:	f040 810c 	bne.w	800485c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004648:	2200      	movs	r2, #0
 800464a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800464e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004656:	4622      	mov	r2, r4
 8004658:	462b      	mov	r3, r5
 800465a:	1891      	adds	r1, r2, r2
 800465c:	65b9      	str	r1, [r7, #88]	; 0x58
 800465e:	415b      	adcs	r3, r3
 8004660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004666:	4621      	mov	r1, r4
 8004668:	eb12 0801 	adds.w	r8, r2, r1
 800466c:	4629      	mov	r1, r5
 800466e:	eb43 0901 	adc.w	r9, r3, r1
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800467e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004686:	4690      	mov	r8, r2
 8004688:	4699      	mov	r9, r3
 800468a:	4623      	mov	r3, r4
 800468c:	eb18 0303 	adds.w	r3, r8, r3
 8004690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004694:	462b      	mov	r3, r5
 8004696:	eb49 0303 	adc.w	r3, r9, r3
 800469a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046b2:	460b      	mov	r3, r1
 80046b4:	18db      	adds	r3, r3, r3
 80046b6:	653b      	str	r3, [r7, #80]	; 0x50
 80046b8:	4613      	mov	r3, r2
 80046ba:	eb42 0303 	adc.w	r3, r2, r3
 80046be:	657b      	str	r3, [r7, #84]	; 0x54
 80046c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046c8:	f7fb fdea 	bl	80002a0 <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4b61      	ldr	r3, [pc, #388]	; (8004858 <UART_SetConfig+0x2d4>)
 80046d2:	fba3 2302 	umull	r2, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	011c      	lsls	r4, r3, #4
 80046da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046ec:	4642      	mov	r2, r8
 80046ee:	464b      	mov	r3, r9
 80046f0:	1891      	adds	r1, r2, r2
 80046f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046f4:	415b      	adcs	r3, r3
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046fc:	4641      	mov	r1, r8
 80046fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb43 0b01 	adc.w	fp, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800471c:	4692      	mov	sl, r2
 800471e:	469b      	mov	fp, r3
 8004720:	4643      	mov	r3, r8
 8004722:	eb1a 0303 	adds.w	r3, sl, r3
 8004726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800472a:	464b      	mov	r3, r9
 800472c:	eb4b 0303 	adc.w	r3, fp, r3
 8004730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004740:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004748:	460b      	mov	r3, r1
 800474a:	18db      	adds	r3, r3, r3
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
 800474e:	4613      	mov	r3, r2
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	647b      	str	r3, [r7, #68]	; 0x44
 8004756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800475a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800475e:	f7fb fd9f 	bl	80002a0 <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4611      	mov	r1, r2
 8004768:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <UART_SetConfig+0x2d4>)
 800476a:	fba3 2301 	umull	r2, r3, r3, r1
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2264      	movs	r2, #100	; 0x64
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	1acb      	subs	r3, r1, r3
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <UART_SetConfig+0x2d4>)
 8004780:	fba3 2302 	umull	r2, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800478c:	441c      	add	r4, r3
 800478e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004798:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800479c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047a8:	415b      	adcs	r3, r3
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047b0:	4641      	mov	r1, r8
 80047b2:	1851      	adds	r1, r2, r1
 80047b4:	6339      	str	r1, [r7, #48]	; 0x30
 80047b6:	4649      	mov	r1, r9
 80047b8:	414b      	adcs	r3, r1
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047c8:	4659      	mov	r1, fp
 80047ca:	00cb      	lsls	r3, r1, #3
 80047cc:	4651      	mov	r1, sl
 80047ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d2:	4651      	mov	r1, sl
 80047d4:	00ca      	lsls	r2, r1, #3
 80047d6:	4610      	mov	r0, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	4603      	mov	r3, r0
 80047dc:	4642      	mov	r2, r8
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e4:	464b      	mov	r3, r9
 80047e6:	460a      	mov	r2, r1
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004804:	460b      	mov	r3, r1
 8004806:	18db      	adds	r3, r3, r3
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
 800480a:	4613      	mov	r3, r2
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800481a:	f7fb fd41 	bl	80002a0 <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <UART_SetConfig+0x2d4>)
 8004824:	fba3 1302 	umull	r1, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	3332      	adds	r3, #50	; 0x32
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <UART_SetConfig+0x2d4>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4422      	add	r2, r4
 800484a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800484c:	e105      	b.n	8004a5a <UART_SetConfig+0x4d6>
 800484e:	bf00      	nop
 8004850:	40011000 	.word	0x40011000
 8004854:	40011400 	.word	0x40011400
 8004858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800485c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004866:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800486a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800486e:	4642      	mov	r2, r8
 8004870:	464b      	mov	r3, r9
 8004872:	1891      	adds	r1, r2, r2
 8004874:	6239      	str	r1, [r7, #32]
 8004876:	415b      	adcs	r3, r3
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800487e:	4641      	mov	r1, r8
 8004880:	1854      	adds	r4, r2, r1
 8004882:	4649      	mov	r1, r9
 8004884:	eb43 0501 	adc.w	r5, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	00eb      	lsls	r3, r5, #3
 8004892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004896:	00e2      	lsls	r2, r4, #3
 8004898:	4614      	mov	r4, r2
 800489a:	461d      	mov	r5, r3
 800489c:	4643      	mov	r3, r8
 800489e:	18e3      	adds	r3, r4, r3
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048a4:	464b      	mov	r3, r9
 80048a6:	eb45 0303 	adc.w	r3, r5, r3
 80048aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ca:	4629      	mov	r1, r5
 80048cc:	008b      	lsls	r3, r1, #2
 80048ce:	4621      	mov	r1, r4
 80048d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d4:	4621      	mov	r1, r4
 80048d6:	008a      	lsls	r2, r1, #2
 80048d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048dc:	f7fb fce0 	bl	80002a0 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <UART_SetConfig+0x4e4>)
 80048e6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	011c      	lsls	r4, r3, #4
 80048ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	1891      	adds	r1, r2, r2
 8004906:	61b9      	str	r1, [r7, #24]
 8004908:	415b      	adcs	r3, r3
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004910:	4641      	mov	r1, r8
 8004912:	1851      	adds	r1, r2, r1
 8004914:	6139      	str	r1, [r7, #16]
 8004916:	4649      	mov	r1, r9
 8004918:	414b      	adcs	r3, r1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004928:	4659      	mov	r1, fp
 800492a:	00cb      	lsls	r3, r1, #3
 800492c:	4651      	mov	r1, sl
 800492e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004932:	4651      	mov	r1, sl
 8004934:	00ca      	lsls	r2, r1, #3
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	4603      	mov	r3, r0
 800493c:	4642      	mov	r2, r8
 800493e:	189b      	adds	r3, r3, r2
 8004940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004944:	464b      	mov	r3, r9
 8004946:	460a      	mov	r2, r1
 8004948:	eb42 0303 	adc.w	r3, r2, r3
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	67bb      	str	r3, [r7, #120]	; 0x78
 800495a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004968:	4649      	mov	r1, r9
 800496a:	008b      	lsls	r3, r1, #2
 800496c:	4641      	mov	r1, r8
 800496e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004972:	4641      	mov	r1, r8
 8004974:	008a      	lsls	r2, r1, #2
 8004976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800497a:	f7fb fc91 	bl	80002a0 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <UART_SetConfig+0x4e4>)
 8004984:	fba3 1302 	umull	r1, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	2164      	movs	r1, #100	; 0x64
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	3332      	adds	r3, #50	; 0x32
 8004996:	4a34      	ldr	r2, [pc, #208]	; (8004a68 <UART_SetConfig+0x4e4>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a2:	441c      	add	r4, r3
 80049a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a8:	2200      	movs	r2, #0
 80049aa:	673b      	str	r3, [r7, #112]	; 0x70
 80049ac:	677a      	str	r2, [r7, #116]	; 0x74
 80049ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049b2:	4642      	mov	r2, r8
 80049b4:	464b      	mov	r3, r9
 80049b6:	1891      	adds	r1, r2, r2
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	415b      	adcs	r3, r3
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c2:	4641      	mov	r1, r8
 80049c4:	1851      	adds	r1, r2, r1
 80049c6:	6039      	str	r1, [r7, #0]
 80049c8:	4649      	mov	r1, r9
 80049ca:	414b      	adcs	r3, r1
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049da:	4659      	mov	r1, fp
 80049dc:	00cb      	lsls	r3, r1, #3
 80049de:	4651      	mov	r1, sl
 80049e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e4:	4651      	mov	r1, sl
 80049e6:	00ca      	lsls	r2, r1, #3
 80049e8:	4610      	mov	r0, r2
 80049ea:	4619      	mov	r1, r3
 80049ec:	4603      	mov	r3, r0
 80049ee:	4642      	mov	r2, r8
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049f4:	464b      	mov	r3, r9
 80049f6:	460a      	mov	r2, r1
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	663b      	str	r3, [r7, #96]	; 0x60
 8004a08:	667a      	str	r2, [r7, #100]	; 0x64
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a16:	4649      	mov	r1, r9
 8004a18:	008b      	lsls	r3, r1, #2
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a20:	4641      	mov	r1, r8
 8004a22:	008a      	lsls	r2, r1, #2
 8004a24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a28:	f7fb fc3a 	bl	80002a0 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <UART_SetConfig+0x4e4>)
 8004a32:	fba3 1302 	umull	r1, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2164      	movs	r1, #100	; 0x64
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	3332      	adds	r3, #50	; 0x32
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <UART_SetConfig+0x4e4>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4422      	add	r2, r4
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a60:	46bd      	mov	sp, r7
 8004a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a66:	bf00      	nop
 8004a68:	51eb851f 	.word	0x51eb851f

08004a6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0208 	add.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f103 0208 	add.w	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0208 	add.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d103      	bne.n	8004b2e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e00c      	b.n	8004b48 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3308      	adds	r3, #8
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <vListInsert+0x2e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d2f6      	bcs.n	8004b36 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6852      	ldr	r2, [r2, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d103      	bne.n	8004bb4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueGenericReset+0x2a>
        __asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
    }
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004bfe:	f002 fb33 	bl	8007268 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	441a      	add	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d114      	bne.n	8004c7e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01a      	beq.n	8004c92 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3310      	adds	r3, #16
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 f921 	bl	8005ea8 <xTaskRemoveFromEventList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <xQueueGenericReset+0xcc>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e009      	b.n	8004c92 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3310      	adds	r3, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fef2 	bl	8004a6c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff feed 	bl	8004a6c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004c92:	f002 fb19 	bl	80072c8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericCreate+0x2a>
        __asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	61bb      	str	r3, [r7, #24]
    }
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d006      	beq.n	8004cec <xQueueGenericCreate+0x48>
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d101      	bne.n	8004cf0 <xQueueGenericCreate+0x4c>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <xQueueGenericCreate+0x4e>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xQueueGenericCreate+0x68>
        __asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	617b      	str	r3, [r7, #20]
    }
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d12:	d90a      	bls.n	8004d2a <xQueueGenericCreate+0x86>
        __asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	613b      	str	r3, [r7, #16]
    }
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	3350      	adds	r3, #80	; 0x50
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fbbc 	bl	80074ac <pvPortMalloc>
 8004d34:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3350      	adds	r3, #80	; 0x50
 8004d44:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d46:	79fa      	ldrb	r2, [r7, #7]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f805 	bl	8004d62 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d58:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e002      	b.n	8004d84 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d90:	2101      	movs	r1, #1
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f7ff ff1e 	bl	8004bd4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericSend+0x32>
        __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <xQueueGenericSend+0x40>
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <xQueueGenericSend+0x44>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <xQueueGenericSend+0x46>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <xQueueGenericSend+0x60>
        __asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d103      	bne.n	8004e16 <xQueueGenericSend+0x6e>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <xQueueGenericSend+0x72>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueGenericSend+0x74>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericSend+0x8e>
        __asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	623b      	str	r3, [r7, #32]
    }
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e36:	f001 f9d3 	bl	80061e0 <xTaskGetSchedulerState>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <xQueueGenericSend+0x9e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericSend+0xa2>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericSend+0xa4>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueGenericSend+0xbe>
        __asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61fb      	str	r3, [r7, #28]
    }
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e66:	f002 f9ff 	bl	8007268 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <xQueueGenericSend+0xd4>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d129      	bne.n	8004ed0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e82:	f000 fac6 	bl	8005412 <prvCopyDataToQueue>
 8004e86:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 f807 	bl	8005ea8 <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e00a      	b.n	8004ec8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004ec8:	f002 f9fe 	bl	80072c8 <vPortExitCritical>
                return pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e063      	b.n	8004f98 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ed6:	f002 f9f7 	bl	80072c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e05c      	b.n	8004f98 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f83f 	bl	8005f6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004ef2:	f002 f9e9 	bl	80072c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004ef6:	f000 fdb9 	bl	8005a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004efa:	f002 f9b5 	bl	8007268 <vPortEnterCritical>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <xQueueGenericSend+0x16c>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d103      	bne.n	8004f2a <xQueueGenericSend+0x182>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2a:	f002 f9cd 	bl	80072c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f2e:	1d3a      	adds	r2, r7, #4
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f82e 	bl	8005f98 <xTaskCheckForTimeOut>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d124      	bne.n	8004f8c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f44:	f000 fb5d 	bl	8005602 <prvIsQueueFull>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d018      	beq.n	8004f80 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	3310      	adds	r3, #16
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 ff56 	bl	8005e08 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 fae8 	bl	8005532 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f62:	f000 fd91 	bl	8005a88 <xTaskResumeAll>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f af7c 	bne.w	8004e66 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	e772      	b.n	8004e66 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f82:	f000 fad6 	bl	8005532 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f86:	f000 fd7f 	bl	8005a88 <xTaskResumeAll>
 8004f8a:	e76c      	b.n	8004e66 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8e:	f000 fad0 	bl	8005532 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f92:	f000 fd79 	bl	8005a88 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004f96:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3738      	adds	r7, #56	; 0x38
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <xQueueGenericSendFromISR+0x3c>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <xQueueGenericSendFromISR+0x40>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <xQueueGenericSendFromISR+0x42>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d103      	bne.n	800500e <xQueueGenericSendFromISR+0x6a>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <xQueueGenericSendFromISR+0x6e>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSendFromISR+0x70>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	623b      	str	r3, [r7, #32]
    }
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800502e:	f002 f9fd 	bl	800742c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005032:	f3ef 8211 	mrs	r2, BASEPRI
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fa      	str	r2, [r7, #28]
 8005048:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800504a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <xQueueGenericSendFromISR+0xbc>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d13e      	bne.n	80050de <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005076:	f000 f9cc 	bl	8005412 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800507a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d112      	bne.n	80050aa <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d025      	beq.n	80050d8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f000 ff09 	bl	8005ea8 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01d      	beq.n	80050d8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e016      	b.n	80050d8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80050aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d10a      	bne.n	80050c8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	617b      	str	r3, [r7, #20]
    }
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050cc:	3301      	adds	r3, #1
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	b25a      	sxtb	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80050d8:	2301      	movs	r3, #1
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80050dc:	e001      	b.n	80050e2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80050ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3740      	adds	r7, #64	; 0x40
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <xQueueReceive+0x30>
        __asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	623b      	str	r3, [r7, #32]
    }
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <xQueueReceive+0x3e>
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <xQueueReceive+0x42>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <xQueueReceive+0x44>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueReceive+0x5e>
        __asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	61fb      	str	r3, [r7, #28]
    }
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005156:	f001 f843 	bl	80061e0 <xTaskGetSchedulerState>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <xQueueReceive+0x6e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <xQueueReceive+0x72>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueReceive+0x74>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueReceive+0x8e>
        __asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
    }
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005186:	f002 f86f 	bl	8007268 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01f      	beq.n	80051d6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519a:	f000 f9a4 	bl	80054e6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	1e5a      	subs	r2, r3, #1
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00f      	beq.n	80051ce <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	3310      	adds	r3, #16
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fe78 	bl	8005ea8 <xTaskRemoveFromEventList>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051be:	4b3d      	ldr	r3, [pc, #244]	; (80052b4 <xQueueReceive+0x1bc>)
 80051c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80051ce:	f002 f87b 	bl	80072c8 <vPortExitCritical>
                return pdPASS;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e069      	b.n	80052aa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80051dc:	f002 f874 	bl	80072c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e062      	b.n	80052aa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051ea:	f107 0310 	add.w	r3, r7, #16
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 febc 	bl	8005f6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051f8:	f002 f866 	bl	80072c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051fc:	f000 fc36 	bl	8005a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005200:	f002 f832 	bl	8007268 <vPortEnterCritical>
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800520a:	b25b      	sxtb	r3, r3
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d103      	bne.n	800521a <xQueueReceive+0x122>
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005220:	b25b      	sxtb	r3, r3
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d103      	bne.n	8005230 <xQueueReceive+0x138>
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005230:	f002 f84a 	bl	80072c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005234:	1d3a      	adds	r2, r7, #4
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 feab 	bl	8005f98 <xTaskCheckForTimeOut>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d123      	bne.n	8005290 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524a:	f000 f9c4 	bl	80055d6 <prvIsQueueEmpty>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fdd3 	bl	8005e08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005264:	f000 f965 	bl	8005532 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005268:	f000 fc0e 	bl	8005a88 <xTaskResumeAll>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d189      	bne.n	8005186 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <xQueueReceive+0x1bc>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	e780      	b.n	8005186 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005286:	f000 f954 	bl	8005532 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800528a:	f000 fbfd 	bl	8005a88 <xTaskResumeAll>
 800528e:	e77a      	b.n	8005186 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005292:	f000 f94e 	bl	8005532 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005296:	f000 fbf7 	bl	8005a88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800529a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529c:	f000 f99b 	bl	80055d6 <prvIsQueueEmpty>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f43f af6f 	beq.w	8005186 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80052a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3730      	adds	r7, #48	; 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b090      	sub	sp, #64	; 0x40
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <xQueueReceiveFromISR+0x3a>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <xQueueReceiveFromISR+0x3e>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueReceiveFromISR+0x40>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005312:	f002 f88b 	bl	800742c <vPortValidateInterruptPriority>
        __asm volatile
 8005316:	f3ef 8211 	mrs	r2, BASEPRI
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	623a      	str	r2, [r7, #32]
 800532c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800532e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03e      	beq.n	80053bc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800534c:	f000 f8cb 	bl	80054e6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005358:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d112      	bne.n	8005388 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d025      	beq.n	80053b6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	3310      	adds	r3, #16
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fd9a 	bl	8005ea8 <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01d      	beq.n	80053b6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01a      	beq.n	80053b6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e016      	b.n	80053b6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005388:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800538c:	2b7f      	cmp	r3, #127	; 0x7f
 800538e:	d10a      	bne.n	80053a6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61bb      	str	r3, [r7, #24]
    }
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053aa:	3301      	adds	r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	b25a      	sxtb	r2, r3
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80053b6:	2301      	movs	r3, #1
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ba:	e001      	b.n	80053c0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80053bc:	2300      	movs	r3, #0
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	617b      	str	r3, [r7, #20]
        __asm volatile
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f383 8811 	msr	BASEPRI, r3
    }
 80053ca:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3740      	adds	r7, #64	; 0x40
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60bb      	str	r3, [r7, #8]
    }
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80053fa:	f001 ff35 	bl	8007268 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005404:	f001 ff60 	bl	80072c8 <vPortExitCritical>

    return uxReturn;
 8005408:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d14d      	bne.n	80054d4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 feed 	bl	800621c <xTaskPriorityDisinherit>
 8005442:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
 800544a:	e043      	b.n	80054d4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6858      	ldr	r0, [r3, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	461a      	mov	r2, r3
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	f002 fa4d 	bl	80078fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	441a      	add	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	d32b      	bcc.n	80054d4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e026      	b.n	80054d4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68d8      	ldr	r0, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	461a      	mov	r2, r3
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	f002 fa33 	bl	80078fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	425b      	negs	r3, r3
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d207      	bcs.n	80054c2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	425b      	negs	r3, r3
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d105      	bne.n	80054d4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80054dc:	697b      	ldr	r3, [r7, #20]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	441a      	add	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	429a      	cmp	r2, r3
 8005510:	d303      	bcc.n	800551a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	461a      	mov	r2, r3
 8005524:	6838      	ldr	r0, [r7, #0]
 8005526:	f002 f9e9 	bl	80078fc <memcpy>
    }
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800553a:	f001 fe95 	bl	8007268 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005544:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005546:	e011      	b.n	800556c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d012      	beq.n	8005576 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fca7 	bl	8005ea8 <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005560:	f000 fd80 	bl	8006064 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	3b01      	subs	r3, #1
 8005568:	b2db      	uxtb	r3, r3
 800556a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800556c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005570:	2b00      	cmp	r3, #0
 8005572:	dce9      	bgt.n	8005548 <prvUnlockQueue+0x16>
 8005574:	e000      	b.n	8005578 <prvUnlockQueue+0x46>
                        break;
 8005576:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005580:	f001 fea2 	bl	80072c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005584:	f001 fe70 	bl	8007268 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800558e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005590:	e011      	b.n	80055b6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3310      	adds	r3, #16
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc82 	bl	8005ea8 <xTaskRemoveFromEventList>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80055aa:	f000 fd5b 	bl	8006064 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dce9      	bgt.n	8005592 <prvUnlockQueue+0x60>
 80055be:	e000      	b.n	80055c2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80055c0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80055ca:	f001 fe7d 	bl	80072c8 <vPortExitCritical>
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055de:	f001 fe43 	bl	8007268 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e001      	b.n	80055f4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80055f4:	f001 fe68 	bl	80072c8 <vPortExitCritical>

    return xReturn;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800560a:	f001 fe2d 	bl	8007268 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	429a      	cmp	r2, r3
 8005618:	d102      	bne.n	8005620 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e001      	b.n	8005624 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005624:	f001 fe50 	bl	80072c8 <vPortExitCritical>

    return xReturn;
 8005628:	68fb      	ldr	r3, [r7, #12]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
    }
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	429a      	cmp	r2, r3
 8005664:	d102      	bne.n	800566c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e001      	b.n	8005670 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005670:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e014      	b.n	80056ba <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <vQueueAddToRegistry+0x50>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800569c:	490c      	ldr	r1, [pc, #48]	; (80056d0 <vQueueAddToRegistry+0x50>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <vQueueAddToRegistry+0x50>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80056b2:	e006      	b.n	80056c2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b07      	cmp	r3, #7
 80056be:	d9e7      	bls.n	8005690 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	200001ec 	.word	0x200001ec

080056d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80056e4:	f001 fdc0 	bl	8007268 <vPortEnterCritical>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ee:	b25b      	sxtb	r3, r3
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d103      	bne.n	80056fe <vQueueWaitForMessageRestricted+0x2a>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005704:	b25b      	sxtb	r3, r3
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d103      	bne.n	8005714 <vQueueWaitForMessageRestricted+0x40>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005714:	f001 fdd8 	bl	80072c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb91 	bl	8005e50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f7ff feff 	bl	8005532 <prvUnlockQueue>
    }
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	; 0x30
 8005740:	af04      	add	r7, sp, #16
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4618      	mov	r0, r3
 8005752:	f001 feab 	bl	80074ac <pvPortMalloc>
 8005756:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800575e:	2058      	movs	r0, #88	; 0x58
 8005760:	f001 fea4 	bl	80074ac <pvPortMalloc>
 8005764:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
 8005772:	e005      	b.n	8005780 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005774:	6978      	ldr	r0, [r7, #20]
 8005776:	f001 ff79 	bl	800766c <vPortFree>
 800577a:	e001      	b.n	8005780 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d013      	beq.n	80057ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	2300      	movs	r3, #0
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	9302      	str	r3, [sp, #8]
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f80e 	bl	80057be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80057a2:	69f8      	ldr	r0, [r7, #28]
 80057a4:	f000 f8a2 	bl	80058ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80057a8:	2301      	movs	r3, #1
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e002      	b.n	80057b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80057b4:	69bb      	ldr	r3, [r7, #24]
    }
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b088      	sub	sp, #32
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	461a      	mov	r2, r3
 80057d6:	21a5      	movs	r1, #165	; 0xa5
 80057d8:	f002 f89e 	bl	8007918 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e6:	3b01      	subs	r3, #1
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f023 0307 	bic.w	r3, r3, #7
 80057f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	617b      	str	r3, [r7, #20]
    }
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01f      	beq.n	800585c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e012      	b.n	8005848 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	7819      	ldrb	r1, [r3, #0]
 800582a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	3334      	adds	r3, #52	; 0x34
 8005832:	460a      	mov	r2, r1
 8005834:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	3301      	adds	r3, #1
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b09      	cmp	r3, #9
 800584c:	d9e9      	bls.n	8005822 <prvInitialiseNewTask+0x64>
 800584e:	e000      	b.n	8005852 <prvInitialiseNewTask+0x94>
            {
                break;
 8005850:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800585a:	e003      	b.n	8005864 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	2b04      	cmp	r3, #4
 8005868:	d901      	bls.n	800586e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800586a:	2304      	movs	r3, #4
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005878:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2200      	movs	r2, #0
 800587e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	3304      	adds	r3, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff f911 	bl	8004aac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	3318      	adds	r3, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff f90c 	bl	8004aac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005898:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	f1c3 0205 	rsb	r2, r3, #5
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	3350      	adds	r3, #80	; 0x50
 80058ae:	2204      	movs	r2, #4
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 f830 	bl	8007918 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2201      	movs	r2, #1
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f002 f829 	bl	8007918 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f001 fba0 	bl	8007010 <pxPortInitialiseStack>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058e2:	bf00      	nop
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80058f4:	f001 fcb8 	bl	8007268 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80058f8:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <prvAddNewTaskToReadyList+0xc0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <prvAddNewTaskToReadyList+0xc0>)
 8005900:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005902:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800590a:	4a29      	ldr	r2, [pc, #164]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005910:	4b26      	ldr	r3, [pc, #152]	; (80059ac <prvAddNewTaskToReadyList+0xc0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d110      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005918:	f000 fbc8 	bl	80060ac <prvInitialiseTaskLists>
 800591c:	e00d      	b.n	800593a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005942:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	2201      	movs	r2, #1
 8005952:	409a      	lsls	r2, r3
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4313      	orrs	r3, r2
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f7ff f8a6 	bl	8004ac6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800597a:	f001 fca5 	bl	80072c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d207      	bcs.n	80059a4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <prvAddNewTaskToReadyList+0xd8>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000304 	.word	0x20000304
 80059b0:	2000022c 	.word	0x2000022c
 80059b4:	20000310 	.word	0x20000310
 80059b8:	20000320 	.word	0x20000320
 80059bc:	2000030c 	.word	0x2000030c
 80059c0:	20000230 	.word	0x20000230
 80059c4:	e000ed04 	.word	0xe000ed04

080059c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <vTaskStartScheduler+0x88>)
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	2282      	movs	r2, #130	; 0x82
 80059da:	491e      	ldr	r1, [pc, #120]	; (8005a54 <vTaskStartScheduler+0x8c>)
 80059dc:	481e      	ldr	r0, [pc, #120]	; (8005a58 <vTaskStartScheduler+0x90>)
 80059de:	f7ff fead 	bl	800573c <xTaskCreate>
 80059e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80059ea:	f000 ff59 	bl	80068a0 <xTimerCreateTimerTask>
 80059ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d116      	bne.n	8005a24 <vTaskStartScheduler+0x5c>
        __asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60bb      	str	r3, [r7, #8]
    }
 8005a08:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <vTaskStartScheduler+0x94>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <vTaskStartScheduler+0x98>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a18:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <vTaskStartScheduler+0x9c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005a1e:	f001 fb81 	bl	8007124 <xPortStartScheduler>
 8005a22:	e00e      	b.n	8005a42 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d10a      	bne.n	8005a42 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	607b      	str	r3, [r7, #4]
    }
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <vTaskStartScheduler+0xa0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000328 	.word	0x20000328
 8005a54:	08008fc4 	.word	0x08008fc4
 8005a58:	0800607d 	.word	0x0800607d
 8005a5c:	20000324 	.word	0x20000324
 8005a60:	20000310 	.word	0x20000310
 8005a64:	20000308 	.word	0x20000308
 8005a68:	20000020 	.word	0x20000020

08005a6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <vTaskSuspendAll+0x18>)
 8005a78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	2000032c 	.word	0x2000032c

08005a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005a96:	4b41      	ldr	r3, [pc, #260]	; (8005b9c <xTaskResumeAll+0x114>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <xTaskResumeAll+0x2c>
        __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
    }
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005ab4:	f001 fbd8 	bl	8007268 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005ab8:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <xTaskResumeAll+0x114>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <xTaskResumeAll+0x114>)
 8005ac0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <xTaskResumeAll+0x114>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d161      	bne.n	8005b8e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aca:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <xTaskResumeAll+0x118>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d05d      	beq.n	8005b8e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ad2:	e02e      	b.n	8005b32 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad4:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3318      	adds	r3, #24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff f84d 	bl	8004b80 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff f848 	bl	8004b80 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <xTaskResumeAll+0x120>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <xTaskResumeAll+0x120>)
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4a27      	ldr	r2, [pc, #156]	; (8005bac <xTaskResumeAll+0x124>)
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe ffd4 	bl	8004ac6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <xTaskResumeAll+0x128>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b32:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <xTaskResumeAll+0x11c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1cc      	bne.n	8005ad4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005b40:	f000 fb32 	bl	80061a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <xTaskResumeAll+0x130>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005b50:	f000 f846 	bl	8005be0 <xTaskIncrementTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f1      	bne.n	8005b50 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <xTaskResumeAll+0x130>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xTaskResumeAll+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <xTaskResumeAll+0x134>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005b8e:	f001 fb9b 	bl	80072c8 <vPortExitCritical>

    return xAlreadyYielded;
 8005b92:	68bb      	ldr	r3, [r7, #8]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	2000032c 	.word	0x2000032c
 8005ba0:	20000304 	.word	0x20000304
 8005ba4:	200002c4 	.word	0x200002c4
 8005ba8:	2000030c 	.word	0x2000030c
 8005bac:	20000230 	.word	0x20000230
 8005bb0:	2000022c 	.word	0x2000022c
 8005bb4:	20000318 	.word	0x20000318
 8005bb8:	20000314 	.word	0x20000314
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <xTaskGetTickCount+0x1c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005bcc:	687b      	ldr	r3, [r7, #4]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000308 	.word	0x20000308

08005be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <xTaskIncrementTick+0x144>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 808e 	bne.w	8005d10 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <xTaskIncrementTick+0x148>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005bfc:	4a4a      	ldr	r2, [pc, #296]	; (8005d28 <xTaskIncrementTick+0x148>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d120      	bne.n	8005c4a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005c08:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <xTaskIncrementTick+0x48>
        __asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	603b      	str	r3, [r7, #0]
    }
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xTaskIncrementTick+0x46>
 8005c28:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <xTaskIncrementTick+0x150>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a3e      	ldr	r2, [pc, #248]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	; (8005d30 <xTaskIncrementTick+0x150>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <xTaskIncrementTick+0x154>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <xTaskIncrementTick+0x154>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	f000 faaf 	bl	80061a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d348      	bcc.n	8005ce6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	601a      	str	r2, [r3, #0]
                    break;
 8005c66:	e03e      	b.n	8005ce6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d203      	bcs.n	8005c88 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c86:	e02e      	b.n	8005ce6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe ff77 	bl	8004b80 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe ff6e 	bl	8004b80 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <xTaskIncrementTick+0x15c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <xTaskIncrementTick+0x15c>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <xTaskIncrementTick+0x160>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe fefa 	bl	8004ac6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <xTaskIncrementTick+0x164>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3b9      	bcc.n	8005c54 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce4:	e7b6      	b.n	8005c54 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <xTaskIncrementTick+0x164>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4914      	ldr	r1, [pc, #80]	; (8005d40 <xTaskIncrementTick+0x160>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d901      	bls.n	8005d02 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <xTaskIncrementTick+0x168>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e004      	b.n	8005d1a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <xTaskIncrementTick+0x16c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <xTaskIncrementTick+0x16c>)
 8005d18:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005d1a:	697b      	ldr	r3, [r7, #20]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	2000032c 	.word	0x2000032c
 8005d28:	20000308 	.word	0x20000308
 8005d2c:	200002bc 	.word	0x200002bc
 8005d30:	200002c0 	.word	0x200002c0
 8005d34:	2000031c 	.word	0x2000031c
 8005d38:	20000324 	.word	0x20000324
 8005d3c:	2000030c 	.word	0x2000030c
 8005d40:	20000230 	.word	0x20000230
 8005d44:	2000022c 	.word	0x2000022c
 8005d48:	20000318 	.word	0x20000318
 8005d4c:	20000314 	.word	0x20000314

08005d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d56:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <vTaskSwitchContext+0xa4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005d5e:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <vTaskSwitchContext+0xa8>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005d64:	e03f      	b.n	8005de6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <vTaskSwitchContext+0xa8>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <vTaskSwitchContext+0xac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	f1c3 031f 	rsb	r3, r3, #31
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	491f      	ldr	r1, [pc, #124]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <vTaskSwitchContext+0x5c>
        __asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	607b      	str	r3, [r7, #4]
    }
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <vTaskSwitchContext+0x5a>
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005db8:	4413      	add	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d104      	bne.n	8005ddc <vTaskSwitchContext+0x8c>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <vTaskSwitchContext+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000032c 	.word	0x2000032c
 8005df8:	20000318 	.word	0x20000318
 8005dfc:	2000030c 	.word	0x2000030c
 8005e00:	20000230 	.word	0x20000230
 8005e04:	2000022c 	.word	0x2000022c

08005e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
    }
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <vTaskPlaceOnEventList+0x44>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3318      	adds	r3, #24
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fe fe69 	bl	8004b0e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f000 fcc8 	bl	80067d4 <prvAddCurrentTaskToDelayedList>
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2000022c 	.word	0x2000022c

08005e50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	617b      	str	r3, [r7, #20]
    }
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7fe fe20 	bl	8004ac6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68b8      	ldr	r0, [r7, #8]
 8005e96:	f000 fc9d 	bl	80067d4 <prvAddCurrentTaskToDelayedList>
    }
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	2000022c 	.word	0x2000022c

08005ea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
    }
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3318      	adds	r3, #24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fe51 	bl	8004b80 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <xTaskRemoveFromEventList+0xac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11c      	bne.n	8005f20 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe fe48 	bl	8004b80 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <xTaskRemoveFromEventList+0xb0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <xTaskRemoveFromEventList+0xb0>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a13      	ldr	r2, [pc, #76]	; (8005f5c <xTaskRemoveFromEventList+0xb4>)
 8005f10:	441a      	add	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3304      	adds	r3, #4
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f7fe fdd4 	bl	8004ac6 <vListInsertEnd>
 8005f1e:	e005      	b.n	8005f2c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3318      	adds	r3, #24
 8005f24:	4619      	mov	r1, r3
 8005f26:	480e      	ldr	r0, [pc, #56]	; (8005f60 <xTaskRemoveFromEventList+0xb8>)
 8005f28:	f7fe fdcd 	bl	8004ac6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <xTaskRemoveFromEventList+0xbc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d905      	bls.n	8005f46 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <xTaskRemoveFromEventList+0xc0>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e001      	b.n	8005f4a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005f4a:	697b      	ldr	r3, [r7, #20]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	2000032c 	.word	0x2000032c
 8005f58:	2000030c 	.word	0x2000030c
 8005f5c:	20000230 	.word	0x20000230
 8005f60:	200002c4 	.word	0x200002c4
 8005f64:	2000022c 	.word	0x2000022c
 8005f68:	20000318 	.word	0x20000318

08005f6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <vTaskInternalSetTimeOutState+0x24>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <vTaskInternalSetTimeOutState+0x28>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	2000031c 	.word	0x2000031c
 8005f94:	20000308 	.word	0x20000308

08005f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	613b      	str	r3, [r7, #16]
    }
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
    }
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005fda:	f001 f945 	bl	8007268 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <xTaskCheckForTimeOut+0xc4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	d102      	bne.n	8005ffe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e026      	b.n	800604c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <xTaskCheckForTimeOut+0xc8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d00a      	beq.n	8006020 <xTaskCheckForTimeOut+0x88>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	429a      	cmp	r2, r3
 8006012:	d305      	bcc.n	8006020 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006014:	2301      	movs	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e015      	b.n	800604c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	429a      	cmp	r2, r3
 8006028:	d20b      	bcs.n	8006042 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad2      	subs	r2, r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff98 	bl	8005f6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e004      	b.n	800604c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800604c:	f001 f93c 	bl	80072c8 <vPortExitCritical>

    return xReturn;
 8006050:	69fb      	ldr	r3, [r7, #28]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000308 	.word	0x20000308
 8006060:	2000031c 	.word	0x2000031c

08006064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <vTaskMissedYield+0x14>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000318 	.word	0x20000318

0800607c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006084:	f000 f852 	bl	800612c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <prvIdleTask+0x28>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d9f9      	bls.n	8006084 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <prvIdleTask+0x2c>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80060a0:	e7f0      	b.n	8006084 <prvIdleTask+0x8>
 80060a2:	bf00      	nop
 80060a4:	20000230 	.word	0x20000230
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	e00c      	b.n	80060d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4a12      	ldr	r2, [pc, #72]	; (800610c <prvInitialiseTaskLists+0x60>)
 80060c4:	4413      	add	r3, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fcd0 	bl	8004a6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3301      	adds	r3, #1
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d9ef      	bls.n	80060b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80060d8:	480d      	ldr	r0, [pc, #52]	; (8006110 <prvInitialiseTaskLists+0x64>)
 80060da:	f7fe fcc7 	bl	8004a6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80060de:	480d      	ldr	r0, [pc, #52]	; (8006114 <prvInitialiseTaskLists+0x68>)
 80060e0:	f7fe fcc4 	bl	8004a6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80060e4:	480c      	ldr	r0, [pc, #48]	; (8006118 <prvInitialiseTaskLists+0x6c>)
 80060e6:	f7fe fcc1 	bl	8004a6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80060ea:	480c      	ldr	r0, [pc, #48]	; (800611c <prvInitialiseTaskLists+0x70>)
 80060ec:	f7fe fcbe 	bl	8004a6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80060f0:	480b      	ldr	r0, [pc, #44]	; (8006120 <prvInitialiseTaskLists+0x74>)
 80060f2:	f7fe fcbb 	bl	8004a6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <prvInitialiseTaskLists+0x78>)
 80060f8:	4a05      	ldr	r2, [pc, #20]	; (8006110 <prvInitialiseTaskLists+0x64>)
 80060fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <prvInitialiseTaskLists+0x7c>)
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <prvInitialiseTaskLists+0x68>)
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000230 	.word	0x20000230
 8006110:	20000294 	.word	0x20000294
 8006114:	200002a8 	.word	0x200002a8
 8006118:	200002c4 	.word	0x200002c4
 800611c:	200002d8 	.word	0x200002d8
 8006120:	200002f0 	.word	0x200002f0
 8006124:	200002bc 	.word	0x200002bc
 8006128:	200002c0 	.word	0x200002c0

0800612c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006132:	e019      	b.n	8006168 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006134:	f001 f898 	bl	8007268 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <prvCheckTasksWaitingTermination+0x50>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fd1b 	bl	8004b80 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <prvCheckTasksWaitingTermination+0x54>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <prvCheckTasksWaitingTermination+0x54>)
 8006152:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <prvCheckTasksWaitingTermination+0x58>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <prvCheckTasksWaitingTermination+0x58>)
 800615c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800615e:	f001 f8b3 	bl	80072c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f810 	bl	8006188 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <prvCheckTasksWaitingTermination+0x58>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e1      	bne.n	8006134 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	200002d8 	.word	0x200002d8
 8006180:	20000304 	.word	0x20000304
 8006184:	200002ec 	.word	0x200002ec

08006188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fa69 	bl	800766c <vPortFree>
                vPortFree( pxTCB );
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fa66 	bl	800766c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvResetNextTaskUnblockTime+0x30>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <prvResetNextTaskUnblockTime+0x34>)
 80061b8:	f04f 32ff 	mov.w	r2, #4294967295
 80061bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80061be:	e005      	b.n	80061cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <prvResetNextTaskUnblockTime+0x30>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <prvResetNextTaskUnblockTime+0x34>)
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	200002bc 	.word	0x200002bc
 80061dc:	20000324 	.word	0x20000324

080061e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <xTaskGetSchedulerState+0x34>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80061ee:	2301      	movs	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	e008      	b.n	8006206 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f4:	4b08      	ldr	r3, [pc, #32]	; (8006218 <xTaskGetSchedulerState+0x38>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80061fc:	2302      	movs	r3, #2
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	e001      	b.n	8006206 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006206:	687b      	ldr	r3, [r7, #4]
    }
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20000310 	.word	0x20000310
 8006218:	2000032c 	.word	0x2000032c

0800621c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d063      	beq.n	80062fa <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006232:	4b34      	ldr	r3, [pc, #208]	; (8006304 <xTaskPriorityDisinherit+0xe8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d00a      	beq.n	8006252 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60fb      	str	r3, [r7, #12]
    }
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60bb      	str	r3, [r7, #8]
    }
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	429a      	cmp	r2, r3
 8006284:	d039      	beq.n	80062fa <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d135      	bne.n	80062fa <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fc74 	bl	8004b80 <uxListRemove>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	2201      	movs	r2, #1
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43da      	mvns	r2, r3
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <xTaskPriorityDisinherit+0xec>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4013      	ands	r3, r2
 80062b0:	4a15      	ldr	r2, [pc, #84]	; (8006308 <xTaskPriorityDisinherit+0xec>)
 80062b2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	f1c3 0205 	rsb	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <xTaskPriorityDisinherit+0xec>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <xTaskPriorityDisinherit+0xec>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <xTaskPriorityDisinherit+0xf0>)
 80062e8:	441a      	add	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fbe8 	bl	8004ac6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062fa:	697b      	ldr	r3, [r7, #20]
    }
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2000022c 	.word	0x2000022c
 8006308:	2000030c 	.word	0x2000030c
 800630c:	20000230 	.word	0x20000230

08006310 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	613b      	str	r3, [r7, #16]
    }
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800633a:	f000 ff95 	bl	8007268 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800633e:	4b32      	ldr	r3, [pc, #200]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	3354      	adds	r3, #84	; 0x54
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d022      	beq.n	8006396 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	3214      	adds	r2, #20
 8006358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	43d2      	mvns	r2, r2
 8006360:	4011      	ands	r1, r2
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	3214      	adds	r2, #20
 8006366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800636a:	4b27      	ldr	r3, [pc, #156]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	3354      	adds	r3, #84	; 0x54
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800637e:	2101      	movs	r1, #1
 8006380:	6a38      	ldr	r0, [r7, #32]
 8006382:	f000 fa27 	bl	80067d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006386:	4b21      	ldr	r3, [pc, #132]	; (800640c <xTaskGenericNotifyWait+0xfc>)
 8006388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006396:	f000 ff97 	bl	80072c8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800639a:	f000 ff65 	bl	8007268 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80063a4:	4b18      	ldr	r3, [pc, #96]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	3214      	adds	r2, #20
 80063ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80063b4:	4b14      	ldr	r3, [pc, #80]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	3354      	adds	r3, #84	; 0x54
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d002      	beq.n	80063cc <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e00e      	b.n	80063ea <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	3214      	adds	r2, #20
 80063d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	43d2      	mvns	r2, r2
 80063dc:	4011      	ands	r1, r2
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	3214      	adds	r2, #20
 80063e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <xTaskGenericNotifyWait+0xf8>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	3354      	adds	r3, #84	; 0x54
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80063f8:	f000 ff66 	bl	80072c8 <vPortExitCritical>

        return xReturn;
 80063fc:	697b      	ldr	r3, [r7, #20]
    }
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	2000022c 	.word	0x2000022c
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800641e:	2301      	movs	r3, #1
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <xTaskGenericNotify+0x2e>
        __asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
    }
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61fb      	str	r3, [r7, #28]
    }
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800645e:	f000 ff03 	bl	8007268 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	3214      	adds	r2, #20
 800646e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4413      	add	r3, r2
 800647c:	3354      	adds	r3, #84	; 0x54
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4413      	add	r3, r2
 800648a:	3354      	adds	r3, #84	; 0x54
 800648c:	2202      	movs	r2, #2
 800648e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b04      	cmp	r3, #4
 8006494:	d83b      	bhi.n	800650e <xTaskGenericNotify+0xfe>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <xTaskGenericNotify+0x8c>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	0800652d 	.word	0x0800652d
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064cd 	.word	0x080064cd
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	080064f3 	.word	0x080064f3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	3214      	adds	r2, #20
 80064b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	ea42 0103 	orr.w	r1, r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	3214      	adds	r2, #20
 80064c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064ca:	e032      	b.n	8006532 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	3214      	adds	r2, #20
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	3214      	adds	r2, #20
 80064de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064e2:	e026      	b.n	8006532 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	3214      	adds	r2, #20
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064f0:	e01f      	b.n	8006532 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d006      	beq.n	8006508 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	3214      	adds	r2, #20
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006506:	e014      	b.n	8006532 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800650c:	e011      	b.n	8006532 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800650e:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <xTaskGenericNotify+0x1ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <xTaskGenericNotify+0x120>
        __asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61bb      	str	r3, [r7, #24]
    }
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <xTaskGenericNotify+0x11a>
                    break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <xTaskGenericNotify+0x122>

                    break;
 8006530:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006536:	2b01      	cmp	r3, #1
 8006538:	d139      	bne.n	80065ae <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fb1e 	bl	8004b80 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <xTaskGenericNotify+0x1b0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4313      	orrs	r3, r2
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <xTaskGenericNotify+0x1b0>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <xTaskGenericNotify+0x1b4>)
 8006564:	441a      	add	r2, r3
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe faaa 	bl	8004ac6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <xTaskGenericNotify+0x180>
        __asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	617b      	str	r3, [r7, #20]
    }
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <xTaskGenericNotify+0x1b8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	429a      	cmp	r2, r3
 800659c:	d907      	bls.n	80065ae <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <xTaskGenericNotify+0x1bc>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065ae:	f000 fe8b 	bl	80072c8 <vPortExitCritical>

        return xReturn;
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80065b4:	4618      	mov	r0, r3
 80065b6:	3730      	adds	r7, #48	; 0x30
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000308 	.word	0x20000308
 80065c0:	2000030c 	.word	0x2000030c
 80065c4:	20000230 	.word	0x20000230
 80065c8:	2000022c 	.word	0x2000022c
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b090      	sub	sp, #64	; 0x40
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80065de:	2301      	movs	r3, #1
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800661a:	f000 ff07 	bl	800742c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006622:	f3ef 8211 	mrs	r2, BASEPRI
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	627a      	str	r2, [r7, #36]	; 0x24
 8006638:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800663e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006640:	2b00      	cmp	r3, #0
 8006642:	d006      	beq.n	8006652 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	3214      	adds	r2, #20
 800664a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4413      	add	r3, r2
 8006658:	3354      	adds	r3, #84	; 0x54
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4413      	add	r3, r2
 8006666:	3354      	adds	r3, #84	; 0x54
 8006668:	2202      	movs	r2, #2
 800666a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d83b      	bhi.n	80066ea <xTaskGenericNotifyFromISR+0x11a>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <xTaskGenericNotifyFromISR+0xa8>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006709 	.word	0x08006709
 800667c:	0800668d 	.word	0x0800668d
 8006680:	080066a9 	.word	0x080066a9
 8006684:	080066c1 	.word	0x080066c1
 8006688:	080066cf 	.word	0x080066cf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	3214      	adds	r2, #20
 8006692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	ea42 0103 	orr.w	r1, r2, r3
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	3214      	adds	r2, #20
 80066a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066a6:	e032      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	3214      	adds	r2, #20
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	3214      	adds	r2, #20
 80066ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066be:	e026      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	3214      	adds	r2, #20
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066cc:	e01f      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80066ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d006      	beq.n	80066e4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	3214      	adds	r2, #20
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80066e2:	e014      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80066e8:	e011      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80066ea:	4b33      	ldr	r3, [pc, #204]	; (80067b8 <xTaskGenericNotifyFromISR+0x1e8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	61fb      	str	r3, [r7, #28]
    }
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800670c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800670e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006712:	2b01      	cmp	r3, #1
 8006714:	d145      	bne.n	80067a2 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	61bb      	str	r3, [r7, #24]
    }
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006734:	4b21      	ldr	r3, [pc, #132]	; (80067bc <xTaskGenericNotifyFromISR+0x1ec>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d11c      	bne.n	8006776 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	3304      	adds	r3, #4
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fa1d 	bl	8004b80 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	2201      	movs	r2, #1
 800674c:	409a      	lsls	r2, r3
 800674e:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <xTaskGenericNotifyFromISR+0x1f0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4313      	orrs	r3, r2
 8006754:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <xTaskGenericNotifyFromISR+0x1f0>)
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <xTaskGenericNotifyFromISR+0x1f4>)
 8006766:	441a      	add	r2, r3
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fe f9a9 	bl	8004ac6 <vListInsertEnd>
 8006774:	e005      	b.n	8006782 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	3318      	adds	r3, #24
 800677a:	4619      	mov	r1, r3
 800677c:	4812      	ldr	r0, [pc, #72]	; (80067c8 <xTaskGenericNotifyFromISR+0x1f8>)
 800677e:	f7fe f9a2 	bl	8004ac6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <xTaskGenericNotifyFromISR+0x1fc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d908      	bls.n	80067a2 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <xTaskGenericNotifyFromISR+0x200>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a4:	617b      	str	r3, [r7, #20]
        __asm volatile
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f383 8811 	msr	BASEPRI, r3
    }
 80067ac:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80067b0:	4618      	mov	r0, r3
 80067b2:	3740      	adds	r7, #64	; 0x40
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000308 	.word	0x20000308
 80067bc:	2000032c 	.word	0x2000032c
 80067c0:	2000030c 	.word	0x2000030c
 80067c4:	20000230 	.word	0x20000230
 80067c8:	200002c4 	.word	0x200002c4
 80067cc:	2000022c 	.word	0x2000022c
 80067d0:	20000318 	.word	0x20000318

080067d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e4:	4b28      	ldr	r3, [pc, #160]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe f9c8 	bl	8004b80 <uxListRemove>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	2201      	movs	r2, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	43da      	mvns	r2, r3
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4013      	ands	r3, r2
 800680a:	4a20      	ldr	r2, [pc, #128]	; (800688c <prvAddCurrentTaskToDelayedList+0xb8>)
 800680c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d10a      	bne.n	800682c <prvAddCurrentTaskToDelayedList+0x58>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681c:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	481a      	ldr	r0, [pc, #104]	; (8006890 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006826:	f7fe f94e 	bl	8004ac6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800682a:	e026      	b.n	800687a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006834:	4b14      	ldr	r3, [pc, #80]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d209      	bcs.n	8006858 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006844:	4b13      	ldr	r3, [pc, #76]	; (8006894 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f7fe f95c 	bl	8004b0e <vListInsert>
}
 8006856:	e010      	b.n	800687a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <prvAddCurrentTaskToDelayedList+0xc4>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f7fe f952 	bl	8004b0e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <prvAddCurrentTaskToDelayedList+0xc8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d202      	bcs.n	800687a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006874:	4a09      	ldr	r2, [pc, #36]	; (800689c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6013      	str	r3, [r2, #0]
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000308 	.word	0x20000308
 8006888:	2000022c 	.word	0x2000022c
 800688c:	2000030c 	.word	0x2000030c
 8006890:	200002f0 	.word	0x200002f0
 8006894:	200002c0 	.word	0x200002c0
 8006898:	200002bc 	.word	0x200002bc
 800689c:	20000324 	.word	0x20000324

080068a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80068aa:	f000 fb31 	bl	8006f10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <xTimerCreateTimerTask+0x54>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <xTimerCreateTimerTask+0x58>)
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	2302      	movs	r3, #2
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2300      	movs	r3, #0
 80068c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80068c4:	490d      	ldr	r1, [pc, #52]	; (80068fc <xTimerCreateTimerTask+0x5c>)
 80068c6:	480e      	ldr	r0, [pc, #56]	; (8006900 <xTimerCreateTimerTask+0x60>)
 80068c8:	f7fe ff38 	bl	800573c <xTaskCreate>
 80068cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
    }
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80068ea:	687b      	ldr	r3, [r7, #4]
    }
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000360 	.word	0x20000360
 80068f8:	20000364 	.word	0x20000364
 80068fc:	08008fcc 	.word	0x08008fcc
 8006900:	08006af1 	.word	0x08006af1

08006904 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006912:	202c      	movs	r0, #44	; 0x2c
 8006914:	f000 fdca 	bl	80074ac <pvPortMalloc>
 8006918:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f805 	bl	8006946 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800693c:	697b      	ldr	r3, [r7, #20]
        }
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	617b      	str	r3, [r7, #20]
    }
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01e      	beq.n	80069b4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006976:	f000 facb 	bl	8006f10 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	3304      	adds	r3, #4
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe f888 	bl	8004aac <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a8:	f043 0304 	orr.w	r3, r3, #4
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xTimerGenericCommand+0x2e>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	623b      	str	r3, [r7, #32]
    }
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <xTimerGenericCommand+0x98>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02a      	beq.n	8006a48 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	dc18      	bgt.n	8006a36 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a04:	f7ff fbec 	bl	80061e0 <xTaskGetSchedulerState>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d109      	bne.n	8006a22 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f107 0114 	add.w	r1, r7, #20
 8006a16:	2300      	movs	r3, #0
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	f7fe f9c5 	bl	8004da8 <xQueueGenericSend>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a20:	e012      	b.n	8006a48 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f107 0114 	add.w	r1, r7, #20
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f7fe f9bb 	bl	8004da8 <xQueueGenericSend>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
 8006a34:	e008      	b.n	8006a48 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f107 0114 	add.w	r1, r7, #20
 8006a3e:	2300      	movs	r3, #0
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	f7fe faaf 	bl	8004fa4 <xQueueGenericSendFromISR>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3728      	adds	r7, #40	; 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000360 	.word	0x20000360

08006a58 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a62:	4b22      	ldr	r3, [pc, #136]	; (8006aec <prvProcessExpiredTimer+0x94>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe f885 	bl	8004b80 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d022      	beq.n	8006aca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	18d1      	adds	r1, r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	6978      	ldr	r0, [r7, #20]
 8006a92:	f000 f8d1 	bl	8006c38 <prvInsertTimerInActiveList>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01f      	beq.n	8006adc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6978      	ldr	r0, [r7, #20]
 8006aa8:	f7ff ff88 	bl	80069bc <xTimerGenericCommand>
 8006aac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d113      	bne.n	8006adc <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
    }
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	4798      	blx	r3
    }
 8006ae4:	bf00      	nop
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000358 	.word	0x20000358

08006af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f857 	bl	8006bb0 <prvGetNextExpireTime>
 8006b02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f803 	bl	8006b14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b0e:	f000 f8d5 	bl	8006cbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b12:	e7f1      	b.n	8006af8 <prvTimerTask+0x8>

08006b14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b1e:	f7fe ffa5 	bl	8005a6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f866 	bl	8006bf8 <prvSampleTimeNow>
 8006b2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d130      	bne.n	8006b96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <prvProcessTimerOrBlockTask+0x3c>
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d806      	bhi.n	8006b50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b42:	f7fe ffa1 	bl	8005a88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff85 	bl	8006a58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b4e:	e024      	b.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <prvProcessTimerOrBlockTask+0x90>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <prvProcessTimerOrBlockTask+0x50>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <prvProcessTimerOrBlockTask+0x52>
 8006b64:	2300      	movs	r3, #0
 8006b66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <prvProcessTimerOrBlockTask+0x94>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	f7fe fdad 	bl	80056d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006b7a:	f7fe ff85 	bl	8005a88 <xTaskResumeAll>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <prvProcessTimerOrBlockTask+0x98>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
    }
 8006b94:	e001      	b.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006b96:	f7fe ff77 	bl	8005a88 <xTaskResumeAll>
    }
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	2000035c 	.word	0x2000035c
 8006ba8:	20000360 	.word	0x20000360
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <prvGetNextExpireTime+0x44>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <prvGetNextExpireTime+0x16>
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	e000      	b.n	8006bc8 <prvGetNextExpireTime+0x18>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <prvGetNextExpireTime+0x44>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e001      	b.n	8006be4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006be4:	68fb      	ldr	r3, [r7, #12]
    }
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000358 	.word	0x20000358

08006bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c00:	f7fe ffde 	bl	8005bc0 <xTaskGetTickCount>
 8006c04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <prvSampleTimeNow+0x3c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d205      	bcs.n	8006c1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c10:	f000 f91a 	bl	8006e48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c22:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <prvSampleTimeNow+0x3c>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c28:	68fb      	ldr	r3, [r7, #12]
    }
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000368 	.word	0x20000368

08006c38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d812      	bhi.n	8006c84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	1ad2      	subs	r2, r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e01b      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <prvInsertTimerInActiveList+0x7c>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fd ff46 	bl	8004b0e <vListInsert>
 8006c82:	e012      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d206      	bcs.n	8006c9a <prvInsertTimerInActiveList+0x62>
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e007      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvInsertTimerInActiveList+0x80>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f7fd ff32 	bl	8004b0e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006caa:	697b      	ldr	r3, [r7, #20]
    }
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	2000035c 	.word	0x2000035c
 8006cb8:	20000358 	.word	0x20000358

08006cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cc2:	e0ae      	b.n	8006e22 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f2c0 80aa 	blt.w	8006e20 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fd ff4f 	bl	8004b80 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce2:	1d3b      	adds	r3, r7, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff87 	bl	8006bf8 <prvSampleTimeNow>
 8006cea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	f200 8097 	bhi.w	8006e22 <prvProcessReceivedCommands+0x166>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <prvProcessReceivedCommands+0x40>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d99 	.word	0x08006d99
 8006d0c:	08006dad 	.word	0x08006dad
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d25 	.word	0x08006d25
 8006d1c:	08006d99 	.word	0x08006d99
 8006d20:	08006dad 	.word	0x08006dad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	18d1      	adds	r1, r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d44:	f7ff ff78 	bl	8006c38 <prvInsertTimerInActiveList>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d069      	beq.n	8006e22 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d54:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d05e      	beq.n	8006e22 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	441a      	add	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	2300      	movs	r3, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d76:	f7ff fe21 	bl	80069bc <xTimerGenericCommand>
 8006d7a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d14f      	bne.n	8006e22 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61bb      	str	r3, [r7, #24]
    }
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006daa:	e03a      	b.n	8006e22 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	617b      	str	r3, [r7, #20]
    }
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	18d1      	adds	r1, r2, r3
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df0:	f7ff ff22 	bl	8006c38 <prvInsertTimerInActiveList>
                        break;
 8006df4:	e015      	b.n	8006e22 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e06:	f000 fc31 	bl	800766c <vPortFree>
 8006e0a:	e00a      	b.n	8006e22 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e1e:	e000      	b.n	8006e22 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006e20:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <prvProcessReceivedCommands+0x188>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f107 0108 	add.w	r1, r7, #8
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe f963 	bl	80050f8 <xQueueReceive>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f47f af45 	bne.w	8006cc4 <prvProcessReceivedCommands+0x8>
        }
    }
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	3728      	adds	r7, #40	; 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000360 	.word	0x20000360

08006e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4e:	e048      	b.n	8006ee2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5a:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fd fe89 	bl	8004b80 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02e      	beq.n	8006ee2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90e      	bls.n	8006eb4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea2:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f7fd fe2e 	bl	8004b0e <vListInsert>
 8006eb2:	e016      	b.n	8006ee2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff fd7c 	bl	80069bc <xTimerGenericCommand>
 8006ec4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	603b      	str	r3, [r7, #0]
    }
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1b1      	bne.n	8006e50 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvSwitchTimerLists+0xc4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xc0>)
 8006ef8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSwitchTimerLists+0xc4>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6013      	str	r3, [r2, #0]
    }
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000358 	.word	0x20000358
 8006f0c:	2000035c 	.word	0x2000035c

08006f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006f14:	f000 f9a8 	bl	8007268 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006f18:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <prvCheckForValidListAndQueue+0x54>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11d      	bne.n	8006f5c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006f20:	4811      	ldr	r0, [pc, #68]	; (8006f68 <prvCheckForValidListAndQueue+0x58>)
 8006f22:	f7fd fda3 	bl	8004a6c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006f26:	4811      	ldr	r0, [pc, #68]	; (8006f6c <prvCheckForValidListAndQueue+0x5c>)
 8006f28:	f7fd fda0 	bl	8004a6c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f2e:	4a0e      	ldr	r2, [pc, #56]	; (8006f68 <prvCheckForValidListAndQueue+0x58>)
 8006f30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006f32:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f34:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <prvCheckForValidListAndQueue+0x5c>)
 8006f36:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006f38:	2200      	movs	r2, #0
 8006f3a:	210c      	movs	r1, #12
 8006f3c:	200a      	movs	r0, #10
 8006f3e:	f7fd feb1 	bl	8004ca4 <xQueueGenericCreate>
 8006f42:	4603      	mov	r3, r0
 8006f44:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <prvCheckForValidListAndQueue+0x54>)
 8006f46:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <prvCheckForValidListAndQueue+0x54>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <prvCheckForValidListAndQueue+0x54>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4908      	ldr	r1, [pc, #32]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fb92 	bl	8005680 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f5c:	f000 f9b4 	bl	80072c8 <vPortExitCritical>
    }
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000360 	.word	0x20000360
 8006f68:	20000330 	.word	0x20000330
 8006f6c:	20000344 	.word	0x20000344
 8006f70:	20000358 	.word	0x20000358
 8006f74:	2000035c 	.word	0x2000035c
 8006f78:	08008fd4 	.word	0x08008fd4

08006f7c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <xTimerIsTimerActive+0x28>
        __asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60fb      	str	r3, [r7, #12]
    }
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8006fa4:	f000 f960 	bl	8007268 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e001      	b.n	8006fc0 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8006fc0:	f000 f982 	bl	80072c8 <vPortExitCritical>

        return xReturn;
 8006fc4:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
    }
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006ff6:	f000 f937 	bl	8007268 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007000:	f000 f962 	bl	80072c8 <vPortExitCritical>

        return pvReturn;
 8007004:	693b      	ldr	r3, [r7, #16]
    }
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3b04      	subs	r3, #4
 8007020:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007028:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3b04      	subs	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3b04      	subs	r3, #4
 800703e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007040:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <pxPortInitialiseStack+0x64>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3b14      	subs	r3, #20
 800704a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b04      	subs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f06f 0202 	mvn.w	r2, #2
 800705e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b20      	subs	r3, #32
 8007064:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	08007079 	.word	0x08007079

08007078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <prvTaskExitError+0x54>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d00a      	beq.n	80070a2 <prvTaskExitError+0x2a>
        __asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
    }
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <prvTaskExitError+0x28>
        __asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60bb      	str	r3, [r7, #8]
    }
 80070b4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80070b6:	bf00      	nop
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0fc      	beq.n	80070b8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20000024 	.word	0x20000024

080070d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <pxCurrentTCBConst2>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	f380 8809 	msr	PSP, r0
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8811 	msr	BASEPRI, r0
 80070ea:	4770      	bx	lr
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst2>:
 80070f0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80070f8:	4808      	ldr	r0, [pc, #32]	; (800711c <prvPortStartFirstTask+0x24>)
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f380 8808 	msr	MSP, r0
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8814 	msr	CONTROL, r0
 800710a:	b662      	cpsie	i
 800710c:	b661      	cpsie	f
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	df00      	svc	0
 8007118:	bf00      	nop
 800711a:	0000      	.short	0x0000
 800711c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop

08007124 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800712a:	4b46      	ldr	r3, [pc, #280]	; (8007244 <xPortStartScheduler+0x120>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a46      	ldr	r2, [pc, #280]	; (8007248 <xPortStartScheduler+0x124>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d10a      	bne.n	800714a <xPortStartScheduler+0x26>
        __asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	613b      	str	r3, [r7, #16]
    }
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800714a:	4b3e      	ldr	r3, [pc, #248]	; (8007244 <xPortStartScheduler+0x120>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a3f      	ldr	r2, [pc, #252]	; (800724c <xPortStartScheduler+0x128>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d10a      	bne.n	800716a <xPortStartScheduler+0x46>
        __asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	60fb      	str	r3, [r7, #12]
    }
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800716a:	4b39      	ldr	r3, [pc, #228]	; (8007250 <xPortStartScheduler+0x12c>)
 800716c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800718c:	b2da      	uxtb	r2, r3
 800718e:	4b31      	ldr	r3, [pc, #196]	; (8007254 <xPortStartScheduler+0x130>)
 8007190:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007192:	4b31      	ldr	r3, [pc, #196]	; (8007258 <xPortStartScheduler+0x134>)
 8007194:	2207      	movs	r2, #7
 8007196:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007198:	e009      	b.n	80071ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800719a:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <xPortStartScheduler+0x134>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3b01      	subs	r3, #1
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <xPortStartScheduler+0x134>)
 80071a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b6:	2b80      	cmp	r3, #128	; 0x80
 80071b8:	d0ef      	beq.n	800719a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071ba:	4b27      	ldr	r3, [pc, #156]	; (8007258 <xPortStartScheduler+0x134>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f1c3 0307 	rsb	r3, r3, #7
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d00a      	beq.n	80071dc <xPortStartScheduler+0xb8>
        __asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
    }
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071dc:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <xPortStartScheduler+0x134>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <xPortStartScheduler+0x134>)
 80071e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <xPortStartScheduler+0x134>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ee:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <xPortStartScheduler+0x134>)
 80071f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <xPortStartScheduler+0x138>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <xPortStartScheduler+0x138>)
 8007200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007204:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <xPortStartScheduler+0x138>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a14      	ldr	r2, [pc, #80]	; (800725c <xPortStartScheduler+0x138>)
 800720c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007210:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007212:	f000 f8db 	bl	80073cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <xPortStartScheduler+0x13c>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800721c:	f000 f8fa 	bl	8007414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007220:	4b10      	ldr	r3, [pc, #64]	; (8007264 <xPortStartScheduler+0x140>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a0f      	ldr	r2, [pc, #60]	; (8007264 <xPortStartScheduler+0x140>)
 8007226:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800722a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800722c:	f7ff ff64 	bl	80070f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007230:	f7fe fd8e 	bl	8005d50 <vTaskSwitchContext>
    prvTaskExitError();
 8007234:	f7ff ff20 	bl	8007078 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	e000ed00 	.word	0xe000ed00
 8007248:	410fc271 	.word	0x410fc271
 800724c:	410fc270 	.word	0x410fc270
 8007250:	e000e400 	.word	0xe000e400
 8007254:	2000036c 	.word	0x2000036c
 8007258:	20000370 	.word	0x20000370
 800725c:	e000ed20 	.word	0xe000ed20
 8007260:	20000024 	.word	0x20000024
 8007264:	e000ef34 	.word	0xe000ef34

08007268 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
        __asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
    }
 8007280:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <vPortEnterCritical+0x58>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <vPortEnterCritical+0x58>)
 800728a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <vPortEnterCritical+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d10f      	bne.n	80072b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <vPortEnterCritical+0x5c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	603b      	str	r3, [r7, #0]
    }
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <vPortEnterCritical+0x4a>
    }
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	20000024 	.word	0x20000024
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <vPortExitCritical+0x50>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <vPortExitCritical+0x24>
        __asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	607b      	str	r3, [r7, #4]
    }
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <vPortExitCritical+0x50>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4a09      	ldr	r2, [pc, #36]	; (8007318 <vPortExitCritical+0x50>)
 80072f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <vPortExitCritical+0x50>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <vPortExitCritical+0x42>
 80072fe:	2300      	movs	r3, #0
 8007300:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f383 8811 	msr	BASEPRI, r3
    }
 8007308:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000024 	.word	0x20000024
 800731c:	00000000 	.word	0x00000000

08007320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007320:	f3ef 8009 	mrs	r0, PSP
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <pxCurrentTCBConst>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	f01e 0f10 	tst.w	lr, #16
 8007330:	bf08      	it	eq
 8007332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	6010      	str	r0, [r2, #0]
 800733c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007344:	f380 8811 	msr	BASEPRI, r0
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f7fe fcfe 	bl	8005d50 <vTaskSwitchContext>
 8007354:	f04f 0000 	mov.w	r0, #0
 8007358:	f380 8811 	msr	BASEPRI, r0
 800735c:	bc09      	pop	{r0, r3}
 800735e:	6819      	ldr	r1, [r3, #0]
 8007360:	6808      	ldr	r0, [r1, #0]
 8007362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007366:	f01e 0f10 	tst.w	lr, #16
 800736a:	bf08      	it	eq
 800736c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007370:	f380 8809 	msr	PSP, r0
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst>:
 8007380:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
        __asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	607b      	str	r3, [r7, #4]
    }
 80073a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80073a2:	f7fe fc1d 	bl	8005be0 <xTaskIncrementTick>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <SysTick_Handler+0x40>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f383 8811 	msr	BASEPRI, r3
    }
 80073be:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <vPortSetupTimerInterrupt+0x34>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073d6:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <vPortSetupTimerInterrupt+0x38>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <vPortSetupTimerInterrupt+0x3c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a0a      	ldr	r2, [pc, #40]	; (800740c <vPortSetupTimerInterrupt+0x40>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <vPortSetupTimerInterrupt+0x44>)
 80073ea:	3b01      	subs	r3, #1
 80073ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <vPortSetupTimerInterrupt+0x34>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	e000e010 	.word	0xe000e010
 8007404:	e000e018 	.word	0xe000e018
 8007408:	20000010 	.word	0x20000010
 800740c:	10624dd3 	.word	0x10624dd3
 8007410:	e000e014 	.word	0xe000e014

08007414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007424 <vPortEnableVFP+0x10>
 8007418:	6801      	ldr	r1, [r0, #0]
 800741a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800741e:	6001      	str	r1, [r0, #0]
 8007420:	4770      	bx	lr
 8007422:	0000      	.short	0x0000
 8007424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop

0800742c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007432:	f3ef 8305 	mrs	r3, IPSR
 8007436:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d914      	bls.n	8007468 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800743e:	4a17      	ldr	r2, [pc, #92]	; (800749c <vPortValidateInterruptPriority+0x70>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007448:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <vPortValidateInterruptPriority+0x74>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	7afa      	ldrb	r2, [r7, #11]
 800744e:	429a      	cmp	r2, r3
 8007450:	d20a      	bcs.n	8007468 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	607b      	str	r3, [r7, #4]
    }
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <vPortValidateInterruptPriority+0x78>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007470:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <vPortValidateInterruptPriority+0x7c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d90a      	bls.n	800748e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	603b      	str	r3, [r7, #0]
    }
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <vPortValidateInterruptPriority+0x60>
    }
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	e000e3f0 	.word	0xe000e3f0
 80074a0:	2000036c 	.word	0x2000036c
 80074a4:	e000ed0c 	.word	0xe000ed0c
 80074a8:	20000370 	.word	0x20000370

080074ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80074b8:	f7fe fad8 	bl	8005a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074bc:	4b65      	ldr	r3, [pc, #404]	; (8007654 <pvPortMalloc+0x1a8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074c4:	f000 f934 	bl	8007730 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074c8:	4b63      	ldr	r3, [pc, #396]	; (8007658 <pvPortMalloc+0x1ac>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 80a7 	bne.w	8007624 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02d      	beq.n	8007538 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80074dc:	2208      	movs	r2, #8
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d227      	bcs.n	8007538 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80074e8:	2208      	movs	r2, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d021      	beq.n	800753e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f023 0307 	bic.w	r3, r3, #7
 8007500:	3308      	adds	r3, #8
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d214      	bcs.n	8007532 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	3308      	adds	r3, #8
 8007510:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	2b00      	cmp	r3, #0
 800751a:	d010      	beq.n	800753e <pvPortMalloc+0x92>
        __asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	617b      	str	r3, [r7, #20]
    }
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007536:	e002      	b.n	800753e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	e000      	b.n	8007540 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800753e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d06e      	beq.n	8007624 <pvPortMalloc+0x178>
 8007546:	4b45      	ldr	r3, [pc, #276]	; (800765c <pvPortMalloc+0x1b0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d869      	bhi.n	8007624 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007550:	4b43      	ldr	r3, [pc, #268]	; (8007660 <pvPortMalloc+0x1b4>)
 8007552:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007554:	4b42      	ldr	r3, [pc, #264]	; (8007660 <pvPortMalloc+0x1b4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	e004      	b.n	8007566 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d903      	bls.n	8007578 <pvPortMalloc+0xcc>
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f1      	bne.n	800755c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007578:	4b36      	ldr	r3, [pc, #216]	; (8007654 <pvPortMalloc+0x1a8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757e:	429a      	cmp	r2, r3
 8007580:	d050      	beq.n	8007624 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2208      	movs	r2, #8
 8007588:	4413      	add	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	2308      	movs	r3, #8
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d91f      	bls.n	80075e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <pvPortMalloc+0x120>
        __asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	613b      	str	r3, [r7, #16]
    }
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	1ad2      	subs	r2, r2, r3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075de:	69b8      	ldr	r0, [r7, #24]
 80075e0:	f000 f908 	bl	80077f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <pvPortMalloc+0x1b0>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1b      	ldr	r2, [pc, #108]	; (800765c <pvPortMalloc+0x1b0>)
 80075f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075f2:	4b1a      	ldr	r3, [pc, #104]	; (800765c <pvPortMalloc+0x1b0>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <pvPortMalloc+0x1b8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d203      	bcs.n	8007606 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <pvPortMalloc+0x1b0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <pvPortMalloc+0x1b8>)
 8007604:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <pvPortMalloc+0x1ac>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	431a      	orrs	r2, r3
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800761a:	4b13      	ldr	r3, [pc, #76]	; (8007668 <pvPortMalloc+0x1bc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <pvPortMalloc+0x1bc>)
 8007622:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007624:	f7fe fa30 	bl	8005a88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <pvPortMalloc+0x19c>
        __asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60fb      	str	r3, [r7, #12]
    }
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <pvPortMalloc+0x19a>
    return pvReturn;
 8007648:	69fb      	ldr	r3, [r7, #28]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3728      	adds	r7, #40	; 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	2001937c 	.word	0x2001937c
 8007658:	20019390 	.word	0x20019390
 800765c:	20019380 	.word	0x20019380
 8007660:	20019374 	.word	0x20019374
 8007664:	20019384 	.word	0x20019384
 8007668:	20019388 	.word	0x20019388

0800766c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04d      	beq.n	800771a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800767e:	2308      	movs	r3, #8
 8007680:	425b      	negs	r3, r3
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	4b24      	ldr	r3, [pc, #144]	; (8007724 <vPortFree+0xb8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <vPortFree+0x44>
        __asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60fb      	str	r3, [r7, #12]
    }
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <vPortFree+0x62>
        __asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60bb      	str	r3, [r7, #8]
    }
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <vPortFree+0xb8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4013      	ands	r3, r2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01e      	beq.n	800771a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d11a      	bne.n	800771a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <vPortFree+0xb8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	43db      	mvns	r3, r3
 80076ee:	401a      	ands	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80076f4:	f7fe f9ba 	bl	8005a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <vPortFree+0xbc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4413      	add	r3, r2
 8007702:	4a09      	ldr	r2, [pc, #36]	; (8007728 <vPortFree+0xbc>)
 8007704:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007706:	6938      	ldr	r0, [r7, #16]
 8007708:	f000 f874 	bl	80077f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <vPortFree+0xc0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	4a06      	ldr	r2, [pc, #24]	; (800772c <vPortFree+0xc0>)
 8007714:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007716:	f7fe f9b7 	bl	8005a88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800771a:	bf00      	nop
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20019390 	.word	0x20019390
 8007728:	20019380 	.word	0x20019380
 800772c:	2001938c 	.word	0x2001938c

08007730 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007736:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800773a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800773c:	4b27      	ldr	r3, [pc, #156]	; (80077dc <prvHeapInit+0xac>)
 800773e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3307      	adds	r3, #7
 800774e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0307 	bic.w	r3, r3, #7
 8007756:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	4a1f      	ldr	r2, [pc, #124]	; (80077dc <prvHeapInit+0xac>)
 8007760:	4413      	add	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007768:	4a1d      	ldr	r2, [pc, #116]	; (80077e0 <prvHeapInit+0xb0>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800776e:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <prvHeapInit+0xb0>)
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800777c:	2208      	movs	r2, #8
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0307 	bic.w	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <prvHeapInit+0xb4>)
 8007790:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007792:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <prvHeapInit+0xb4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800779a:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <prvHeapInit+0xb4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077b0:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <prvHeapInit+0xb4>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <prvHeapInit+0xb8>)
 80077be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	4a09      	ldr	r2, [pc, #36]	; (80077ec <prvHeapInit+0xbc>)
 80077c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077c8:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <prvHeapInit+0xc0>)
 80077ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077ce:	601a      	str	r2, [r3, #0]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	20000374 	.word	0x20000374
 80077e0:	20019374 	.word	0x20019374
 80077e4:	2001937c 	.word	0x2001937c
 80077e8:	20019384 	.word	0x20019384
 80077ec:	20019380 	.word	0x20019380
 80077f0:	20019390 	.word	0x20019390

080077f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077fc:	4b28      	ldr	r3, [pc, #160]	; (80078a0 <prvInsertBlockIntoFreeList+0xac>)
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e002      	b.n	8007808 <prvInsertBlockIntoFreeList+0x14>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	429a      	cmp	r2, r3
 8007810:	d8f7      	bhi.n	8007802 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d108      	bne.n	8007836 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	441a      	add	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d118      	bne.n	800787c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d00d      	beq.n	8007872 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e008      	b.n	8007884 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e003      	b.n	8007884 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d002      	beq.n	8007892 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007892:	bf00      	nop
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	20019374 	.word	0x20019374
 80078a4:	2001937c 	.word	0x2001937c

080078a8 <__errno>:
 80078a8:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <__errno+0x8>)
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000028 	.word	0x20000028

080078b4 <__libc_init_array>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4d0d      	ldr	r5, [pc, #52]	; (80078ec <__libc_init_array+0x38>)
 80078b8:	4c0d      	ldr	r4, [pc, #52]	; (80078f0 <__libc_init_array+0x3c>)
 80078ba:	1b64      	subs	r4, r4, r5
 80078bc:	10a4      	asrs	r4, r4, #2
 80078be:	2600      	movs	r6, #0
 80078c0:	42a6      	cmp	r6, r4
 80078c2:	d109      	bne.n	80078d8 <__libc_init_array+0x24>
 80078c4:	4d0b      	ldr	r5, [pc, #44]	; (80078f4 <__libc_init_array+0x40>)
 80078c6:	4c0c      	ldr	r4, [pc, #48]	; (80078f8 <__libc_init_array+0x44>)
 80078c8:	f001 f98a 	bl	8008be0 <_init>
 80078cc:	1b64      	subs	r4, r4, r5
 80078ce:	10a4      	asrs	r4, r4, #2
 80078d0:	2600      	movs	r6, #0
 80078d2:	42a6      	cmp	r6, r4
 80078d4:	d105      	bne.n	80078e2 <__libc_init_array+0x2e>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078dc:	4798      	blx	r3
 80078de:	3601      	adds	r6, #1
 80078e0:	e7ee      	b.n	80078c0 <__libc_init_array+0xc>
 80078e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e6:	4798      	blx	r3
 80078e8:	3601      	adds	r6, #1
 80078ea:	e7f2      	b.n	80078d2 <__libc_init_array+0x1e>
 80078ec:	08009094 	.word	0x08009094
 80078f0:	08009094 	.word	0x08009094
 80078f4:	08009094 	.word	0x08009094
 80078f8:	08009098 	.word	0x08009098

080078fc <memcpy>:
 80078fc:	440a      	add	r2, r1
 80078fe:	4291      	cmp	r1, r2
 8007900:	f100 33ff 	add.w	r3, r0, #4294967295
 8007904:	d100      	bne.n	8007908 <memcpy+0xc>
 8007906:	4770      	bx	lr
 8007908:	b510      	push	{r4, lr}
 800790a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800790e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007912:	4291      	cmp	r1, r2
 8007914:	d1f9      	bne.n	800790a <memcpy+0xe>
 8007916:	bd10      	pop	{r4, pc}

08007918 <memset>:
 8007918:	4402      	add	r2, r0
 800791a:	4603      	mov	r3, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	d100      	bne.n	8007922 <memset+0xa>
 8007920:	4770      	bx	lr
 8007922:	f803 1b01 	strb.w	r1, [r3], #1
 8007926:	e7f9      	b.n	800791c <memset+0x4>

08007928 <iprintf>:
 8007928:	b40f      	push	{r0, r1, r2, r3}
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <iprintf+0x2c>)
 800792c:	b513      	push	{r0, r1, r4, lr}
 800792e:	681c      	ldr	r4, [r3, #0]
 8007930:	b124      	cbz	r4, 800793c <iprintf+0x14>
 8007932:	69a3      	ldr	r3, [r4, #24]
 8007934:	b913      	cbnz	r3, 800793c <iprintf+0x14>
 8007936:	4620      	mov	r0, r4
 8007938:	f000 f886 	bl	8007a48 <__sinit>
 800793c:	ab05      	add	r3, sp, #20
 800793e:	9a04      	ldr	r2, [sp, #16]
 8007940:	68a1      	ldr	r1, [r4, #8]
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	4620      	mov	r0, r4
 8007946:	f000 fb39 	bl	8007fbc <_vfiprintf_r>
 800794a:	b002      	add	sp, #8
 800794c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007950:	b004      	add	sp, #16
 8007952:	4770      	bx	lr
 8007954:	20000028 	.word	0x20000028

08007958 <siprintf>:
 8007958:	b40e      	push	{r1, r2, r3}
 800795a:	b500      	push	{lr}
 800795c:	b09c      	sub	sp, #112	; 0x70
 800795e:	ab1d      	add	r3, sp, #116	; 0x74
 8007960:	9002      	str	r0, [sp, #8]
 8007962:	9006      	str	r0, [sp, #24]
 8007964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007968:	4809      	ldr	r0, [pc, #36]	; (8007990 <siprintf+0x38>)
 800796a:	9107      	str	r1, [sp, #28]
 800796c:	9104      	str	r1, [sp, #16]
 800796e:	4909      	ldr	r1, [pc, #36]	; (8007994 <siprintf+0x3c>)
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	9105      	str	r1, [sp, #20]
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	a902      	add	r1, sp, #8
 800797c:	f000 f9f4 	bl	8007d68 <_svfiprintf_r>
 8007980:	9b02      	ldr	r3, [sp, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	b01c      	add	sp, #112	; 0x70
 8007988:	f85d eb04 	ldr.w	lr, [sp], #4
 800798c:	b003      	add	sp, #12
 800798e:	4770      	bx	lr
 8007990:	20000028 	.word	0x20000028
 8007994:	ffff0208 	.word	0xffff0208

08007998 <std>:
 8007998:	2300      	movs	r3, #0
 800799a:	b510      	push	{r4, lr}
 800799c:	4604      	mov	r4, r0
 800799e:	e9c0 3300 	strd	r3, r3, [r0]
 80079a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079a6:	6083      	str	r3, [r0, #8]
 80079a8:	8181      	strh	r1, [r0, #12]
 80079aa:	6643      	str	r3, [r0, #100]	; 0x64
 80079ac:	81c2      	strh	r2, [r0, #14]
 80079ae:	6183      	str	r3, [r0, #24]
 80079b0:	4619      	mov	r1, r3
 80079b2:	2208      	movs	r2, #8
 80079b4:	305c      	adds	r0, #92	; 0x5c
 80079b6:	f7ff ffaf 	bl	8007918 <memset>
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <std+0x38>)
 80079bc:	6263      	str	r3, [r4, #36]	; 0x24
 80079be:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <std+0x3c>)
 80079c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <std+0x40>)
 80079c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <std+0x44>)
 80079c8:	6224      	str	r4, [r4, #32]
 80079ca:	6323      	str	r3, [r4, #48]	; 0x30
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	08008565 	.word	0x08008565
 80079d4:	08008587 	.word	0x08008587
 80079d8:	080085bf 	.word	0x080085bf
 80079dc:	080085e3 	.word	0x080085e3

080079e0 <_cleanup_r>:
 80079e0:	4901      	ldr	r1, [pc, #4]	; (80079e8 <_cleanup_r+0x8>)
 80079e2:	f000 b8af 	b.w	8007b44 <_fwalk_reent>
 80079e6:	bf00      	nop
 80079e8:	080088bd 	.word	0x080088bd

080079ec <__sfmoreglue>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	2268      	movs	r2, #104	; 0x68
 80079f0:	1e4d      	subs	r5, r1, #1
 80079f2:	4355      	muls	r5, r2
 80079f4:	460e      	mov	r6, r1
 80079f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079fa:	f000 f8e5 	bl	8007bc8 <_malloc_r>
 80079fe:	4604      	mov	r4, r0
 8007a00:	b140      	cbz	r0, 8007a14 <__sfmoreglue+0x28>
 8007a02:	2100      	movs	r1, #0
 8007a04:	e9c0 1600 	strd	r1, r6, [r0]
 8007a08:	300c      	adds	r0, #12
 8007a0a:	60a0      	str	r0, [r4, #8]
 8007a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a10:	f7ff ff82 	bl	8007918 <memset>
 8007a14:	4620      	mov	r0, r4
 8007a16:	bd70      	pop	{r4, r5, r6, pc}

08007a18 <__sfp_lock_acquire>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__sfp_lock_acquire+0x8>)
 8007a1a:	f000 b8b3 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	20019395 	.word	0x20019395

08007a24 <__sfp_lock_release>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_release+0x8>)
 8007a26:	f000 b8ae 	b.w	8007b86 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20019395 	.word	0x20019395

08007a30 <__sinit_lock_acquire>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sinit_lock_acquire+0x8>)
 8007a32:	f000 b8a7 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	20019396 	.word	0x20019396

08007a3c <__sinit_lock_release>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sinit_lock_release+0x8>)
 8007a3e:	f000 b8a2 	b.w	8007b86 <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	20019396 	.word	0x20019396

08007a48 <__sinit>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	f7ff fff0 	bl	8007a30 <__sinit_lock_acquire>
 8007a50:	69a3      	ldr	r3, [r4, #24]
 8007a52:	b11b      	cbz	r3, 8007a5c <__sinit+0x14>
 8007a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a58:	f7ff bff0 	b.w	8007a3c <__sinit_lock_release>
 8007a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a60:	6523      	str	r3, [r4, #80]	; 0x50
 8007a62:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <__sinit+0x68>)
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <__sinit+0x6c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	bf04      	itt	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	61a3      	streq	r3, [r4, #24]
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f820 	bl	8007ab8 <__sfp>
 8007a78:	6060      	str	r0, [r4, #4]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f81c 	bl	8007ab8 <__sfp>
 8007a80:	60a0      	str	r0, [r4, #8]
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f818 	bl	8007ab8 <__sfp>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60e0      	str	r0, [r4, #12]
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	6860      	ldr	r0, [r4, #4]
 8007a90:	f7ff ff82 	bl	8007998 <std>
 8007a94:	68a0      	ldr	r0, [r4, #8]
 8007a96:	2201      	movs	r2, #1
 8007a98:	2109      	movs	r1, #9
 8007a9a:	f7ff ff7d 	bl	8007998 <std>
 8007a9e:	68e0      	ldr	r0, [r4, #12]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	2112      	movs	r1, #18
 8007aa4:	f7ff ff78 	bl	8007998 <std>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	61a3      	str	r3, [r4, #24]
 8007aac:	e7d2      	b.n	8007a54 <__sinit+0xc>
 8007aae:	bf00      	nop
 8007ab0:	08008ff4 	.word	0x08008ff4
 8007ab4:	080079e1 	.word	0x080079e1

08007ab8 <__sfp>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	4607      	mov	r7, r0
 8007abc:	f7ff ffac 	bl	8007a18 <__sfp_lock_acquire>
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <__sfp+0x84>)
 8007ac2:	681e      	ldr	r6, [r3, #0]
 8007ac4:	69b3      	ldr	r3, [r6, #24]
 8007ac6:	b913      	cbnz	r3, 8007ace <__sfp+0x16>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff ffbd 	bl	8007a48 <__sinit>
 8007ace:	3648      	adds	r6, #72	; 0x48
 8007ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	d503      	bpl.n	8007ae0 <__sfp+0x28>
 8007ad8:	6833      	ldr	r3, [r6, #0]
 8007ada:	b30b      	cbz	r3, 8007b20 <__sfp+0x68>
 8007adc:	6836      	ldr	r6, [r6, #0]
 8007ade:	e7f7      	b.n	8007ad0 <__sfp+0x18>
 8007ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ae4:	b9d5      	cbnz	r5, 8007b1c <__sfp+0x64>
 8007ae6:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <__sfp+0x88>)
 8007ae8:	60e3      	str	r3, [r4, #12]
 8007aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007aee:	6665      	str	r5, [r4, #100]	; 0x64
 8007af0:	f000 f847 	bl	8007b82 <__retarget_lock_init_recursive>
 8007af4:	f7ff ff96 	bl	8007a24 <__sfp_lock_release>
 8007af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b00:	6025      	str	r5, [r4, #0]
 8007b02:	61a5      	str	r5, [r4, #24]
 8007b04:	2208      	movs	r2, #8
 8007b06:	4629      	mov	r1, r5
 8007b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b0c:	f7ff ff04 	bl	8007918 <memset>
 8007b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b18:	4620      	mov	r0, r4
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	3468      	adds	r4, #104	; 0x68
 8007b1e:	e7d9      	b.n	8007ad4 <__sfp+0x1c>
 8007b20:	2104      	movs	r1, #4
 8007b22:	4638      	mov	r0, r7
 8007b24:	f7ff ff62 	bl	80079ec <__sfmoreglue>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	6030      	str	r0, [r6, #0]
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1d5      	bne.n	8007adc <__sfp+0x24>
 8007b30:	f7ff ff78 	bl	8007a24 <__sfp_lock_release>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	e7ee      	b.n	8007b18 <__sfp+0x60>
 8007b3a:	bf00      	nop
 8007b3c:	08008ff4 	.word	0x08008ff4
 8007b40:	ffff0001 	.word	0xffff0001

08007b44 <_fwalk_reent>:
 8007b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4606      	mov	r6, r0
 8007b4a:	4688      	mov	r8, r1
 8007b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b50:	2700      	movs	r7, #0
 8007b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b56:	f1b9 0901 	subs.w	r9, r9, #1
 8007b5a:	d505      	bpl.n	8007b68 <_fwalk_reent+0x24>
 8007b5c:	6824      	ldr	r4, [r4, #0]
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	d1f7      	bne.n	8007b52 <_fwalk_reent+0xe>
 8007b62:	4638      	mov	r0, r7
 8007b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b68:	89ab      	ldrh	r3, [r5, #12]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d907      	bls.n	8007b7e <_fwalk_reent+0x3a>
 8007b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b72:	3301      	adds	r3, #1
 8007b74:	d003      	beq.n	8007b7e <_fwalk_reent+0x3a>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4630      	mov	r0, r6
 8007b7a:	47c0      	blx	r8
 8007b7c:	4307      	orrs	r7, r0
 8007b7e:	3568      	adds	r5, #104	; 0x68
 8007b80:	e7e9      	b.n	8007b56 <_fwalk_reent+0x12>

08007b82 <__retarget_lock_init_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <__retarget_lock_acquire_recursive>:
 8007b84:	4770      	bx	lr

08007b86 <__retarget_lock_release_recursive>:
 8007b86:	4770      	bx	lr

08007b88 <sbrk_aligned>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4e0e      	ldr	r6, [pc, #56]	; (8007bc4 <sbrk_aligned+0x3c>)
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	6831      	ldr	r1, [r6, #0]
 8007b90:	4605      	mov	r5, r0
 8007b92:	b911      	cbnz	r1, 8007b9a <sbrk_aligned+0x12>
 8007b94:	f000 fcd6 	bl	8008544 <_sbrk_r>
 8007b98:	6030      	str	r0, [r6, #0]
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 fcd1 	bl	8008544 <_sbrk_r>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d00a      	beq.n	8007bbc <sbrk_aligned+0x34>
 8007ba6:	1cc4      	adds	r4, r0, #3
 8007ba8:	f024 0403 	bic.w	r4, r4, #3
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d007      	beq.n	8007bc0 <sbrk_aligned+0x38>
 8007bb0:	1a21      	subs	r1, r4, r0
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 fcc6 	bl	8008544 <_sbrk_r>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d101      	bne.n	8007bc0 <sbrk_aligned+0x38>
 8007bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	2001939c 	.word	0x2001939c

08007bc8 <_malloc_r>:
 8007bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bcc:	1ccd      	adds	r5, r1, #3
 8007bce:	f025 0503 	bic.w	r5, r5, #3
 8007bd2:	3508      	adds	r5, #8
 8007bd4:	2d0c      	cmp	r5, #12
 8007bd6:	bf38      	it	cc
 8007bd8:	250c      	movcc	r5, #12
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	4607      	mov	r7, r0
 8007bde:	db01      	blt.n	8007be4 <_malloc_r+0x1c>
 8007be0:	42a9      	cmp	r1, r5
 8007be2:	d905      	bls.n	8007bf0 <_malloc_r+0x28>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	2600      	movs	r6, #0
 8007bea:	4630      	mov	r0, r6
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	4e2e      	ldr	r6, [pc, #184]	; (8007cac <_malloc_r+0xe4>)
 8007bf2:	f000 ff31 	bl	8008a58 <__malloc_lock>
 8007bf6:	6833      	ldr	r3, [r6, #0]
 8007bf8:	461c      	mov	r4, r3
 8007bfa:	bb34      	cbnz	r4, 8007c4a <_malloc_r+0x82>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f7ff ffc2 	bl	8007b88 <sbrk_aligned>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	4604      	mov	r4, r0
 8007c08:	d14d      	bne.n	8007ca6 <_malloc_r+0xde>
 8007c0a:	6834      	ldr	r4, [r6, #0]
 8007c0c:	4626      	mov	r6, r4
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	d140      	bne.n	8007c94 <_malloc_r+0xcc>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	4631      	mov	r1, r6
 8007c16:	4638      	mov	r0, r7
 8007c18:	eb04 0803 	add.w	r8, r4, r3
 8007c1c:	f000 fc92 	bl	8008544 <_sbrk_r>
 8007c20:	4580      	cmp	r8, r0
 8007c22:	d13a      	bne.n	8007c9a <_malloc_r+0xd2>
 8007c24:	6821      	ldr	r1, [r4, #0]
 8007c26:	3503      	adds	r5, #3
 8007c28:	1a6d      	subs	r5, r5, r1
 8007c2a:	f025 0503 	bic.w	r5, r5, #3
 8007c2e:	3508      	adds	r5, #8
 8007c30:	2d0c      	cmp	r5, #12
 8007c32:	bf38      	it	cc
 8007c34:	250c      	movcc	r5, #12
 8007c36:	4629      	mov	r1, r5
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff ffa5 	bl	8007b88 <sbrk_aligned>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d02b      	beq.n	8007c9a <_malloc_r+0xd2>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	442b      	add	r3, r5
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	e00e      	b.n	8007c68 <_malloc_r+0xa0>
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	1b52      	subs	r2, r2, r5
 8007c4e:	d41e      	bmi.n	8007c8e <_malloc_r+0xc6>
 8007c50:	2a0b      	cmp	r2, #11
 8007c52:	d916      	bls.n	8007c82 <_malloc_r+0xba>
 8007c54:	1961      	adds	r1, r4, r5
 8007c56:	42a3      	cmp	r3, r4
 8007c58:	6025      	str	r5, [r4, #0]
 8007c5a:	bf18      	it	ne
 8007c5c:	6059      	strne	r1, [r3, #4]
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	bf08      	it	eq
 8007c62:	6031      	streq	r1, [r6, #0]
 8007c64:	5162      	str	r2, [r4, r5]
 8007c66:	604b      	str	r3, [r1, #4]
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f104 060b 	add.w	r6, r4, #11
 8007c6e:	f000 fef9 	bl	8008a64 <__malloc_unlock>
 8007c72:	f026 0607 	bic.w	r6, r6, #7
 8007c76:	1d23      	adds	r3, r4, #4
 8007c78:	1af2      	subs	r2, r6, r3
 8007c7a:	d0b6      	beq.n	8007bea <_malloc_r+0x22>
 8007c7c:	1b9b      	subs	r3, r3, r6
 8007c7e:	50a3      	str	r3, [r4, r2]
 8007c80:	e7b3      	b.n	8007bea <_malloc_r+0x22>
 8007c82:	6862      	ldr	r2, [r4, #4]
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	bf0c      	ite	eq
 8007c88:	6032      	streq	r2, [r6, #0]
 8007c8a:	605a      	strne	r2, [r3, #4]
 8007c8c:	e7ec      	b.n	8007c68 <_malloc_r+0xa0>
 8007c8e:	4623      	mov	r3, r4
 8007c90:	6864      	ldr	r4, [r4, #4]
 8007c92:	e7b2      	b.n	8007bfa <_malloc_r+0x32>
 8007c94:	4634      	mov	r4, r6
 8007c96:	6876      	ldr	r6, [r6, #4]
 8007c98:	e7b9      	b.n	8007c0e <_malloc_r+0x46>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f000 fee0 	bl	8008a64 <__malloc_unlock>
 8007ca4:	e7a1      	b.n	8007bea <_malloc_r+0x22>
 8007ca6:	6025      	str	r5, [r4, #0]
 8007ca8:	e7de      	b.n	8007c68 <_malloc_r+0xa0>
 8007caa:	bf00      	nop
 8007cac:	20019398 	.word	0x20019398

08007cb0 <__ssputs_r>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	688e      	ldr	r6, [r1, #8]
 8007cb6:	429e      	cmp	r6, r3
 8007cb8:	4682      	mov	sl, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4690      	mov	r8, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	d838      	bhi.n	8007d34 <__ssputs_r+0x84>
 8007cc2:	898a      	ldrh	r2, [r1, #12]
 8007cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cc8:	d032      	beq.n	8007d30 <__ssputs_r+0x80>
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	6909      	ldr	r1, [r1, #16]
 8007cce:	eba5 0901 	sub.w	r9, r5, r1
 8007cd2:	6965      	ldr	r5, [r4, #20]
 8007cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cdc:	3301      	adds	r3, #1
 8007cde:	444b      	add	r3, r9
 8007ce0:	106d      	asrs	r5, r5, #1
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	bf38      	it	cc
 8007ce6:	461d      	movcc	r5, r3
 8007ce8:	0553      	lsls	r3, r2, #21
 8007cea:	d531      	bpl.n	8007d50 <__ssputs_r+0xa0>
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7ff ff6b 	bl	8007bc8 <_malloc_r>
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	b950      	cbnz	r0, 8007d0c <__ssputs_r+0x5c>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	f8ca 3000 	str.w	r3, [sl]
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0c:	6921      	ldr	r1, [r4, #16]
 8007d0e:	464a      	mov	r2, r9
 8007d10:	f7ff fdf4 	bl	80078fc <memcpy>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	6126      	str	r6, [r4, #16]
 8007d22:	6165      	str	r5, [r4, #20]
 8007d24:	444e      	add	r6, r9
 8007d26:	eba5 0509 	sub.w	r5, r5, r9
 8007d2a:	6026      	str	r6, [r4, #0]
 8007d2c:	60a5      	str	r5, [r4, #8]
 8007d2e:	463e      	mov	r6, r7
 8007d30:	42be      	cmp	r6, r7
 8007d32:	d900      	bls.n	8007d36 <__ssputs_r+0x86>
 8007d34:	463e      	mov	r6, r7
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	4632      	mov	r2, r6
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	f000 fe72 	bl	8008a24 <memmove>
 8007d40:	68a3      	ldr	r3, [r4, #8]
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	60a3      	str	r3, [r4, #8]
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	4433      	add	r3, r6
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7db      	b.n	8007d08 <__ssputs_r+0x58>
 8007d50:	462a      	mov	r2, r5
 8007d52:	f000 fed9 	bl	8008b08 <_realloc_r>
 8007d56:	4606      	mov	r6, r0
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1e1      	bne.n	8007d20 <__ssputs_r+0x70>
 8007d5c:	6921      	ldr	r1, [r4, #16]
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f000 fe86 	bl	8008a70 <_free_r>
 8007d64:	e7c7      	b.n	8007cf6 <__ssputs_r+0x46>
	...

08007d68 <_svfiprintf_r>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	4698      	mov	r8, r3
 8007d6e:	898b      	ldrh	r3, [r1, #12]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	b09d      	sub	sp, #116	; 0x74
 8007d74:	4607      	mov	r7, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	4614      	mov	r4, r2
 8007d7a:	d50e      	bpl.n	8007d9a <_svfiprintf_r+0x32>
 8007d7c:	690b      	ldr	r3, [r1, #16]
 8007d7e:	b963      	cbnz	r3, 8007d9a <_svfiprintf_r+0x32>
 8007d80:	2140      	movs	r1, #64	; 0x40
 8007d82:	f7ff ff21 	bl	8007bc8 <_malloc_r>
 8007d86:	6028      	str	r0, [r5, #0]
 8007d88:	6128      	str	r0, [r5, #16]
 8007d8a:	b920      	cbnz	r0, 8007d96 <_svfiprintf_r+0x2e>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e0d1      	b.n	8007f3a <_svfiprintf_r+0x1d2>
 8007d96:	2340      	movs	r3, #64	; 0x40
 8007d98:	616b      	str	r3, [r5, #20]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9e:	2320      	movs	r3, #32
 8007da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da8:	2330      	movs	r3, #48	; 0x30
 8007daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f54 <_svfiprintf_r+0x1ec>
 8007dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007db2:	f04f 0901 	mov.w	r9, #1
 8007db6:	4623      	mov	r3, r4
 8007db8:	469a      	mov	sl, r3
 8007dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dbe:	b10a      	cbz	r2, 8007dc4 <_svfiprintf_r+0x5c>
 8007dc0:	2a25      	cmp	r2, #37	; 0x25
 8007dc2:	d1f9      	bne.n	8007db8 <_svfiprintf_r+0x50>
 8007dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc8:	d00b      	beq.n	8007de2 <_svfiprintf_r+0x7a>
 8007dca:	465b      	mov	r3, fp
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ff6d 	bl	8007cb0 <__ssputs_r>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f000 80aa 	beq.w	8007f30 <_svfiprintf_r+0x1c8>
 8007ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dde:	445a      	add	r2, fp
 8007de0:	9209      	str	r2, [sp, #36]	; 0x24
 8007de2:	f89a 3000 	ldrb.w	r3, [sl]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80a2 	beq.w	8007f30 <_svfiprintf_r+0x1c8>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df6:	f10a 0a01 	add.w	sl, sl, #1
 8007dfa:	9304      	str	r3, [sp, #16]
 8007dfc:	9307      	str	r3, [sp, #28]
 8007dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e02:	931a      	str	r3, [sp, #104]	; 0x68
 8007e04:	4654      	mov	r4, sl
 8007e06:	2205      	movs	r2, #5
 8007e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e0c:	4851      	ldr	r0, [pc, #324]	; (8007f54 <_svfiprintf_r+0x1ec>)
 8007e0e:	f7f8 f9f7 	bl	8000200 <memchr>
 8007e12:	9a04      	ldr	r2, [sp, #16]
 8007e14:	b9d8      	cbnz	r0, 8007e4e <_svfiprintf_r+0xe6>
 8007e16:	06d0      	lsls	r0, r2, #27
 8007e18:	bf44      	itt	mi
 8007e1a:	2320      	movmi	r3, #32
 8007e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e20:	0711      	lsls	r1, r2, #28
 8007e22:	bf44      	itt	mi
 8007e24:	232b      	movmi	r3, #43	; 0x2b
 8007e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e30:	d015      	beq.n	8007e5e <_svfiprintf_r+0xf6>
 8007e32:	9a07      	ldr	r2, [sp, #28]
 8007e34:	4654      	mov	r4, sl
 8007e36:	2000      	movs	r0, #0
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e42:	3b30      	subs	r3, #48	; 0x30
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d94e      	bls.n	8007ee6 <_svfiprintf_r+0x17e>
 8007e48:	b1b0      	cbz	r0, 8007e78 <_svfiprintf_r+0x110>
 8007e4a:	9207      	str	r2, [sp, #28]
 8007e4c:	e014      	b.n	8007e78 <_svfiprintf_r+0x110>
 8007e4e:	eba0 0308 	sub.w	r3, r0, r8
 8007e52:	fa09 f303 	lsl.w	r3, r9, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	9304      	str	r3, [sp, #16]
 8007e5a:	46a2      	mov	sl, r4
 8007e5c:	e7d2      	b.n	8007e04 <_svfiprintf_r+0x9c>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	1d19      	adds	r1, r3, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	9103      	str	r1, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfbb      	ittet	lt
 8007e6a:	425b      	neglt	r3, r3
 8007e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e70:	9307      	strge	r3, [sp, #28]
 8007e72:	9307      	strlt	r3, [sp, #28]
 8007e74:	bfb8      	it	lt
 8007e76:	9204      	strlt	r2, [sp, #16]
 8007e78:	7823      	ldrb	r3, [r4, #0]
 8007e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e7c:	d10c      	bne.n	8007e98 <_svfiprintf_r+0x130>
 8007e7e:	7863      	ldrb	r3, [r4, #1]
 8007e80:	2b2a      	cmp	r3, #42	; 0x2a
 8007e82:	d135      	bne.n	8007ef0 <_svfiprintf_r+0x188>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	1d1a      	adds	r2, r3, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	9203      	str	r2, [sp, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bfb8      	it	lt
 8007e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e94:	3402      	adds	r4, #2
 8007e96:	9305      	str	r3, [sp, #20]
 8007e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f64 <_svfiprintf_r+0x1fc>
 8007e9c:	7821      	ldrb	r1, [r4, #0]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	f7f8 f9ad 	bl	8000200 <memchr>
 8007ea6:	b140      	cbz	r0, 8007eba <_svfiprintf_r+0x152>
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	eba0 000a 	sub.w	r0, r0, sl
 8007eae:	fa03 f000 	lsl.w	r0, r3, r0
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	4303      	orrs	r3, r0
 8007eb6:	3401      	adds	r4, #1
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebe:	4826      	ldr	r0, [pc, #152]	; (8007f58 <_svfiprintf_r+0x1f0>)
 8007ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ec4:	2206      	movs	r2, #6
 8007ec6:	f7f8 f99b 	bl	8000200 <memchr>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d038      	beq.n	8007f40 <_svfiprintf_r+0x1d8>
 8007ece:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <_svfiprintf_r+0x1f4>)
 8007ed0:	bb1b      	cbnz	r3, 8007f1a <_svfiprintf_r+0x1b2>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	f023 0307 	bic.w	r3, r3, #7
 8007eda:	3308      	adds	r3, #8
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	4433      	add	r3, r6
 8007ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee4:	e767      	b.n	8007db6 <_svfiprintf_r+0x4e>
 8007ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eea:	460c      	mov	r4, r1
 8007eec:	2001      	movs	r0, #1
 8007eee:	e7a5      	b.n	8007e3c <_svfiprintf_r+0xd4>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f04f 0c0a 	mov.w	ip, #10
 8007efc:	4620      	mov	r0, r4
 8007efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f02:	3a30      	subs	r2, #48	; 0x30
 8007f04:	2a09      	cmp	r2, #9
 8007f06:	d903      	bls.n	8007f10 <_svfiprintf_r+0x1a8>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0c5      	beq.n	8007e98 <_svfiprintf_r+0x130>
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	e7c3      	b.n	8007e98 <_svfiprintf_r+0x130>
 8007f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f14:	4604      	mov	r4, r0
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7f0      	b.n	8007efc <_svfiprintf_r+0x194>
 8007f1a:	ab03      	add	r3, sp, #12
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <_svfiprintf_r+0x1f8>)
 8007f22:	a904      	add	r1, sp, #16
 8007f24:	4638      	mov	r0, r7
 8007f26:	f3af 8000 	nop.w
 8007f2a:	1c42      	adds	r2, r0, #1
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	d1d6      	bne.n	8007ede <_svfiprintf_r+0x176>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	065b      	lsls	r3, r3, #25
 8007f34:	f53f af2c 	bmi.w	8007d90 <_svfiprintf_r+0x28>
 8007f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3a:	b01d      	add	sp, #116	; 0x74
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <_svfiprintf_r+0x1f8>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f000 f9d4 	bl	80082f8 <_printf_i>
 8007f50:	e7eb      	b.n	8007f2a <_svfiprintf_r+0x1c2>
 8007f52:	bf00      	nop
 8007f54:	08009058 	.word	0x08009058
 8007f58:	08009062 	.word	0x08009062
 8007f5c:	00000000 	.word	0x00000000
 8007f60:	08007cb1 	.word	0x08007cb1
 8007f64:	0800905e 	.word	0x0800905e

08007f68 <__sfputc_r>:
 8007f68:	6893      	ldr	r3, [r2, #8]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	b410      	push	{r4}
 8007f70:	6093      	str	r3, [r2, #8]
 8007f72:	da08      	bge.n	8007f86 <__sfputc_r+0x1e>
 8007f74:	6994      	ldr	r4, [r2, #24]
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	db01      	blt.n	8007f7e <__sfputc_r+0x16>
 8007f7a:	290a      	cmp	r1, #10
 8007f7c:	d103      	bne.n	8007f86 <__sfputc_r+0x1e>
 8007f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f82:	f000 bb33 	b.w	80085ec <__swbuf_r>
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	1c58      	adds	r0, r3, #1
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	7019      	strb	r1, [r3, #0]
 8007f8e:	4608      	mov	r0, r1
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <__sfputs_r>:
 8007f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	18d5      	adds	r5, r2, r3
 8007fa0:	42ac      	cmp	r4, r5
 8007fa2:	d101      	bne.n	8007fa8 <__sfputs_r+0x12>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e007      	b.n	8007fb8 <__sfputs_r+0x22>
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	463a      	mov	r2, r7
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ffda 	bl	8007f68 <__sfputc_r>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d1f3      	bne.n	8007fa0 <__sfputs_r+0xa>
 8007fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fbc <_vfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	460d      	mov	r5, r1
 8007fc2:	b09d      	sub	sp, #116	; 0x74
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	4698      	mov	r8, r3
 8007fc8:	4606      	mov	r6, r0
 8007fca:	b118      	cbz	r0, 8007fd4 <_vfiprintf_r+0x18>
 8007fcc:	6983      	ldr	r3, [r0, #24]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <_vfiprintf_r+0x18>
 8007fd0:	f7ff fd3a 	bl	8007a48 <__sinit>
 8007fd4:	4b89      	ldr	r3, [pc, #548]	; (80081fc <_vfiprintf_r+0x240>)
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	d11b      	bne.n	8008012 <_vfiprintf_r+0x56>
 8007fda:	6875      	ldr	r5, [r6, #4]
 8007fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_vfiprintf_r+0x32>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_vfiprintf_r+0x32>
 8007fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fea:	f7ff fdcb 	bl	8007b84 <__retarget_lock_acquire_recursive>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	071b      	lsls	r3, r3, #28
 8007ff2:	d501      	bpl.n	8007ff8 <_vfiprintf_r+0x3c>
 8007ff4:	692b      	ldr	r3, [r5, #16]
 8007ff6:	b9eb      	cbnz	r3, 8008034 <_vfiprintf_r+0x78>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 fb5a 	bl	80086b4 <__swsetup_r>
 8008000:	b1c0      	cbz	r0, 8008034 <_vfiprintf_r+0x78>
 8008002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008004:	07dc      	lsls	r4, r3, #31
 8008006:	d50e      	bpl.n	8008026 <_vfiprintf_r+0x6a>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b01d      	add	sp, #116	; 0x74
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	4b7b      	ldr	r3, [pc, #492]	; (8008200 <_vfiprintf_r+0x244>)
 8008014:	429d      	cmp	r5, r3
 8008016:	d101      	bne.n	800801c <_vfiprintf_r+0x60>
 8008018:	68b5      	ldr	r5, [r6, #8]
 800801a:	e7df      	b.n	8007fdc <_vfiprintf_r+0x20>
 800801c:	4b79      	ldr	r3, [pc, #484]	; (8008204 <_vfiprintf_r+0x248>)
 800801e:	429d      	cmp	r5, r3
 8008020:	bf08      	it	eq
 8008022:	68f5      	ldreq	r5, [r6, #12]
 8008024:	e7da      	b.n	8007fdc <_vfiprintf_r+0x20>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d4ed      	bmi.n	8008008 <_vfiprintf_r+0x4c>
 800802c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802e:	f7ff fdaa 	bl	8007b86 <__retarget_lock_release_recursive>
 8008032:	e7e9      	b.n	8008008 <_vfiprintf_r+0x4c>
 8008034:	2300      	movs	r3, #0
 8008036:	9309      	str	r3, [sp, #36]	; 0x24
 8008038:	2320      	movs	r3, #32
 800803a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800803e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008042:	2330      	movs	r3, #48	; 0x30
 8008044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008208 <_vfiprintf_r+0x24c>
 8008048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800804c:	f04f 0901 	mov.w	r9, #1
 8008050:	4623      	mov	r3, r4
 8008052:	469a      	mov	sl, r3
 8008054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008058:	b10a      	cbz	r2, 800805e <_vfiprintf_r+0xa2>
 800805a:	2a25      	cmp	r2, #37	; 0x25
 800805c:	d1f9      	bne.n	8008052 <_vfiprintf_r+0x96>
 800805e:	ebba 0b04 	subs.w	fp, sl, r4
 8008062:	d00b      	beq.n	800807c <_vfiprintf_r+0xc0>
 8008064:	465b      	mov	r3, fp
 8008066:	4622      	mov	r2, r4
 8008068:	4629      	mov	r1, r5
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ff93 	bl	8007f96 <__sfputs_r>
 8008070:	3001      	adds	r0, #1
 8008072:	f000 80aa 	beq.w	80081ca <_vfiprintf_r+0x20e>
 8008076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008078:	445a      	add	r2, fp
 800807a:	9209      	str	r2, [sp, #36]	; 0x24
 800807c:	f89a 3000 	ldrb.w	r3, [sl]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80a2 	beq.w	80081ca <_vfiprintf_r+0x20e>
 8008086:	2300      	movs	r3, #0
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008090:	f10a 0a01 	add.w	sl, sl, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800809c:	931a      	str	r3, [sp, #104]	; 0x68
 800809e:	4654      	mov	r4, sl
 80080a0:	2205      	movs	r2, #5
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	4858      	ldr	r0, [pc, #352]	; (8008208 <_vfiprintf_r+0x24c>)
 80080a8:	f7f8 f8aa 	bl	8000200 <memchr>
 80080ac:	9a04      	ldr	r2, [sp, #16]
 80080ae:	b9d8      	cbnz	r0, 80080e8 <_vfiprintf_r+0x12c>
 80080b0:	06d1      	lsls	r1, r2, #27
 80080b2:	bf44      	itt	mi
 80080b4:	2320      	movmi	r3, #32
 80080b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ba:	0713      	lsls	r3, r2, #28
 80080bc:	bf44      	itt	mi
 80080be:	232b      	movmi	r3, #43	; 0x2b
 80080c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c4:	f89a 3000 	ldrb.w	r3, [sl]
 80080c8:	2b2a      	cmp	r3, #42	; 0x2a
 80080ca:	d015      	beq.n	80080f8 <_vfiprintf_r+0x13c>
 80080cc:	9a07      	ldr	r2, [sp, #28]
 80080ce:	4654      	mov	r4, sl
 80080d0:	2000      	movs	r0, #0
 80080d2:	f04f 0c0a 	mov.w	ip, #10
 80080d6:	4621      	mov	r1, r4
 80080d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080dc:	3b30      	subs	r3, #48	; 0x30
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d94e      	bls.n	8008180 <_vfiprintf_r+0x1c4>
 80080e2:	b1b0      	cbz	r0, 8008112 <_vfiprintf_r+0x156>
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	e014      	b.n	8008112 <_vfiprintf_r+0x156>
 80080e8:	eba0 0308 	sub.w	r3, r0, r8
 80080ec:	fa09 f303 	lsl.w	r3, r9, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	46a2      	mov	sl, r4
 80080f6:	e7d2      	b.n	800809e <_vfiprintf_r+0xe2>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d19      	adds	r1, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9103      	str	r1, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbb      	ittet	lt
 8008104:	425b      	neglt	r3, r3
 8008106:	f042 0202 	orrlt.w	r2, r2, #2
 800810a:	9307      	strge	r3, [sp, #28]
 800810c:	9307      	strlt	r3, [sp, #28]
 800810e:	bfb8      	it	lt
 8008110:	9204      	strlt	r2, [sp, #16]
 8008112:	7823      	ldrb	r3, [r4, #0]
 8008114:	2b2e      	cmp	r3, #46	; 0x2e
 8008116:	d10c      	bne.n	8008132 <_vfiprintf_r+0x176>
 8008118:	7863      	ldrb	r3, [r4, #1]
 800811a:	2b2a      	cmp	r3, #42	; 0x2a
 800811c:	d135      	bne.n	800818a <_vfiprintf_r+0x1ce>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	9203      	str	r2, [sp, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	bfb8      	it	lt
 800812a:	f04f 33ff 	movlt.w	r3, #4294967295
 800812e:	3402      	adds	r4, #2
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008218 <_vfiprintf_r+0x25c>
 8008136:	7821      	ldrb	r1, [r4, #0]
 8008138:	2203      	movs	r2, #3
 800813a:	4650      	mov	r0, sl
 800813c:	f7f8 f860 	bl	8000200 <memchr>
 8008140:	b140      	cbz	r0, 8008154 <_vfiprintf_r+0x198>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	eba0 000a 	sub.w	r0, r0, sl
 8008148:	fa03 f000 	lsl.w	r0, r3, r0
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	4303      	orrs	r3, r0
 8008150:	3401      	adds	r4, #1
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008158:	482c      	ldr	r0, [pc, #176]	; (800820c <_vfiprintf_r+0x250>)
 800815a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800815e:	2206      	movs	r2, #6
 8008160:	f7f8 f84e 	bl	8000200 <memchr>
 8008164:	2800      	cmp	r0, #0
 8008166:	d03f      	beq.n	80081e8 <_vfiprintf_r+0x22c>
 8008168:	4b29      	ldr	r3, [pc, #164]	; (8008210 <_vfiprintf_r+0x254>)
 800816a:	bb1b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x1f8>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	3307      	adds	r3, #7
 8008170:	f023 0307 	bic.w	r3, r3, #7
 8008174:	3308      	adds	r3, #8
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	443b      	add	r3, r7
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	e767      	b.n	8008050 <_vfiprintf_r+0x94>
 8008180:	fb0c 3202 	mla	r2, ip, r2, r3
 8008184:	460c      	mov	r4, r1
 8008186:	2001      	movs	r0, #1
 8008188:	e7a5      	b.n	80080d6 <_vfiprintf_r+0x11a>
 800818a:	2300      	movs	r3, #0
 800818c:	3401      	adds	r4, #1
 800818e:	9305      	str	r3, [sp, #20]
 8008190:	4619      	mov	r1, r3
 8008192:	f04f 0c0a 	mov.w	ip, #10
 8008196:	4620      	mov	r0, r4
 8008198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819c:	3a30      	subs	r2, #48	; 0x30
 800819e:	2a09      	cmp	r2, #9
 80081a0:	d903      	bls.n	80081aa <_vfiprintf_r+0x1ee>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0c5      	beq.n	8008132 <_vfiprintf_r+0x176>
 80081a6:	9105      	str	r1, [sp, #20]
 80081a8:	e7c3      	b.n	8008132 <_vfiprintf_r+0x176>
 80081aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ae:	4604      	mov	r4, r0
 80081b0:	2301      	movs	r3, #1
 80081b2:	e7f0      	b.n	8008196 <_vfiprintf_r+0x1da>
 80081b4:	ab03      	add	r3, sp, #12
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	462a      	mov	r2, r5
 80081ba:	4b16      	ldr	r3, [pc, #88]	; (8008214 <_vfiprintf_r+0x258>)
 80081bc:	a904      	add	r1, sp, #16
 80081be:	4630      	mov	r0, r6
 80081c0:	f3af 8000 	nop.w
 80081c4:	4607      	mov	r7, r0
 80081c6:	1c78      	adds	r0, r7, #1
 80081c8:	d1d6      	bne.n	8008178 <_vfiprintf_r+0x1bc>
 80081ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d405      	bmi.n	80081dc <_vfiprintf_r+0x220>
 80081d0:	89ab      	ldrh	r3, [r5, #12]
 80081d2:	059a      	lsls	r2, r3, #22
 80081d4:	d402      	bmi.n	80081dc <_vfiprintf_r+0x220>
 80081d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081d8:	f7ff fcd5 	bl	8007b86 <__retarget_lock_release_recursive>
 80081dc:	89ab      	ldrh	r3, [r5, #12]
 80081de:	065b      	lsls	r3, r3, #25
 80081e0:	f53f af12 	bmi.w	8008008 <_vfiprintf_r+0x4c>
 80081e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e6:	e711      	b.n	800800c <_vfiprintf_r+0x50>
 80081e8:	ab03      	add	r3, sp, #12
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	462a      	mov	r2, r5
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <_vfiprintf_r+0x258>)
 80081f0:	a904      	add	r1, sp, #16
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 f880 	bl	80082f8 <_printf_i>
 80081f8:	e7e4      	b.n	80081c4 <_vfiprintf_r+0x208>
 80081fa:	bf00      	nop
 80081fc:	08009018 	.word	0x08009018
 8008200:	08009038 	.word	0x08009038
 8008204:	08008ff8 	.word	0x08008ff8
 8008208:	08009058 	.word	0x08009058
 800820c:	08009062 	.word	0x08009062
 8008210:	00000000 	.word	0x00000000
 8008214:	08007f97 	.word	0x08007f97
 8008218:	0800905e 	.word	0x0800905e

0800821c <_printf_common>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	4616      	mov	r6, r2
 8008222:	4699      	mov	r9, r3
 8008224:	688a      	ldr	r2, [r1, #8]
 8008226:	690b      	ldr	r3, [r1, #16]
 8008228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800822c:	4293      	cmp	r3, r2
 800822e:	bfb8      	it	lt
 8008230:	4613      	movlt	r3, r2
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008238:	4607      	mov	r7, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b10a      	cbz	r2, 8008242 <_printf_common+0x26>
 800823e:	3301      	adds	r3, #1
 8008240:	6033      	str	r3, [r6, #0]
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	0699      	lsls	r1, r3, #26
 8008246:	bf42      	ittt	mi
 8008248:	6833      	ldrmi	r3, [r6, #0]
 800824a:	3302      	addmi	r3, #2
 800824c:	6033      	strmi	r3, [r6, #0]
 800824e:	6825      	ldr	r5, [r4, #0]
 8008250:	f015 0506 	ands.w	r5, r5, #6
 8008254:	d106      	bne.n	8008264 <_printf_common+0x48>
 8008256:	f104 0a19 	add.w	sl, r4, #25
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	6832      	ldr	r2, [r6, #0]
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	42ab      	cmp	r3, r5
 8008262:	dc26      	bgt.n	80082b2 <_printf_common+0x96>
 8008264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008268:	1e13      	subs	r3, r2, #0
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	bf18      	it	ne
 800826e:	2301      	movne	r3, #1
 8008270:	0692      	lsls	r2, r2, #26
 8008272:	d42b      	bmi.n	80082cc <_printf_common+0xb0>
 8008274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008278:	4649      	mov	r1, r9
 800827a:	4638      	mov	r0, r7
 800827c:	47c0      	blx	r8
 800827e:	3001      	adds	r0, #1
 8008280:	d01e      	beq.n	80082c0 <_printf_common+0xa4>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	68e5      	ldr	r5, [r4, #12]
 8008286:	6832      	ldr	r2, [r6, #0]
 8008288:	f003 0306 	and.w	r3, r3, #6
 800828c:	2b04      	cmp	r3, #4
 800828e:	bf08      	it	eq
 8008290:	1aad      	subeq	r5, r5, r2
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	6922      	ldr	r2, [r4, #16]
 8008296:	bf0c      	ite	eq
 8008298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800829c:	2500      	movne	r5, #0
 800829e:	4293      	cmp	r3, r2
 80082a0:	bfc4      	itt	gt
 80082a2:	1a9b      	subgt	r3, r3, r2
 80082a4:	18ed      	addgt	r5, r5, r3
 80082a6:	2600      	movs	r6, #0
 80082a8:	341a      	adds	r4, #26
 80082aa:	42b5      	cmp	r5, r6
 80082ac:	d11a      	bne.n	80082e4 <_printf_common+0xc8>
 80082ae:	2000      	movs	r0, #0
 80082b0:	e008      	b.n	80082c4 <_printf_common+0xa8>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4652      	mov	r2, sl
 80082b6:	4649      	mov	r1, r9
 80082b8:	4638      	mov	r0, r7
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d103      	bne.n	80082c8 <_printf_common+0xac>
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c8:	3501      	adds	r5, #1
 80082ca:	e7c6      	b.n	800825a <_printf_common+0x3e>
 80082cc:	18e1      	adds	r1, r4, r3
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	2030      	movs	r0, #48	; 0x30
 80082d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082d6:	4422      	add	r2, r4
 80082d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082e0:	3302      	adds	r3, #2
 80082e2:	e7c7      	b.n	8008274 <_printf_common+0x58>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4622      	mov	r2, r4
 80082e8:	4649      	mov	r1, r9
 80082ea:	4638      	mov	r0, r7
 80082ec:	47c0      	blx	r8
 80082ee:	3001      	adds	r0, #1
 80082f0:	d0e6      	beq.n	80082c0 <_printf_common+0xa4>
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7d9      	b.n	80082aa <_printf_common+0x8e>
	...

080082f8 <_printf_i>:
 80082f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	7e0f      	ldrb	r7, [r1, #24]
 80082fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008300:	2f78      	cmp	r7, #120	; 0x78
 8008302:	4691      	mov	r9, r2
 8008304:	4680      	mov	r8, r0
 8008306:	460c      	mov	r4, r1
 8008308:	469a      	mov	sl, r3
 800830a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800830e:	d807      	bhi.n	8008320 <_printf_i+0x28>
 8008310:	2f62      	cmp	r7, #98	; 0x62
 8008312:	d80a      	bhi.n	800832a <_printf_i+0x32>
 8008314:	2f00      	cmp	r7, #0
 8008316:	f000 80d8 	beq.w	80084ca <_printf_i+0x1d2>
 800831a:	2f58      	cmp	r7, #88	; 0x58
 800831c:	f000 80a3 	beq.w	8008466 <_printf_i+0x16e>
 8008320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008328:	e03a      	b.n	80083a0 <_printf_i+0xa8>
 800832a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800832e:	2b15      	cmp	r3, #21
 8008330:	d8f6      	bhi.n	8008320 <_printf_i+0x28>
 8008332:	a101      	add	r1, pc, #4	; (adr r1, 8008338 <_printf_i+0x40>)
 8008334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008338:	08008391 	.word	0x08008391
 800833c:	080083a5 	.word	0x080083a5
 8008340:	08008321 	.word	0x08008321
 8008344:	08008321 	.word	0x08008321
 8008348:	08008321 	.word	0x08008321
 800834c:	08008321 	.word	0x08008321
 8008350:	080083a5 	.word	0x080083a5
 8008354:	08008321 	.word	0x08008321
 8008358:	08008321 	.word	0x08008321
 800835c:	08008321 	.word	0x08008321
 8008360:	08008321 	.word	0x08008321
 8008364:	080084b1 	.word	0x080084b1
 8008368:	080083d5 	.word	0x080083d5
 800836c:	08008493 	.word	0x08008493
 8008370:	08008321 	.word	0x08008321
 8008374:	08008321 	.word	0x08008321
 8008378:	080084d3 	.word	0x080084d3
 800837c:	08008321 	.word	0x08008321
 8008380:	080083d5 	.word	0x080083d5
 8008384:	08008321 	.word	0x08008321
 8008388:	08008321 	.word	0x08008321
 800838c:	0800849b 	.word	0x0800849b
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	1d1a      	adds	r2, r3, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	602a      	str	r2, [r5, #0]
 8008398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800839c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0a3      	b.n	80084ec <_printf_i+0x1f4>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	6829      	ldr	r1, [r5, #0]
 80083a8:	0606      	lsls	r6, r0, #24
 80083aa:	f101 0304 	add.w	r3, r1, #4
 80083ae:	d50a      	bpl.n	80083c6 <_printf_i+0xce>
 80083b0:	680e      	ldr	r6, [r1, #0]
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	da03      	bge.n	80083c0 <_printf_i+0xc8>
 80083b8:	232d      	movs	r3, #45	; 0x2d
 80083ba:	4276      	negs	r6, r6
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c0:	485e      	ldr	r0, [pc, #376]	; (800853c <_printf_i+0x244>)
 80083c2:	230a      	movs	r3, #10
 80083c4:	e019      	b.n	80083fa <_printf_i+0x102>
 80083c6:	680e      	ldr	r6, [r1, #0]
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ce:	bf18      	it	ne
 80083d0:	b236      	sxthne	r6, r6
 80083d2:	e7ef      	b.n	80083b4 <_printf_i+0xbc>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	6820      	ldr	r0, [r4, #0]
 80083d8:	1d19      	adds	r1, r3, #4
 80083da:	6029      	str	r1, [r5, #0]
 80083dc:	0601      	lsls	r1, r0, #24
 80083de:	d501      	bpl.n	80083e4 <_printf_i+0xec>
 80083e0:	681e      	ldr	r6, [r3, #0]
 80083e2:	e002      	b.n	80083ea <_printf_i+0xf2>
 80083e4:	0646      	lsls	r6, r0, #25
 80083e6:	d5fb      	bpl.n	80083e0 <_printf_i+0xe8>
 80083e8:	881e      	ldrh	r6, [r3, #0]
 80083ea:	4854      	ldr	r0, [pc, #336]	; (800853c <_printf_i+0x244>)
 80083ec:	2f6f      	cmp	r7, #111	; 0x6f
 80083ee:	bf0c      	ite	eq
 80083f0:	2308      	moveq	r3, #8
 80083f2:	230a      	movne	r3, #10
 80083f4:	2100      	movs	r1, #0
 80083f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083fa:	6865      	ldr	r5, [r4, #4]
 80083fc:	60a5      	str	r5, [r4, #8]
 80083fe:	2d00      	cmp	r5, #0
 8008400:	bfa2      	ittt	ge
 8008402:	6821      	ldrge	r1, [r4, #0]
 8008404:	f021 0104 	bicge.w	r1, r1, #4
 8008408:	6021      	strge	r1, [r4, #0]
 800840a:	b90e      	cbnz	r6, 8008410 <_printf_i+0x118>
 800840c:	2d00      	cmp	r5, #0
 800840e:	d04d      	beq.n	80084ac <_printf_i+0x1b4>
 8008410:	4615      	mov	r5, r2
 8008412:	fbb6 f1f3 	udiv	r1, r6, r3
 8008416:	fb03 6711 	mls	r7, r3, r1, r6
 800841a:	5dc7      	ldrb	r7, [r0, r7]
 800841c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008420:	4637      	mov	r7, r6
 8008422:	42bb      	cmp	r3, r7
 8008424:	460e      	mov	r6, r1
 8008426:	d9f4      	bls.n	8008412 <_printf_i+0x11a>
 8008428:	2b08      	cmp	r3, #8
 800842a:	d10b      	bne.n	8008444 <_printf_i+0x14c>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	07de      	lsls	r6, r3, #31
 8008430:	d508      	bpl.n	8008444 <_printf_i+0x14c>
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	6861      	ldr	r1, [r4, #4]
 8008436:	4299      	cmp	r1, r3
 8008438:	bfde      	ittt	le
 800843a:	2330      	movle	r3, #48	; 0x30
 800843c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008444:	1b52      	subs	r2, r2, r5
 8008446:	6122      	str	r2, [r4, #16]
 8008448:	f8cd a000 	str.w	sl, [sp]
 800844c:	464b      	mov	r3, r9
 800844e:	aa03      	add	r2, sp, #12
 8008450:	4621      	mov	r1, r4
 8008452:	4640      	mov	r0, r8
 8008454:	f7ff fee2 	bl	800821c <_printf_common>
 8008458:	3001      	adds	r0, #1
 800845a:	d14c      	bne.n	80084f6 <_printf_i+0x1fe>
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	b004      	add	sp, #16
 8008462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008466:	4835      	ldr	r0, [pc, #212]	; (800853c <_printf_i+0x244>)
 8008468:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	f851 6b04 	ldr.w	r6, [r1], #4
 8008474:	6029      	str	r1, [r5, #0]
 8008476:	061d      	lsls	r5, r3, #24
 8008478:	d514      	bpl.n	80084a4 <_printf_i+0x1ac>
 800847a:	07df      	lsls	r7, r3, #31
 800847c:	bf44      	itt	mi
 800847e:	f043 0320 	orrmi.w	r3, r3, #32
 8008482:	6023      	strmi	r3, [r4, #0]
 8008484:	b91e      	cbnz	r6, 800848e <_printf_i+0x196>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	f023 0320 	bic.w	r3, r3, #32
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	2310      	movs	r3, #16
 8008490:	e7b0      	b.n	80083f4 <_printf_i+0xfc>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f043 0320 	orr.w	r3, r3, #32
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	2378      	movs	r3, #120	; 0x78
 800849c:	4828      	ldr	r0, [pc, #160]	; (8008540 <_printf_i+0x248>)
 800849e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084a2:	e7e3      	b.n	800846c <_printf_i+0x174>
 80084a4:	0659      	lsls	r1, r3, #25
 80084a6:	bf48      	it	mi
 80084a8:	b2b6      	uxthmi	r6, r6
 80084aa:	e7e6      	b.n	800847a <_printf_i+0x182>
 80084ac:	4615      	mov	r5, r2
 80084ae:	e7bb      	b.n	8008428 <_printf_i+0x130>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	6826      	ldr	r6, [r4, #0]
 80084b4:	6961      	ldr	r1, [r4, #20]
 80084b6:	1d18      	adds	r0, r3, #4
 80084b8:	6028      	str	r0, [r5, #0]
 80084ba:	0635      	lsls	r5, r6, #24
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	d501      	bpl.n	80084c4 <_printf_i+0x1cc>
 80084c0:	6019      	str	r1, [r3, #0]
 80084c2:	e002      	b.n	80084ca <_printf_i+0x1d2>
 80084c4:	0670      	lsls	r0, r6, #25
 80084c6:	d5fb      	bpl.n	80084c0 <_printf_i+0x1c8>
 80084c8:	8019      	strh	r1, [r3, #0]
 80084ca:	2300      	movs	r3, #0
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	4615      	mov	r5, r2
 80084d0:	e7ba      	b.n	8008448 <_printf_i+0x150>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	1d1a      	adds	r2, r3, #4
 80084d6:	602a      	str	r2, [r5, #0]
 80084d8:	681d      	ldr	r5, [r3, #0]
 80084da:	6862      	ldr	r2, [r4, #4]
 80084dc:	2100      	movs	r1, #0
 80084de:	4628      	mov	r0, r5
 80084e0:	f7f7 fe8e 	bl	8000200 <memchr>
 80084e4:	b108      	cbz	r0, 80084ea <_printf_i+0x1f2>
 80084e6:	1b40      	subs	r0, r0, r5
 80084e8:	6060      	str	r0, [r4, #4]
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	6123      	str	r3, [r4, #16]
 80084ee:	2300      	movs	r3, #0
 80084f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f4:	e7a8      	b.n	8008448 <_printf_i+0x150>
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d0ab      	beq.n	800845c <_printf_i+0x164>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	079b      	lsls	r3, r3, #30
 8008508:	d413      	bmi.n	8008532 <_printf_i+0x23a>
 800850a:	68e0      	ldr	r0, [r4, #12]
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	4298      	cmp	r0, r3
 8008510:	bfb8      	it	lt
 8008512:	4618      	movlt	r0, r3
 8008514:	e7a4      	b.n	8008460 <_printf_i+0x168>
 8008516:	2301      	movs	r3, #1
 8008518:	4632      	mov	r2, r6
 800851a:	4649      	mov	r1, r9
 800851c:	4640      	mov	r0, r8
 800851e:	47d0      	blx	sl
 8008520:	3001      	adds	r0, #1
 8008522:	d09b      	beq.n	800845c <_printf_i+0x164>
 8008524:	3501      	adds	r5, #1
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	9903      	ldr	r1, [sp, #12]
 800852a:	1a5b      	subs	r3, r3, r1
 800852c:	42ab      	cmp	r3, r5
 800852e:	dcf2      	bgt.n	8008516 <_printf_i+0x21e>
 8008530:	e7eb      	b.n	800850a <_printf_i+0x212>
 8008532:	2500      	movs	r5, #0
 8008534:	f104 0619 	add.w	r6, r4, #25
 8008538:	e7f5      	b.n	8008526 <_printf_i+0x22e>
 800853a:	bf00      	nop
 800853c:	08009069 	.word	0x08009069
 8008540:	0800907a 	.word	0x0800907a

08008544 <_sbrk_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4d06      	ldr	r5, [pc, #24]	; (8008560 <_sbrk_r+0x1c>)
 8008548:	2300      	movs	r3, #0
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	f7f8 fffc 	bl	800154c <_sbrk>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_sbrk_r+0x1a>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_sbrk_r+0x1a>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	200193a0 	.word	0x200193a0

08008564 <__sread>:
 8008564:	b510      	push	{r4, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	f000 fafc 	bl	8008b68 <_read_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	bfab      	itete	ge
 8008574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008576:	89a3      	ldrhlt	r3, [r4, #12]
 8008578:	181b      	addge	r3, r3, r0
 800857a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800857e:	bfac      	ite	ge
 8008580:	6563      	strge	r3, [r4, #84]	; 0x54
 8008582:	81a3      	strhlt	r3, [r4, #12]
 8008584:	bd10      	pop	{r4, pc}

08008586 <__swrite>:
 8008586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	461f      	mov	r7, r3
 800858c:	898b      	ldrh	r3, [r1, #12]
 800858e:	05db      	lsls	r3, r3, #23
 8008590:	4605      	mov	r5, r0
 8008592:	460c      	mov	r4, r1
 8008594:	4616      	mov	r6, r2
 8008596:	d505      	bpl.n	80085a4 <__swrite+0x1e>
 8008598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859c:	2302      	movs	r3, #2
 800859e:	2200      	movs	r2, #0
 80085a0:	f000 f9c8 	bl	8008934 <_lseek_r>
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	4632      	mov	r2, r6
 80085b2:	463b      	mov	r3, r7
 80085b4:	4628      	mov	r0, r5
 80085b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ba:	f000 b869 	b.w	8008690 <_write_r>

080085be <__sseek>:
 80085be:	b510      	push	{r4, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 f9b5 	bl	8008934 <_lseek_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	bf15      	itete	ne
 80085d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80085d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085da:	81a3      	strheq	r3, [r4, #12]
 80085dc:	bf18      	it	ne
 80085de:	81a3      	strhne	r3, [r4, #12]
 80085e0:	bd10      	pop	{r4, pc}

080085e2 <__sclose>:
 80085e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e6:	f000 b8d3 	b.w	8008790 <_close_r>
	...

080085ec <__swbuf_r>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	460e      	mov	r6, r1
 80085f0:	4614      	mov	r4, r2
 80085f2:	4605      	mov	r5, r0
 80085f4:	b118      	cbz	r0, 80085fe <__swbuf_r+0x12>
 80085f6:	6983      	ldr	r3, [r0, #24]
 80085f8:	b90b      	cbnz	r3, 80085fe <__swbuf_r+0x12>
 80085fa:	f7ff fa25 	bl	8007a48 <__sinit>
 80085fe:	4b21      	ldr	r3, [pc, #132]	; (8008684 <__swbuf_r+0x98>)
 8008600:	429c      	cmp	r4, r3
 8008602:	d12b      	bne.n	800865c <__swbuf_r+0x70>
 8008604:	686c      	ldr	r4, [r5, #4]
 8008606:	69a3      	ldr	r3, [r4, #24]
 8008608:	60a3      	str	r3, [r4, #8]
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	071a      	lsls	r2, r3, #28
 800860e:	d52f      	bpl.n	8008670 <__swbuf_r+0x84>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	b36b      	cbz	r3, 8008670 <__swbuf_r+0x84>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	1ac0      	subs	r0, r0, r3
 800861a:	6963      	ldr	r3, [r4, #20]
 800861c:	b2f6      	uxtb	r6, r6
 800861e:	4283      	cmp	r3, r0
 8008620:	4637      	mov	r7, r6
 8008622:	dc04      	bgt.n	800862e <__swbuf_r+0x42>
 8008624:	4621      	mov	r1, r4
 8008626:	4628      	mov	r0, r5
 8008628:	f000 f948 	bl	80088bc <_fflush_r>
 800862c:	bb30      	cbnz	r0, 800867c <__swbuf_r+0x90>
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	3b01      	subs	r3, #1
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	6022      	str	r2, [r4, #0]
 800863a:	701e      	strb	r6, [r3, #0]
 800863c:	6963      	ldr	r3, [r4, #20]
 800863e:	3001      	adds	r0, #1
 8008640:	4283      	cmp	r3, r0
 8008642:	d004      	beq.n	800864e <__swbuf_r+0x62>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	07db      	lsls	r3, r3, #31
 8008648:	d506      	bpl.n	8008658 <__swbuf_r+0x6c>
 800864a:	2e0a      	cmp	r6, #10
 800864c:	d104      	bne.n	8008658 <__swbuf_r+0x6c>
 800864e:	4621      	mov	r1, r4
 8008650:	4628      	mov	r0, r5
 8008652:	f000 f933 	bl	80088bc <_fflush_r>
 8008656:	b988      	cbnz	r0, 800867c <__swbuf_r+0x90>
 8008658:	4638      	mov	r0, r7
 800865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <__swbuf_r+0x9c>)
 800865e:	429c      	cmp	r4, r3
 8008660:	d101      	bne.n	8008666 <__swbuf_r+0x7a>
 8008662:	68ac      	ldr	r4, [r5, #8]
 8008664:	e7cf      	b.n	8008606 <__swbuf_r+0x1a>
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <__swbuf_r+0xa0>)
 8008668:	429c      	cmp	r4, r3
 800866a:	bf08      	it	eq
 800866c:	68ec      	ldreq	r4, [r5, #12]
 800866e:	e7ca      	b.n	8008606 <__swbuf_r+0x1a>
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 f81e 	bl	80086b4 <__swsetup_r>
 8008678:	2800      	cmp	r0, #0
 800867a:	d0cb      	beq.n	8008614 <__swbuf_r+0x28>
 800867c:	f04f 37ff 	mov.w	r7, #4294967295
 8008680:	e7ea      	b.n	8008658 <__swbuf_r+0x6c>
 8008682:	bf00      	nop
 8008684:	08009018 	.word	0x08009018
 8008688:	08009038 	.word	0x08009038
 800868c:	08008ff8 	.word	0x08008ff8

08008690 <_write_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_write_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f8 ff03 	bl	80014aa <_write>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_write_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_write_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200193a0 	.word	0x200193a0

080086b4 <__swsetup_r>:
 80086b4:	4b32      	ldr	r3, [pc, #200]	; (8008780 <__swsetup_r+0xcc>)
 80086b6:	b570      	push	{r4, r5, r6, lr}
 80086b8:	681d      	ldr	r5, [r3, #0]
 80086ba:	4606      	mov	r6, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	b125      	cbz	r5, 80086ca <__swsetup_r+0x16>
 80086c0:	69ab      	ldr	r3, [r5, #24]
 80086c2:	b913      	cbnz	r3, 80086ca <__swsetup_r+0x16>
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7ff f9bf 	bl	8007a48 <__sinit>
 80086ca:	4b2e      	ldr	r3, [pc, #184]	; (8008784 <__swsetup_r+0xd0>)
 80086cc:	429c      	cmp	r4, r3
 80086ce:	d10f      	bne.n	80086f0 <__swsetup_r+0x3c>
 80086d0:	686c      	ldr	r4, [r5, #4]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086d8:	0719      	lsls	r1, r3, #28
 80086da:	d42c      	bmi.n	8008736 <__swsetup_r+0x82>
 80086dc:	06dd      	lsls	r5, r3, #27
 80086de:	d411      	bmi.n	8008704 <__swsetup_r+0x50>
 80086e0:	2309      	movs	r3, #9
 80086e2:	6033      	str	r3, [r6, #0]
 80086e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295
 80086ee:	e03e      	b.n	800876e <__swsetup_r+0xba>
 80086f0:	4b25      	ldr	r3, [pc, #148]	; (8008788 <__swsetup_r+0xd4>)
 80086f2:	429c      	cmp	r4, r3
 80086f4:	d101      	bne.n	80086fa <__swsetup_r+0x46>
 80086f6:	68ac      	ldr	r4, [r5, #8]
 80086f8:	e7eb      	b.n	80086d2 <__swsetup_r+0x1e>
 80086fa:	4b24      	ldr	r3, [pc, #144]	; (800878c <__swsetup_r+0xd8>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	bf08      	it	eq
 8008700:	68ec      	ldreq	r4, [r5, #12]
 8008702:	e7e6      	b.n	80086d2 <__swsetup_r+0x1e>
 8008704:	0758      	lsls	r0, r3, #29
 8008706:	d512      	bpl.n	800872e <__swsetup_r+0x7a>
 8008708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800870a:	b141      	cbz	r1, 800871e <__swsetup_r+0x6a>
 800870c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008710:	4299      	cmp	r1, r3
 8008712:	d002      	beq.n	800871a <__swsetup_r+0x66>
 8008714:	4630      	mov	r0, r6
 8008716:	f000 f9ab 	bl	8008a70 <_free_r>
 800871a:	2300      	movs	r3, #0
 800871c:	6363      	str	r3, [r4, #52]	; 0x34
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008724:	81a3      	strh	r3, [r4, #12]
 8008726:	2300      	movs	r3, #0
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f043 0308 	orr.w	r3, r3, #8
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	b94b      	cbnz	r3, 800874e <__swsetup_r+0x9a>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008744:	d003      	beq.n	800874e <__swsetup_r+0x9a>
 8008746:	4621      	mov	r1, r4
 8008748:	4630      	mov	r0, r6
 800874a:	f000 f92b 	bl	80089a4 <__smakebuf_r>
 800874e:	89a0      	ldrh	r0, [r4, #12]
 8008750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008754:	f010 0301 	ands.w	r3, r0, #1
 8008758:	d00a      	beq.n	8008770 <__swsetup_r+0xbc>
 800875a:	2300      	movs	r3, #0
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	6963      	ldr	r3, [r4, #20]
 8008760:	425b      	negs	r3, r3
 8008762:	61a3      	str	r3, [r4, #24]
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	b943      	cbnz	r3, 800877a <__swsetup_r+0xc6>
 8008768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800876c:	d1ba      	bne.n	80086e4 <__swsetup_r+0x30>
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	0781      	lsls	r1, r0, #30
 8008772:	bf58      	it	pl
 8008774:	6963      	ldrpl	r3, [r4, #20]
 8008776:	60a3      	str	r3, [r4, #8]
 8008778:	e7f4      	b.n	8008764 <__swsetup_r+0xb0>
 800877a:	2000      	movs	r0, #0
 800877c:	e7f7      	b.n	800876e <__swsetup_r+0xba>
 800877e:	bf00      	nop
 8008780:	20000028 	.word	0x20000028
 8008784:	08009018 	.word	0x08009018
 8008788:	08009038 	.word	0x08009038
 800878c:	08008ff8 	.word	0x08008ff8

08008790 <_close_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_close_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f8 fea1 	bl	80014e2 <_close>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_close_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_close_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	200193a0 	.word	0x200193a0

080087b0 <__sflush_r>:
 80087b0:	898a      	ldrh	r2, [r1, #12]
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	4605      	mov	r5, r0
 80087b8:	0710      	lsls	r0, r2, #28
 80087ba:	460c      	mov	r4, r1
 80087bc:	d458      	bmi.n	8008870 <__sflush_r+0xc0>
 80087be:	684b      	ldr	r3, [r1, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	dc05      	bgt.n	80087d0 <__sflush_r+0x20>
 80087c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc02      	bgt.n	80087d0 <__sflush_r+0x20>
 80087ca:	2000      	movs	r0, #0
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d0f9      	beq.n	80087ca <__sflush_r+0x1a>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087dc:	682f      	ldr	r7, [r5, #0]
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	d032      	beq.n	8008848 <__sflush_r+0x98>
 80087e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	075a      	lsls	r2, r3, #29
 80087e8:	d505      	bpl.n	80087f6 <__sflush_r+0x46>
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	1ac0      	subs	r0, r0, r3
 80087ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f0:	b10b      	cbz	r3, 80087f6 <__sflush_r+0x46>
 80087f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	2300      	movs	r3, #0
 80087f8:	4602      	mov	r2, r0
 80087fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fc:	6a21      	ldr	r1, [r4, #32]
 80087fe:	4628      	mov	r0, r5
 8008800:	47b0      	blx	r6
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x66>
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	291d      	cmp	r1, #29
 800880c:	d82c      	bhi.n	8008868 <__sflush_r+0xb8>
 800880e:	4a2a      	ldr	r2, [pc, #168]	; (80088b8 <__sflush_r+0x108>)
 8008810:	40ca      	lsrs	r2, r1
 8008812:	07d6      	lsls	r6, r2, #31
 8008814:	d528      	bpl.n	8008868 <__sflush_r+0xb8>
 8008816:	2200      	movs	r2, #0
 8008818:	6062      	str	r2, [r4, #4]
 800881a:	04d9      	lsls	r1, r3, #19
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	d504      	bpl.n	800882c <__sflush_r+0x7c>
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	d101      	bne.n	800882a <__sflush_r+0x7a>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b903      	cbnz	r3, 800882c <__sflush_r+0x7c>
 800882a:	6560      	str	r0, [r4, #84]	; 0x54
 800882c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	2900      	cmp	r1, #0
 8008832:	d0ca      	beq.n	80087ca <__sflush_r+0x1a>
 8008834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008838:	4299      	cmp	r1, r3
 800883a:	d002      	beq.n	8008842 <__sflush_r+0x92>
 800883c:	4628      	mov	r0, r5
 800883e:	f000 f917 	bl	8008a70 <_free_r>
 8008842:	2000      	movs	r0, #0
 8008844:	6360      	str	r0, [r4, #52]	; 0x34
 8008846:	e7c1      	b.n	80087cc <__sflush_r+0x1c>
 8008848:	6a21      	ldr	r1, [r4, #32]
 800884a:	2301      	movs	r3, #1
 800884c:	4628      	mov	r0, r5
 800884e:	47b0      	blx	r6
 8008850:	1c41      	adds	r1, r0, #1
 8008852:	d1c7      	bne.n	80087e4 <__sflush_r+0x34>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0c4      	beq.n	80087e4 <__sflush_r+0x34>
 800885a:	2b1d      	cmp	r3, #29
 800885c:	d001      	beq.n	8008862 <__sflush_r+0xb2>
 800885e:	2b16      	cmp	r3, #22
 8008860:	d101      	bne.n	8008866 <__sflush_r+0xb6>
 8008862:	602f      	str	r7, [r5, #0]
 8008864:	e7b1      	b.n	80087ca <__sflush_r+0x1a>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	e7ad      	b.n	80087cc <__sflush_r+0x1c>
 8008870:	690f      	ldr	r7, [r1, #16]
 8008872:	2f00      	cmp	r7, #0
 8008874:	d0a9      	beq.n	80087ca <__sflush_r+0x1a>
 8008876:	0793      	lsls	r3, r2, #30
 8008878:	680e      	ldr	r6, [r1, #0]
 800887a:	bf08      	it	eq
 800887c:	694b      	ldreq	r3, [r1, #20]
 800887e:	600f      	str	r7, [r1, #0]
 8008880:	bf18      	it	ne
 8008882:	2300      	movne	r3, #0
 8008884:	eba6 0807 	sub.w	r8, r6, r7
 8008888:	608b      	str	r3, [r1, #8]
 800888a:	f1b8 0f00 	cmp.w	r8, #0
 800888e:	dd9c      	ble.n	80087ca <__sflush_r+0x1a>
 8008890:	6a21      	ldr	r1, [r4, #32]
 8008892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008894:	4643      	mov	r3, r8
 8008896:	463a      	mov	r2, r7
 8008898:	4628      	mov	r0, r5
 800889a:	47b0      	blx	r6
 800889c:	2800      	cmp	r0, #0
 800889e:	dc06      	bgt.n	80088ae <__sflush_r+0xfe>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a6:	81a3      	strh	r3, [r4, #12]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	e78e      	b.n	80087cc <__sflush_r+0x1c>
 80088ae:	4407      	add	r7, r0
 80088b0:	eba8 0800 	sub.w	r8, r8, r0
 80088b4:	e7e9      	b.n	800888a <__sflush_r+0xda>
 80088b6:	bf00      	nop
 80088b8:	20400001 	.word	0x20400001

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6983      	ldr	r3, [r0, #24]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f7ff f8b9 	bl	8007a48 <__sinit>
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <_fflush_r+0x6c>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	d11b      	bne.n	8008914 <_fflush_r+0x58>
 80088dc:	686c      	ldr	r4, [r5, #4]
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ef      	beq.n	80088c6 <_fflush_r+0xa>
 80088e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088e8:	07d0      	lsls	r0, r2, #31
 80088ea:	d404      	bmi.n	80088f6 <_fflush_r+0x3a>
 80088ec:	0599      	lsls	r1, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_fflush_r+0x3a>
 80088f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f2:	f7ff f947 	bl	8007b84 <__retarget_lock_acquire_recursive>
 80088f6:	4628      	mov	r0, r5
 80088f8:	4621      	mov	r1, r4
 80088fa:	f7ff ff59 	bl	80087b0 <__sflush_r>
 80088fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008900:	07da      	lsls	r2, r3, #31
 8008902:	4605      	mov	r5, r0
 8008904:	d4e0      	bmi.n	80088c8 <_fflush_r+0xc>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	059b      	lsls	r3, r3, #22
 800890a:	d4dd      	bmi.n	80088c8 <_fflush_r+0xc>
 800890c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800890e:	f7ff f93a 	bl	8007b86 <__retarget_lock_release_recursive>
 8008912:	e7d9      	b.n	80088c8 <_fflush_r+0xc>
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <_fflush_r+0x70>)
 8008916:	429c      	cmp	r4, r3
 8008918:	d101      	bne.n	800891e <_fflush_r+0x62>
 800891a:	68ac      	ldr	r4, [r5, #8]
 800891c:	e7df      	b.n	80088de <_fflush_r+0x22>
 800891e:	4b04      	ldr	r3, [pc, #16]	; (8008930 <_fflush_r+0x74>)
 8008920:	429c      	cmp	r4, r3
 8008922:	bf08      	it	eq
 8008924:	68ec      	ldreq	r4, [r5, #12]
 8008926:	e7da      	b.n	80088de <_fflush_r+0x22>
 8008928:	08009018 	.word	0x08009018
 800892c:	08009038 	.word	0x08009038
 8008930:	08008ff8 	.word	0x08008ff8

08008934 <_lseek_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	; (8008954 <_lseek_r+0x20>)
 8008938:	4604      	mov	r4, r0
 800893a:	4608      	mov	r0, r1
 800893c:	4611      	mov	r1, r2
 800893e:	2200      	movs	r2, #0
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f8 fdf4 	bl	8001530 <_lseek>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_lseek_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_lseek_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	200193a0 	.word	0x200193a0

08008958 <__swhatbuf_r>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	460e      	mov	r6, r1
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2900      	cmp	r1, #0
 8008962:	b096      	sub	sp, #88	; 0x58
 8008964:	4614      	mov	r4, r2
 8008966:	461d      	mov	r5, r3
 8008968:	da08      	bge.n	800897c <__swhatbuf_r+0x24>
 800896a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	602a      	str	r2, [r5, #0]
 8008972:	061a      	lsls	r2, r3, #24
 8008974:	d410      	bmi.n	8008998 <__swhatbuf_r+0x40>
 8008976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897a:	e00e      	b.n	800899a <__swhatbuf_r+0x42>
 800897c:	466a      	mov	r2, sp
 800897e:	f000 f905 	bl	8008b8c <_fstat_r>
 8008982:	2800      	cmp	r0, #0
 8008984:	dbf1      	blt.n	800896a <__swhatbuf_r+0x12>
 8008986:	9a01      	ldr	r2, [sp, #4]
 8008988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800898c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008990:	425a      	negs	r2, r3
 8008992:	415a      	adcs	r2, r3
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	e7ee      	b.n	8008976 <__swhatbuf_r+0x1e>
 8008998:	2340      	movs	r3, #64	; 0x40
 800899a:	2000      	movs	r0, #0
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	b016      	add	sp, #88	; 0x58
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080089a4 <__smakebuf_r>:
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089a8:	079d      	lsls	r5, r3, #30
 80089aa:	4606      	mov	r6, r0
 80089ac:	460c      	mov	r4, r1
 80089ae:	d507      	bpl.n	80089c0 <__smakebuf_r+0x1c>
 80089b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	2301      	movs	r3, #1
 80089ba:	6163      	str	r3, [r4, #20]
 80089bc:	b002      	add	sp, #8
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	ab01      	add	r3, sp, #4
 80089c2:	466a      	mov	r2, sp
 80089c4:	f7ff ffc8 	bl	8008958 <__swhatbuf_r>
 80089c8:	9900      	ldr	r1, [sp, #0]
 80089ca:	4605      	mov	r5, r0
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff f8fb 	bl	8007bc8 <_malloc_r>
 80089d2:	b948      	cbnz	r0, 80089e8 <__smakebuf_r+0x44>
 80089d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d8:	059a      	lsls	r2, r3, #22
 80089da:	d4ef      	bmi.n	80089bc <__smakebuf_r+0x18>
 80089dc:	f023 0303 	bic.w	r3, r3, #3
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	e7e3      	b.n	80089b0 <__smakebuf_r+0xc>
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <__smakebuf_r+0x7c>)
 80089ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	6163      	str	r3, [r4, #20]
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	6120      	str	r0, [r4, #16]
 80089fe:	b15b      	cbz	r3, 8008a18 <__smakebuf_r+0x74>
 8008a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f8d3 	bl	8008bb0 <_isatty_r>
 8008a0a:	b128      	cbz	r0, 8008a18 <__smakebuf_r+0x74>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	89a0      	ldrh	r0, [r4, #12]
 8008a1a:	4305      	orrs	r5, r0
 8008a1c:	81a5      	strh	r5, [r4, #12]
 8008a1e:	e7cd      	b.n	80089bc <__smakebuf_r+0x18>
 8008a20:	080079e1 	.word	0x080079e1

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0402 	add.w	r4, r1, r2
 8008a2c:	d902      	bls.n	8008a34 <memmove+0x10>
 8008a2e:	4284      	cmp	r4, r0
 8008a30:	4623      	mov	r3, r4
 8008a32:	d807      	bhi.n	8008a44 <memmove+0x20>
 8008a34:	1e43      	subs	r3, r0, #1
 8008a36:	42a1      	cmp	r1, r4
 8008a38:	d008      	beq.n	8008a4c <memmove+0x28>
 8008a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a42:	e7f8      	b.n	8008a36 <memmove+0x12>
 8008a44:	4402      	add	r2, r0
 8008a46:	4601      	mov	r1, r0
 8008a48:	428a      	cmp	r2, r1
 8008a4a:	d100      	bne.n	8008a4e <memmove+0x2a>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a56:	e7f7      	b.n	8008a48 <memmove+0x24>

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f7ff b893 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20019394 	.word	0x20019394

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f7ff b88e 	b.w	8007b86 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20019394 	.word	0x20019394

08008a70 <_free_r>:
 8008a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a72:	2900      	cmp	r1, #0
 8008a74:	d044      	beq.n	8008b00 <_free_r+0x90>
 8008a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7a:	9001      	str	r0, [sp, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a82:	bfb8      	it	lt
 8008a84:	18e4      	addlt	r4, r4, r3
 8008a86:	f7ff ffe7 	bl	8008a58 <__malloc_lock>
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <_free_r+0x94>)
 8008a8c:	9801      	ldr	r0, [sp, #4]
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	b933      	cbnz	r3, 8008aa0 <_free_r+0x30>
 8008a92:	6063      	str	r3, [r4, #4]
 8008a94:	6014      	str	r4, [r2, #0]
 8008a96:	b003      	add	sp, #12
 8008a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a9c:	f7ff bfe2 	b.w	8008a64 <__malloc_unlock>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x46>
 8008aa4:	6825      	ldr	r5, [r4, #0]
 8008aa6:	1961      	adds	r1, r4, r5
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf01      	itttt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	1949      	addeq	r1, r1, r5
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	e7ed      	b.n	8008a92 <_free_r+0x22>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b10b      	cbz	r3, 8008ac0 <_free_r+0x50>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x46>
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	1855      	adds	r5, r2, r1
 8008ac4:	42a5      	cmp	r5, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x70>
 8008ac8:	6824      	ldr	r4, [r4, #0]
 8008aca:	4421      	add	r1, r4
 8008acc:	1854      	adds	r4, r2, r1
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	d1e0      	bne.n	8008a96 <_free_r+0x26>
 8008ad4:	681c      	ldr	r4, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	6053      	str	r3, [r2, #4]
 8008ada:	4421      	add	r1, r4
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	e7da      	b.n	8008a96 <_free_r+0x26>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x78>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	e7d6      	b.n	8008a96 <_free_r+0x26>
 8008ae8:	6825      	ldr	r5, [r4, #0]
 8008aea:	1961      	adds	r1, r4, r5
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1949      	addeq	r1, r1, r5
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6054      	str	r4, [r2, #4]
 8008afe:	e7ca      	b.n	8008a96 <_free_r+0x26>
 8008b00:	b003      	add	sp, #12
 8008b02:	bd30      	pop	{r4, r5, pc}
 8008b04:	20019398 	.word	0x20019398

08008b08 <_realloc_r>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4614      	mov	r4, r2
 8008b10:	460e      	mov	r6, r1
 8008b12:	b921      	cbnz	r1, 8008b1e <_realloc_r+0x16>
 8008b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	4611      	mov	r1, r2
 8008b1a:	f7ff b855 	b.w	8007bc8 <_malloc_r>
 8008b1e:	b92a      	cbnz	r2, 8008b2c <_realloc_r+0x24>
 8008b20:	f7ff ffa6 	bl	8008a70 <_free_r>
 8008b24:	4625      	mov	r5, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	f000 f850 	bl	8008bd0 <_malloc_usable_size_r>
 8008b30:	4284      	cmp	r4, r0
 8008b32:	4607      	mov	r7, r0
 8008b34:	d802      	bhi.n	8008b3c <_realloc_r+0x34>
 8008b36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b3a:	d812      	bhi.n	8008b62 <_realloc_r+0x5a>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7ff f842 	bl	8007bc8 <_malloc_r>
 8008b44:	4605      	mov	r5, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d0ed      	beq.n	8008b26 <_realloc_r+0x1e>
 8008b4a:	42bc      	cmp	r4, r7
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4631      	mov	r1, r6
 8008b50:	bf28      	it	cs
 8008b52:	463a      	movcs	r2, r7
 8008b54:	f7fe fed2 	bl	80078fc <memcpy>
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff ff88 	bl	8008a70 <_free_r>
 8008b60:	e7e1      	b.n	8008b26 <_realloc_r+0x1e>
 8008b62:	4635      	mov	r5, r6
 8008b64:	e7df      	b.n	8008b26 <_realloc_r+0x1e>
	...

08008b68 <_read_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d07      	ldr	r5, [pc, #28]	; (8008b88 <_read_r+0x20>)
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f7f8 fc7a 	bl	8001470 <_read>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_read_r+0x1e>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_read_r+0x1e>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	200193a0 	.word	0x200193a0

08008b8c <_fstat_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	; (8008bac <_fstat_r+0x20>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	f7f8 fcae 	bl	80014fa <_fstat>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d102      	bne.n	8008ba8 <_fstat_r+0x1c>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	b103      	cbz	r3, 8008ba8 <_fstat_r+0x1c>
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	bf00      	nop
 8008bac:	200193a0 	.word	0x200193a0

08008bb0 <_isatty_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d06      	ldr	r5, [pc, #24]	; (8008bcc <_isatty_r+0x1c>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f8 fcad 	bl	800151a <_isatty>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_isatty_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_isatty_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	200193a0 	.word	0x200193a0

08008bd0 <_malloc_usable_size_r>:
 8008bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd4:	1f18      	subs	r0, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfbc      	itt	lt
 8008bda:	580b      	ldrlt	r3, [r1, r0]
 8008bdc:	18c0      	addlt	r0, r0, r3
 8008bde:	4770      	bx	lr

08008be0 <_init>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr

08008bec <_fini>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr
