
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000563c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e0  080058e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e8  080058e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080058f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a810  2000001c  0800590c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a82c  0800590c  0002a82c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b78  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a72  00000000  00000000  00031bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00035748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022888  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ae4  00000000  00000000  00058f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d425b  00000000  00000000  0006aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ecb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  0013ed08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057b4 	.word	0x080057b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080057b4 	.word	0x080057b4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019258 	.word	0x20019258

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fba9 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f851 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8b9 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <main+0x98>)
 800058c:	f003 fb80 	bl	8003c90 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <main+0x9c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <main+0x9c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800059c:	f003 f932 	bl	8003804 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005a0:	f004 fb22 	bl	8004be8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	22c8      	movs	r2, #200	; 0xc8
 80005b2:	4919      	ldr	r1, [pc, #100]	; (8000618 <main+0xa0>)
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0xa4>)
 80005b6:	f001 fe2e 	bl	8002216 <xTaskCreate>
 80005ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00a      	beq.n	80005d8 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c6:	f383 8811 	msr	BASEPRI, r3
 80005ca:	f3bf 8f6f 	isb	sy
 80005ce:	f3bf 8f4f 	dsb	sy
 80005d2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d4:	bf00      	nop
 80005d6:	e7fe      	b.n	80005d6 <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", 200,NULL, 3, &task2_handle);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	2303      	movs	r3, #3
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	22c8      	movs	r2, #200	; 0xc8
 80005e4:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0xa8>)
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0xac>)
 80005e8:	f001 fe15 	bl	8002216 <xTaskCreate>
 80005ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <main+0x92>
        __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60fb      	str	r3, [r7, #12]
    }
 8000606:	bf00      	nop
 8000608:	e7fe      	b.n	8000608 <main+0x90>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800060a:	f002 f841 	bl	8002690 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x96>
 8000610:	0007a120 	.word	0x0007a120
 8000614:	e0001000 	.word	0xe0001000
 8000618:	080057cc 	.word	0x080057cc
 800061c:	08000a5d 	.word	0x08000a5d
 8000620:	080057d4 	.word	0x080057d4
 8000624:	08000a81 	.word	0x08000a81

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f8b4 	bl	80057a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	; 0xa8
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe4d 	bl	800134c <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa14 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8a4 	bl	8001828 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f9fd 	bl	8000ae4 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba5      	ldr	r3, [pc, #660]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aa4      	ldr	r2, [pc, #656]	; (80009ac <MX_GPIO_Init+0x2b0>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4ba2      	ldr	r3, [pc, #648]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9e      	ldr	r3, [pc, #632]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a9d      	ldr	r2, [pc, #628]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9b      	ldr	r3, [pc, #620]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b97      	ldr	r3, [pc, #604]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a96      	ldr	r2, [pc, #600]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b94      	ldr	r3, [pc, #592]	; (80009ac <MX_GPIO_Init+0x2b0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b90      	ldr	r3, [pc, #576]	; (80009ac <MX_GPIO_Init+0x2b0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a8f      	ldr	r2, [pc, #572]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b8d      	ldr	r3, [pc, #564]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b89      	ldr	r3, [pc, #548]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a88      	ldr	r2, [pc, #544]	; (80009ac <MX_GPIO_Init+0x2b0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b86      	ldr	r3, [pc, #536]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b82      	ldr	r3, [pc, #520]	; (80009ac <MX_GPIO_Init+0x2b0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a81      	ldr	r2, [pc, #516]	; (80009ac <MX_GPIO_Init+0x2b0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b7f      	ldr	r3, [pc, #508]	; (80009ac <MX_GPIO_Init+0x2b0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	487c      	ldr	r0, [pc, #496]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007c0:	f000 fd6c 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	487a      	ldr	r0, [pc, #488]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80007ca:	f000 fd67 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d4:	4878      	ldr	r0, [pc, #480]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 80007d6:	f000 fd61 	bl	800129c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	486f      	ldr	r0, [pc, #444]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 80007f2:	f000 fbb7 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4869      	ldr	r0, [pc, #420]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 800080e:	f000 fba9 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4861      	ldr	r0, [pc, #388]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 800082e:	f000 fb99 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	4b61      	ldr	r3, [pc, #388]	; (80009bc <MX_GPIO_Init+0x2c0>)
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	485e      	ldr	r0, [pc, #376]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000846:	f000 fb8d 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085a:	2306      	movs	r3, #6
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4856      	ldr	r0, [pc, #344]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000866:	f000 fb7d 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086a:	23e0      	movs	r3, #224	; 0xe0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	484e      	ldr	r0, [pc, #312]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 8000886:	f000 fb6d 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088a:	2304      	movs	r3, #4
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4849      	ldr	r0, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 800089e:	f000 fb61 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b4:	2305      	movs	r3, #5
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4841      	ldr	r0, [pc, #260]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 80008c0:	f000 fb50 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4836      	ldr	r0, [pc, #216]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 80008de:	f000 fb41 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f4:	2306      	movs	r3, #6
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 8000900:	f000 fb30 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800091a:	f000 fb23 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800091e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000930:	230a      	movs	r3, #10
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <MX_GPIO_Init+0x2c4>)
 800093c:	f000 fb12 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4819      	ldr	r0, [pc, #100]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 8000954:	f000 fb06 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000958:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096a:	2304      	movs	r3, #4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_GPIO_Init+0x2c8>)
 8000976:	f000 faf5 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x2cc>)
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800098e:	f000 fae9 	bl	8000f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2106      	movs	r1, #6
 8000996:	2006      	movs	r0, #6
 8000998:	f000 faba 	bl	8000f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099c:	2006      	movs	r0, #6
 800099e:	f000 fad3 	bl	8000f48 <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	10210000 	.word	0x10210000
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400
 80009c8:	10120000 	.word	0x10120000

080009cc <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 80009d6:	f002 fbdd 	bl	8003194 <vPortEnterCritical>
	if(status_button){
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <switch_priority+0x84>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d004      	beq.n	80009ec <switch_priority+0x20>
		status_button = 0;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <switch_priority+0x84>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 80009ec:	f002 fc02 	bl	80031f4 <vPortExitCritical>

	if(switch_priority){
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d027      	beq.n	8000a46 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <switch_priority+0x88>)
 80009f8:	f001 ffd4 	bl	80029a4 <xTaskGetHandle>
 80009fc:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <switch_priority+0x8c>)
 8000a00:	f001 ffd0 	bl	80029a4 <xTaskGetHandle>
 8000a04:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000a06:	6938      	ldr	r0, [r7, #16]
 8000a08:	f001 fd68 	bl	80024dc <uxTaskPriorityGet>
 8000a0c:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f001 fd64 	bl	80024dc <uxTaskPriorityGet>
 8000a14:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a16:	f002 fa03 	bl	8002e20 <xTaskGetCurrentTaskHandle>
 8000a1a:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d108      	bne.n	8000a36 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	6938      	ldr	r0, [r7, #16]
 8000a28:	f001 fd72 	bl	8002510 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f001 fd6e 	bl	8002510 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000a34:	e007      	b.n	8000a46 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f001 fd69 	bl	8002510 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	6938      	ldr	r0, [r7, #16]
 8000a42:	f001 fd65 	bl	8002510 <vTaskPrioritySet>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000038 	.word	0x20000038
 8000a54:	080057cc 	.word	0x080057cc
 8000a58:	080057d4 	.word	0x080057d4

08000a5c <task1_handler>:

static void task1_handler(void* parameters)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <task1_handler+0x20>)
 8000a6a:	f000 fc30 	bl	80012ce <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a6e:	2064      	movs	r0, #100	; 0x64
 8000a70:	f000 f972 	bl	8000d58 <HAL_Delay>
		switch_priority();
 8000a74:	f7ff ffaa 	bl	80009cc <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a78:	e7f4      	b.n	8000a64 <task1_handler+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <task2_handler+0x20>)
 8000a8e:	f000 fc1e 	bl	80012ce <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a96:	f000 f95f 	bl	8000d58 <HAL_Delay>
		switch_priority();
 8000a9a:	f7ff ff97 	bl	80009cc <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a9e:	e7f3      	b.n	8000a88 <task2_handler+0x8>
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000aa8:	f004 fb68 	bl	800517c <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <button_interrupt_handler+0x18>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000ab2:	f004 fba5 	bl	8005200 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000038 	.word	0x20000038

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 f921 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b32:	f002 fab1 	bl	8003098 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2036      	movs	r0, #54	; 0x36
 8000b5a:	f000 f9d9 	bl	8000f10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b5e:	2036      	movs	r0, #54	; 0x36
 8000b60:	f000 f9f2 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f858 	bl	8001c40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b90:	f001 f842 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_InitTick+0xa8>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0xac>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_InitTick+0xb0>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bca:	f001 f86b 	bl	8001ca4 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bd6:	f001 f89a 	bl	8001d0e <HAL_TIM_Base_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000c30:	f7ff ff38 	bl	8000aa4 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fb65 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 f886 	bl	8001d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000003c 	.word	0x2000003c

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x28>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <SystemInit+0x28>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x28>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
  ldr  r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd3 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fd37 	bl	8005720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc61 	bl	8000578 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cbc:	080058f0 	.word	0x080058f0
  ldr  r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cc4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000cc8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000ccc:	2001a82c 	.word	0x2001a82c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8fc 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff1e 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fef4 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000007c 	.word	0x2000007c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000007c 	.word	0x2000007c

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e16b      	b.n	8001258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 815a 	bne.w	8001252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d00b      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	2b11      	cmp	r3, #17
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0xfc>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80b4 	beq.w	8001252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b60      	ldr	r3, [pc, #384]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a5f      	ldr	r2, [pc, #380]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a5b      	ldr	r2, [pc, #364]	; (8001274 <HAL_GPIO_Init+0x310>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x314>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a51      	ldr	r2, [pc, #324]	; (800127c <HAL_GPIO_Init+0x318>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x31c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x320>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x324>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x216>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x328>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x20e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x20a>
 800116a:	2307      	movs	r3, #7
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x228>
 800116e:	2308      	movs	r3, #8
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x228>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x228>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x228>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x310>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_Init+0x334>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x334>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae90 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	401a      	ands	r2, r3
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d104      	bne.n	80012f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	041a      	lsls	r2, r3, #16
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f806 	bl	8001334 <HAL_GPIO_EXTI_Callback>
  }
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e25e      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d075      	beq.n	8001456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d00c      	beq.n	8001390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d112      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138e:	d10b      	bne.n	80013a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d05b      	beq.n	8001454 <HAL_RCC_OscConfig+0x108>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d157      	bne.n	8001454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e239      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d106      	bne.n	80013c0 <HAL_RCC_OscConfig+0x74>
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a75      	ldr	r2, [pc, #468]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6f      	ldr	r2, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6c      	ldr	r2, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xb0>
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a68      	ldr	r2, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fc9c 	bl	8000d40 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fc98 	bl	8000d40 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1fe      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xc0>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc88 	bl	8000d40 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc84 	bl	8000d40 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1ea      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0xe8>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x240>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1be      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc3d 	bl	8000d40 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc39 	bl	8000d40 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e19f      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4925      	ldr	r1, [pc, #148]	; (800158c <HAL_RCC_OscConfig+0x240>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x244>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc1c 	bl	8000d40 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc18 	bl	8000d40 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e17e      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d036      	beq.n	80015a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d016      	beq.n	800156c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff fbfc 	bl	8000d40 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fbf8 	bl	8000d40 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e15e      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x240>)
 8001560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x200>
 800156a:	e01b      	b.n	80015a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_OscConfig+0x248>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbe5 	bl	8000d40 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	e00e      	b.n	8001598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fbe1 	bl	8000d40 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d907      	bls.n	8001598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e147      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ea      	bne.n	800157a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8097 	beq.w	80016e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b7d      	ldr	r3, [pc, #500]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a7c      	ldr	r2, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a73      	ldr	r2, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fba1 	bl	8000d40 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fb9d 	bl	8000d40 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e103      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x474>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ea>
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x30c>
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x324>
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a57      	ldr	r2, [pc, #348]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb62 	bl	8000d40 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb5e 	bl	8000d40 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0c2      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ee      	beq.n	8001680 <HAL_RCC_OscConfig+0x334>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb4c 	bl	8000d40 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb48 	bl	8000d40 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0ac      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a38      	ldr	r2, [pc, #224]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8098 	beq.w	800181a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d05c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d141      	bne.n	8001782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb1c 	bl	8000d40 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fb18 	bl	8000d40 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e07e      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	491b      	ldr	r1, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff faf1 	bl	8000d40 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff faed 	bl	8000d40 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e053      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x416>
 8001780:	e04b      	b.n	800181a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fada 	bl	8000d40 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fad6 	bl	8000d40 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e03c      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
 80017ae:	e034      	b.n	800181a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e02f      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000
 80017c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d11c      	bne.n	8001816 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d115      	bne.n	8001816 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa12 	bl	8000d40 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa0e 	bl	8000d40 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f8b8 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	080058b0 	.word	0x080058b0
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f8:	b094      	sub	sp, #80	; 0x50
 80019fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001a00:	2300      	movs	r3, #0
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a04:	2300      	movs	r3, #0
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00d      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 80e1 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x34>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a26:	e0db      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a2c:	e0db      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a32:	e0d8      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
 8001a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a66:	4622      	mov	r2, r4
 8001a68:	462b      	mov	r3, r5
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4621      	mov	r1, r4
 8001a80:	1a51      	subs	r1, r2, r1
 8001a82:	6139      	str	r1, [r7, #16]
 8001a84:	4629      	mov	r1, r5
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a98:	4659      	mov	r1, fp
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	018a      	lsls	r2, r1, #6
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001aac:	4659      	mov	r1, fp
 8001aae:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	eb18 0303 	adds.w	r3, r8, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	eb49 0303 	adc.w	r3, r9, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	024b      	lsls	r3, r1, #9
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af0:	4621      	mov	r1, r4
 8001af2:	024a      	lsls	r2, r1, #9
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b04:	f7fe fbb6 	bl	8000274 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b10:	e058      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	464b      	mov	r3, r9
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	0159      	lsls	r1, r3, #5
 8001b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3e:	0150      	lsls	r0, r2, #5
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4641      	mov	r1, r8
 8001b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b64:	ebb2 040a 	subs.w	r4, r2, sl
 8001b68:	eb63 050b 	sbc.w	r5, r3, fp
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	00eb      	lsls	r3, r5, #3
 8001b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7a:	00e2      	lsls	r2, r4, #3
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	18e3      	adds	r3, r4, r3
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	464b      	mov	r3, r9
 8001b88:	eb45 0303 	adc.w	r3, r5, r3
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	028b      	lsls	r3, r1, #10
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	028a      	lsls	r2, r1, #10
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	61fa      	str	r2, [r7, #28]
 8001bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb8:	f7fe fb5c 	bl	8000274 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3750      	adds	r7, #80	; 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	080058c0 	.word	0x080058c0

08001c40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCC_GetClockConfig+0x60>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e01d      	b.n	8001cf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f815 	bl	8001cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f000 f968 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d122      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d11b      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0202 	mvn.w	r2, #2
 8001d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8ee 	bl	8001f7a <HAL_TIM_IC_CaptureCallback>
 8001d9e:	e005      	b.n	8001dac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8e0 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8f1 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d122      	bne.n	8001e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d11b      	bne.n	8001e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0204 	mvn.w	r2, #4
 8001dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8c4 	bl	8001f7a <HAL_TIM_IC_CaptureCallback>
 8001df2:	e005      	b.n	8001e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8b6 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8c7 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d122      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11b      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0208 	mvn.w	r2, #8
 8001e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f89a 	bl	8001f7a <HAL_TIM_IC_CaptureCallback>
 8001e46:	e005      	b.n	8001e54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f88c 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f89d 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d122      	bne.n	8001eae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d11b      	bne.n	8001eae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0210 	mvn.w	r2, #16
 8001e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2208      	movs	r2, #8
 8001e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f870 	bl	8001f7a <HAL_TIM_IC_CaptureCallback>
 8001e9a:	e005      	b.n	8001ea8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f862 	bl	8001f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f873 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10e      	bne.n	8001eda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0201 	mvn.w	r2, #1
 8001ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe fdf3 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d10e      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d107      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f903 	bl	800210c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d10e      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f838 	bl	8001fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d10e      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0220 	mvn.w	r2, #32
 8001f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8cd 	bl	80020f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_Base_SetConfig+0x114>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d027      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d023      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d017      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <TIM_Base_SetConfig+0x128>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_Base_SetConfig+0x12c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0xf8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <TIM_Base_SetConfig+0x124>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0208 	add.w	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0208 	add.w	r2, r3, #8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0208 	add.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6852      	ldr	r2, [r2, #4]
 80021e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d103      	bne.n	80021f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002216:	b580      	push	{r7, lr}
 8002218:	b08c      	sub	sp, #48	; 0x30
 800221a:	af04      	add	r7, sp, #16
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f8de 	bl	80033ec <pvPortMalloc>
 8002230:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002238:	2058      	movs	r0, #88	; 0x58
 800223a:	f001 f8d7 	bl	80033ec <pvPortMalloc>
 800223e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
 800224c:	e005      	b.n	800225a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f001 f9ac 	bl	80035ac <vPortFree>
 8002254:	e001      	b.n	800225a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	2300      	movs	r3, #0
 8002264:	9303      	str	r3, [sp, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f80e 	bl	8002298 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800227c:	69f8      	ldr	r0, [r7, #28]
 800227e:	f000 f8a1 	bl	80023c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002282:	2301      	movs	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e002      	b.n	800228e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800228e:	69bb      	ldr	r3, [r7, #24]
    }
 8002290:	4618      	mov	r0, r3
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	461a      	mov	r2, r3
 80022b0:	21a5      	movs	r1, #165	; 0xa5
 80022b2:	f003 fa77 	bl	80057a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	3b01      	subs	r3, #1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	617b      	str	r3, [r7, #20]
    }
 80022ec:	bf00      	nop
 80022ee:	e7fe      	b.n	80022ee <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01f      	beq.n	8002336 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e012      	b.n	8002322 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	7819      	ldrb	r1, [r3, #0]
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	3334      	adds	r3, #52	; 0x34
 800230c:	460a      	mov	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d9e9      	bls.n	80022fc <prvInitialiseNewTask+0x64>
 8002328:	e000      	b.n	800232c <prvInitialiseNewTask+0x94>
            {
                break;
 800232a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002334:	e003      	b.n	800233e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	2b04      	cmp	r3, #4
 8002342:	d901      	bls.n	8002348 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002344:	2304      	movs	r3, #4
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002352:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	2200      	movs	r2, #0
 8002358:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	3304      	adds	r3, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fefe 	bl	8002160 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	3318      	adds	r3, #24
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fef9 	bl	8002160 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002372:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	f1c3 0205 	rsb	r2, r3, #5
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	3350      	adds	r3, #80	; 0x50
 8002388:	2204      	movs	r2, #4
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa09 	bl	80057a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	3354      	adds	r3, #84	; 0x54
 8002396:	2201      	movs	r2, #1
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fa02 	bl	80057a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	69b8      	ldr	r0, [r7, #24]
 80023a6:	f000 fd4b 	bl	8002e40 <pxPortInitialiseStack>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023cc:	f000 fee2 	bl	8003194 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <prvAddNewTaskToReadyList+0xfc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <prvAddNewTaskToReadyList+0xfc>)
 80023d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <prvAddNewTaskToReadyList+0x100>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023e2:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <prvAddNewTaskToReadyList+0x100>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <prvAddNewTaskToReadyList+0xfc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d110      	bne.n	8002412 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023f0:	f000 fc7c 	bl	8002cec <prvInitialiseTaskLists>
 80023f4:	e00d      	b.n	8002412 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <prvAddNewTaskToReadyList+0x104>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <prvAddNewTaskToReadyList+0x100>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	429a      	cmp	r2, r3
 800240a:	d802      	bhi.n	8002412 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800240c:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <prvAddNewTaskToReadyList+0x100>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <prvAddNewTaskToReadyList+0x108>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <prvAddNewTaskToReadyList+0x108>)
 800241a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <prvAddNewTaskToReadyList+0x108>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <prvAddNewTaskToReadyList+0x94>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 ff3b 	bl	80052a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	461d      	mov	r5, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461c      	mov	r4, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	1ae3      	subs	r3, r4, r3
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	462b      	mov	r3, r5
 8002454:	f001 fa78 	bl	8003948 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f002 ffa8 	bl	80053b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2201      	movs	r2, #1
 8002466:	409a      	lsls	r2, r3
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <prvAddNewTaskToReadyList+0x10c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <prvAddNewTaskToReadyList+0x10c>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <prvAddNewTaskToReadyList+0x110>)
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7ff fe76 	bl	800217a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800248e:	f000 feb1 	bl	80031f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <prvAddNewTaskToReadyList+0x104>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <prvAddNewTaskToReadyList+0x100>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <prvAddNewTaskToReadyList+0x114>)
 80024aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	20000158 	.word	0x20000158
 80024c4:	20000080 	.word	0x20000080
 80024c8:	20000164 	.word	0x20000164
 80024cc:	20000174 	.word	0x20000174
 80024d0:	20000160 	.word	0x20000160
 80024d4:	20000084 	.word	0x20000084
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80024e4:	f000 fe56 	bl	8003194 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <uxTaskPriorityGet+0x18>
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <uxTaskPriorityGet+0x30>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e000      	b.n	80024f6 <uxTaskPriorityGet+0x1a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80024fe:	f000 fe79 	bl	80031f4 <vPortExitCritical>

        return uxReturn;
 8002502:	68bb      	ldr	r3, [r7, #8]
    }
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000080 	.word	0x20000080

08002510 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d90a      	bls.n	800253a <vTaskPrioritySet+0x2a>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	60fb      	str	r3, [r7, #12]
    }
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d901      	bls.n	8002544 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002540:	2304      	movs	r3, #4
 8002542:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002544:	f000 fe26 	bl	8003194 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <vTaskPrioritySet+0x44>
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <vTaskPrioritySet+0x170>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e000      	b.n	8002556 <vTaskPrioritySet+0x46>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4618      	mov	r0, r3
 800255c:	f002 ff6a 	bl	8005434 <SEGGER_SYSVIEW_ShrinkId>
 8002560:	4603      	mov	r3, r0
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	2028      	movs	r0, #40	; 0x28
 8002568:	f002 fae4 	bl	8004b34 <SEGGER_SYSVIEW_RecordU32x2>
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	461a      	mov	r2, r3
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	f001 fa49 	bl	8003a18 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258a:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d06f      	beq.n	8002674 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	d90d      	bls.n	80025b8 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <vTaskPrioritySet+0x170>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d00f      	beq.n	80025c6 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <vTaskPrioritySet+0x170>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d309      	bcc.n	80025c6 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e006      	b.n	80025c6 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <vTaskPrioritySet+0x170>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d101      	bne.n	80025c6 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d102      	bne.n	80025de <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db04      	blt.n	80025f6 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f1c3 0205 	rsb	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6959      	ldr	r1, [r3, #20]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <vTaskPrioritySet+0x174>)
 8002606:	4413      	add	r3, r2
 8002608:	4299      	cmp	r1, r3
 800260a:	d128      	bne.n	800265e <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3304      	adds	r3, #4
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fdd6 	bl	80021c2 <uxListRemove>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800261c:	2201      	movs	r2, #1
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <vTaskPrioritySet+0x178>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4013      	ands	r3, r2
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <vTaskPrioritySet+0x178>)
 800262e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <vTaskPrioritySet+0x178>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <vTaskPrioritySet+0x178>)
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <vTaskPrioritySet+0x174>)
 8002650:	441a      	add	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3304      	adds	r3, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7ff fd8e 	bl	800217a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <vTaskPrioritySet+0x17c>)
 8002666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002674:	f000 fdbe 	bl	80031f4 <vPortExitCritical>
    }
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000080 	.word	0x20000080
 8002684:	20000084 	.word	0x20000084
 8002688:	20000160 	.word	0x20000160
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <vTaskStartScheduler+0x98>)
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	2282      	movs	r2, #130	; 0x82
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <vTaskStartScheduler+0x9c>)
 80026a4:	4822      	ldr	r0, [pc, #136]	; (8002730 <vTaskStartScheduler+0xa0>)
 80026a6:	f7ff fdb6 	bl	8002216 <xTaskCreate>
 80026aa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d124      	bne.n	80026fc <vTaskStartScheduler+0x6c>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	60bb      	str	r3, [r7, #8]
    }
 80026c4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <vTaskStartScheduler+0xa4>)
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <vTaskStartScheduler+0xa8>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <vTaskStartScheduler+0xac>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <vTaskStartScheduler+0xb0>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <vTaskStartScheduler+0x98>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d102      	bne.n	80026ec <vTaskStartScheduler+0x5c>
 80026e6:	f002 fdc3 	bl	8005270 <SEGGER_SYSVIEW_OnIdle>
 80026ea:	e004      	b.n	80026f6 <vTaskStartScheduler+0x66>
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <vTaskStartScheduler+0xb0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fe1b 	bl	800532c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026f6:	f000 fc2d 	bl	8002f54 <xPortStartScheduler>
 80026fa:	e00e      	b.n	800271a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d10a      	bne.n	800271a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	607b      	str	r3, [r7, #4]
    }
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <vTaskStartScheduler+0xb4>)
 800271c:	681b      	ldr	r3, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000017c 	.word	0x2000017c
 800272c:	080057dc 	.word	0x080057dc
 8002730:	08002cbd 	.word	0x08002cbd
 8002734:	20000178 	.word	0x20000178
 8002738:	20000164 	.word	0x20000164
 800273c:	2000015c 	.word	0x2000015c
 8002740:	20000080 	.word	0x20000080
 8002744:	2000000c 	.word	0x2000000c

08002748 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <vTaskSuspendAll+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a03      	ldr	r2, [pc, #12]	; (8002760 <vTaskSuspendAll+0x18>)
 8002754:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000180 	.word	0x20000180

08002764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <xTaskResumeAll+0x11c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <xTaskResumeAll+0x2c>
        __asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	603b      	str	r3, [r7, #0]
    }
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002790:	f000 fd00 	bl	8003194 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002794:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <xTaskResumeAll+0x11c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3b01      	subs	r3, #1
 800279a:	4a39      	ldr	r2, [pc, #228]	; (8002880 <xTaskResumeAll+0x11c>)
 800279c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <xTaskResumeAll+0x11c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d165      	bne.n	8002872 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <xTaskResumeAll+0x120>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d061      	beq.n	8002872 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ae:	e032      	b.n	8002816 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <xTaskResumeAll+0x124>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3318      	adds	r3, #24
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fd00 	bl	80021c2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fcfb 	bl	80021c2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fdee 	bl	80053b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2201      	movs	r2, #1
 80027da:	409a      	lsls	r2, r3
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <xTaskResumeAll+0x128>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <xTaskResumeAll+0x128>)
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <xTaskResumeAll+0x12c>)
 80027f4:	441a      	add	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff fcbc 	bl	800217a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <xTaskResumeAll+0x130>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d302      	bcc.n	8002816 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <xTaskResumeAll+0x134>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <xTaskResumeAll+0x124>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1c8      	bne.n	80027b0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002824:	f000 fae0 	bl	8002de8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <xTaskResumeAll+0x138>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d010      	beq.n	8002856 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002834:	f000 f91c 	bl	8002a70 <xTaskIncrementTick>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <xTaskResumeAll+0x134>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f1      	bne.n	8002834 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <xTaskResumeAll+0x138>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <xTaskResumeAll+0x134>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800285e:	2301      	movs	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <xTaskResumeAll+0x13c>)
 8002864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002872:	f000 fcbf 	bl	80031f4 <vPortExitCritical>

    return xAlreadyYielded;
 8002876:	68bb      	ldr	r3, [r7, #8]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000180 	.word	0x20000180
 8002884:	20000158 	.word	0x20000158
 8002888:	20000118 	.word	0x20000118
 800288c:	20000160 	.word	0x20000160
 8002890:	20000084 	.word	0x20000084
 8002894:	20000080 	.word	0x20000080
 8002898:	2000016c 	.word	0x2000016c
 800289c:	20000168 	.word	0x20000168
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028aa:	f000 fd5f 	bl	800336c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <xTaskGetTickCountFromISR+0x20>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028b8:	683b      	ldr	r3, [r7, #0]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000015c 	.word	0x2000015c

080028c8 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80028c8:	b480      	push	{r7}
 80028ca:	b08b      	sub	sp, #44	; 0x2c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d05b      	beq.n	8002996 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	3308      	adds	r3, #8
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d104      	bne.n	8002902 <prvSearchForNameWithinSingleList+0x3a>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	3308      	adds	r3, #8
 8002920:	429a      	cmp	r2, r3
 8002922:	d104      	bne.n	800292e <prvSearchForNameWithinSingleList+0x66>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	e01c      	b.n	800297a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	4413      	add	r3, r2
 8002946:	3334      	adds	r3, #52	; 0x34
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	7afa      	ldrb	r2, [r7, #11]
 8002956:	429a      	cmp	r2, r3
 8002958:	d002      	beq.n	8002960 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 800295a:	2301      	movs	r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e006      	b.n	800296e <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	3301      	adds	r3, #1
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b09      	cmp	r3, #9
 800297e:	d9df      	bls.n	8002940 <prvSearchForNameWithinSingleList+0x78>
 8002980:	e000      	b.n	8002984 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002982:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	429a      	cmp	r2, r3
 8002990:	d1bb      	bne.n	800290a <prvSearchForNameWithinSingleList+0x42>
 8002992:	e000      	b.n	8002996 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002994:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002998:	4618      	mov	r0, r3
 800299a:	372c      	adds	r7, #44	; 0x2c
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 80029ac:	2305      	movs	r3, #5
 80029ae:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fd fc57 	bl	8000264 <strlen>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	d90a      	bls.n	80029d2 <xTaskGetHandle+0x2e>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60fb      	str	r3, [r7, #12]
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 80029d2:	f7ff feb9 	bl	8002748 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3b01      	subs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <xTaskGetHandle+0xb8>)
 80029e8:	4413      	add	r3, r2
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff6b 	bl	80028c8 <prvSearchForNameWithinSingleList>
 80029f2:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <xTaskGetHandle+0x32>
 8002a00:	e000      	b.n	8002a04 <xTaskGetHandle+0x60>
                    break;
 8002a02:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <xTaskGetHandle+0xbc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff59 	bl	80028c8 <prvSearchForNameWithinSingleList>
 8002a16:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <xTaskGetHandle+0xc0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff4f 	bl	80028c8 <prvSearchForNameWithinSingleList>
 8002a2a:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <xTaskGetHandle+0xc4>)
 8002a36:	f7ff ff47 	bl	80028c8 <prvSearchForNameWithinSingleList>
 8002a3a:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4809      	ldr	r0, [pc, #36]	; (8002a6c <xTaskGetHandle+0xc8>)
 8002a46:	f7ff ff3f 	bl	80028c8 <prvSearchForNameWithinSingleList>
 8002a4a:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8002a4c:	f7ff fe8a 	bl	8002764 <xTaskResumeAll>

        return pxTCB;
 8002a50:	693b      	ldr	r3, [r7, #16]
    }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000084 	.word	0x20000084
 8002a60:	20000110 	.word	0x20000110
 8002a64:	20000114 	.word	0x20000114
 8002a68:	20000144 	.word	0x20000144
 8002a6c:	2000012c 	.word	0x2000012c

08002a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a7a:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <xTaskIncrementTick+0x14c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 8092 	bne.w	8002ba8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <xTaskIncrementTick+0x150>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a8c:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <xTaskIncrementTick+0x150>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d120      	bne.n	8002ada <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <xTaskIncrementTick+0x154>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	603b      	str	r3, [r7, #0]
    }
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <xTaskIncrementTick+0x46>
 8002ab8:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <xTaskIncrementTick+0x154>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <xTaskIncrementTick+0x158>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a40      	ldr	r2, [pc, #256]	; (8002bc4 <xTaskIncrementTick+0x154>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4a40      	ldr	r2, [pc, #256]	; (8002bc8 <xTaskIncrementTick+0x158>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <xTaskIncrementTick+0x15c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <xTaskIncrementTick+0x15c>)
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	f000 f987 	bl	8002de8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <xTaskIncrementTick+0x160>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d34c      	bcc.n	8002b7e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <xTaskIncrementTick+0x154>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <xTaskIncrementTick+0x160>)
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	601a      	str	r2, [r3, #0]
                    break;
 8002af6:	e042      	b.n	8002b7e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <xTaskIncrementTick+0x154>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d203      	bcs.n	8002b18 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b10:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <xTaskIncrementTick+0x160>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b16:	e032      	b.n	8002b7e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fb50 	bl	80021c2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3318      	adds	r3, #24
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fb47 	bl	80021c2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 fc3a 	bl	80053b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <xTaskIncrementTick+0x164>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <xTaskIncrementTick+0x164>)
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <xTaskIncrementTick+0x168>)
 8002b5c:	441a      	add	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff fb08 	bl	800217a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <xTaskIncrementTick+0x16c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3b5      	bcc.n	8002ae4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7c:	e7b2      	b.n	8002ae4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <xTaskIncrementTick+0x16c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4914      	ldr	r1, [pc, #80]	; (8002bd8 <xTaskIncrementTick+0x168>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d901      	bls.n	8002b9a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <xTaskIncrementTick+0x170>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e004      	b.n	8002bb2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <xTaskIncrementTick+0x174>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <xTaskIncrementTick+0x174>)
 8002bb0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bb2:	697b      	ldr	r3, [r7, #20]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000180 	.word	0x20000180
 8002bc0:	2000015c 	.word	0x2000015c
 8002bc4:	20000110 	.word	0x20000110
 8002bc8:	20000114 	.word	0x20000114
 8002bcc:	20000170 	.word	0x20000170
 8002bd0:	20000178 	.word	0x20000178
 8002bd4:	20000160 	.word	0x20000160
 8002bd8:	20000084 	.word	0x20000084
 8002bdc:	20000080 	.word	0x20000080
 8002be0:	2000016c 	.word	0x2000016c
 8002be4:	20000168 	.word	0x20000168

08002be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <vTaskSwitchContext+0xbc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <vTaskSwitchContext+0xc0>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002bfc:	e04d      	b.n	8002c9a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <vTaskSwitchContext+0xc0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <vTaskSwitchContext+0xc4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	f1c3 031f 	rsb	r3, r3, #31
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	4925      	ldr	r1, [pc, #148]	; (8002cb0 <vTaskSwitchContext+0xc8>)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	607b      	str	r3, [r7, #4]
    }
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <vTaskSwitchContext+0x5a>
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <vTaskSwitchContext+0xc8>)
 8002c50:	4413      	add	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3308      	adds	r3, #8
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d104      	bne.n	8002c74 <vTaskSwitchContext+0x8c>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c7c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <vTaskSwitchContext+0xd0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d102      	bne.n	8002c90 <vTaskSwitchContext+0xa8>
 8002c8a:	f002 faf1 	bl	8005270 <SEGGER_SYSVIEW_OnIdle>
}
 8002c8e:	e004      	b.n	8002c9a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 fb49 	bl	800532c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000180 	.word	0x20000180
 8002ca8:	2000016c 	.word	0x2000016c
 8002cac:	20000160 	.word	0x20000160
 8002cb0:	20000084 	.word	0x20000084
 8002cb4:	20000080 	.word	0x20000080
 8002cb8:	2000017c 	.word	0x2000017c

08002cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cc4:	f000 f852 	bl	8002d6c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <prvIdleTask+0x28>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d9f9      	bls.n	8002cc4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <prvIdleTask+0x2c>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ce0:	e7f0      	b.n	8002cc4 <prvIdleTask+0x8>
 8002ce2:	bf00      	nop
 8002ce4:	20000084 	.word	0x20000084
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	e00c      	b.n	8002d12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <prvInitialiseTaskLists+0x60>)
 8002d04:	4413      	add	r3, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa0a 	bl	8002120 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d9ef      	bls.n	8002cf8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <prvInitialiseTaskLists+0x64>)
 8002d1a:	f7ff fa01 	bl	8002120 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d1e:	480d      	ldr	r0, [pc, #52]	; (8002d54 <prvInitialiseTaskLists+0x68>)
 8002d20:	f7ff f9fe 	bl	8002120 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <prvInitialiseTaskLists+0x6c>)
 8002d26:	f7ff f9fb 	bl	8002120 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <prvInitialiseTaskLists+0x70>)
 8002d2c:	f7ff f9f8 	bl	8002120 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <prvInitialiseTaskLists+0x74>)
 8002d32:	f7ff f9f5 	bl	8002120 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <prvInitialiseTaskLists+0x78>)
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <prvInitialiseTaskLists+0x64>)
 8002d3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <prvInitialiseTaskLists+0x7c>)
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <prvInitialiseTaskLists+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000084 	.word	0x20000084
 8002d50:	200000e8 	.word	0x200000e8
 8002d54:	200000fc 	.word	0x200000fc
 8002d58:	20000118 	.word	0x20000118
 8002d5c:	2000012c 	.word	0x2000012c
 8002d60:	20000144 	.word	0x20000144
 8002d64:	20000110 	.word	0x20000110
 8002d68:	20000114 	.word	0x20000114

08002d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d72:	e019      	b.n	8002da8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d74:	f000 fa0e 	bl	8003194 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <prvCheckTasksWaitingTermination+0x50>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fa1c 	bl	80021c2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <prvCheckTasksWaitingTermination+0x54>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <prvCheckTasksWaitingTermination+0x54>)
 8002d92:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002d9c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d9e:	f000 fa29 	bl	80031f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f810 	bl	8002dc8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e1      	bne.n	8002d74 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000012c 	.word	0x2000012c
 8002dc0:	20000158 	.word	0x20000158
 8002dc4:	20000140 	.word	0x20000140

08002dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fbe9 	bl	80035ac <vPortFree>
                vPortFree( pxTCB );
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fbe6 	bl	80035ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <prvResetNextTaskUnblockTime+0x30>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <prvResetNextTaskUnblockTime+0x34>)
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dfe:	e005      	b.n	8002e0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <prvResetNextTaskUnblockTime+0x30>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <prvResetNextTaskUnblockTime+0x34>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000110 	.word	0x20000110
 8002e1c:	20000178 	.word	0x20000178

08002e20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <xTaskGetCurrentTaskHandle+0x1c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002e2c:	687b      	ldr	r3, [r7, #4]
    }
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000080 	.word	0x20000080

08002e40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3b04      	subs	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <pxPortInitialiseStack+0x64>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b14      	subs	r3, #20
 8002e7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b04      	subs	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f06f 0202 	mvn.w	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b20      	subs	r3, #32
 8002e94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	08002ea9 	.word	0x08002ea9

08002ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <prvTaskExitError+0x54>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d00a      	beq.n	8002ed2 <prvTaskExitError+0x2a>
        __asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60fb      	str	r3, [r7, #12]
    }
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <prvTaskExitError+0x28>
        __asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	60bb      	str	r3, [r7, #8]
    }
 8002ee4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ee6:	bf00      	nop
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0fc      	beq.n	8002ee8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000010 	.word	0x20000010

08002f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <pxCurrentTCBConst2>)
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	6808      	ldr	r0, [r1, #0]
 8002f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0a:	f380 8809 	msr	PSP, r0
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f380 8811 	msr	BASEPRI, r0
 8002f1a:	4770      	bx	lr
 8002f1c:	f3af 8000 	nop.w

08002f20 <pxCurrentTCBConst2>:
 8002f20:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop

08002f28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f28:	4808      	ldr	r0, [pc, #32]	; (8002f4c <prvPortStartFirstTask+0x24>)
 8002f2a:	6800      	ldr	r0, [r0, #0]
 8002f2c:	6800      	ldr	r0, [r0, #0]
 8002f2e:	f380 8808 	msr	MSP, r0
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8814 	msr	CONTROL, r0
 8002f3a:	b662      	cpsie	i
 8002f3c:	b661      	cpsie	f
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	df00      	svc	0
 8002f48:	bf00      	nop
 8002f4a:	0000      	.short	0x0000
 8002f4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop

08002f54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f5a:	4b46      	ldr	r3, [pc, #280]	; (8003074 <xPortStartScheduler+0x120>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <xPortStartScheduler+0x124>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10a      	bne.n	8002f7a <xPortStartScheduler+0x26>
        __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	613b      	str	r3, [r7, #16]
    }
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <xPortStartScheduler+0x120>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3f      	ldr	r2, [pc, #252]	; (800307c <xPortStartScheduler+0x128>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10a      	bne.n	8002f9a <xPortStartScheduler+0x46>
        __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60fb      	str	r3, [r7, #12]
    }
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <xPortStartScheduler+0x12c>)
 8002f9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <xPortStartScheduler+0x130>)
 8002fc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <xPortStartScheduler+0x134>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fc8:	e009      	b.n	8002fde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <xPortStartScheduler+0x134>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <xPortStartScheduler+0x134>)
 8002fd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d0ef      	beq.n	8002fca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <xPortStartScheduler+0x134>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d00a      	beq.n	800300c <xPortStartScheduler+0xb8>
        __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60bb      	str	r3, [r7, #8]
    }
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <xPortStartScheduler+0x134>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <xPortStartScheduler+0x134>)
 8003014:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <xPortStartScheduler+0x134>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <xPortStartScheduler+0x134>)
 8003020:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <xPortStartScheduler+0x138>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <xPortStartScheduler+0x138>)
 8003030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003034:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <xPortStartScheduler+0x138>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <xPortStartScheduler+0x138>)
 800303c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003040:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003042:	f000 f963 	bl	800330c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <xPortStartScheduler+0x13c>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800304c:	f000 f982 	bl	8003354 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003050:	4b10      	ldr	r3, [pc, #64]	; (8003094 <xPortStartScheduler+0x140>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <xPortStartScheduler+0x140>)
 8003056:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800305a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800305c:	f7ff ff64 	bl	8002f28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003060:	f7ff fdc2 	bl	8002be8 <vTaskSwitchContext>
    prvTaskExitError();
 8003064:	f7ff ff20 	bl	8002ea8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	410fc271 	.word	0x410fc271
 800307c:	410fc270 	.word	0x410fc270
 8003080:	e000e400 	.word	0xe000e400
 8003084:	20000184 	.word	0x20000184
 8003088:	20000188 	.word	0x20000188
 800308c:	e000ed20 	.word	0xe000ed20
 8003090:	20000010 	.word	0x20000010
 8003094:	e000ef34 	.word	0xe000ef34

08003098 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <vInitPrioGroupValue+0xe4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a37      	ldr	r2, [pc, #220]	; (8003180 <vInitPrioGroupValue+0xe8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10a      	bne.n	80030be <vInitPrioGroupValue+0x26>
        __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	613b      	str	r3, [r7, #16]
    }
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <vInitPrioGroupValue+0xe4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <vInitPrioGroupValue+0xec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10a      	bne.n	80030de <vInitPrioGroupValue+0x46>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	60fb      	str	r3, [r7, #12]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <vInitPrioGroupValue+0xf0>)
 80030e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <vInitPrioGroupValue+0xf4>)
 8003104:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800310c:	e009      	b.n	8003122 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003116:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d0ef      	beq.n	800310e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	d00a      	beq.n	8003150 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	60bb      	str	r3, [r7, #8]
    }
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003158:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <vInitPrioGroupValue+0xf8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <vInitPrioGroupValue+0xf8>)
 8003164:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000ed00 	.word	0xe000ed00
 8003180:	410fc271 	.word	0x410fc271
 8003184:	410fc270 	.word	0x410fc270
 8003188:	e000e400 	.word	0xe000e400
 800318c:	20000184 	.word	0x20000184
 8003190:	20000188 	.word	0x20000188

08003194 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	607b      	str	r3, [r7, #4]
    }
 80031ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <vPortEnterCritical+0x58>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <vPortEnterCritical+0x58>)
 80031b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <vPortEnterCritical+0x58>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10f      	bne.n	80031e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <vPortEnterCritical+0x5c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	603b      	str	r3, [r7, #0]
    }
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <vPortEnterCritical+0x4a>
    }
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000010 	.word	0x20000010
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <vPortExitCritical+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <vPortExitCritical+0x24>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	607b      	str	r3, [r7, #4]
    }
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <vPortExitCritical+0x50>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <vPortExitCritical+0x50>)
 8003220:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <vPortExitCritical+0x50>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <vPortExitCritical+0x42>
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003234:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000010 	.word	0x20000010
	...

08003250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003250:	f3ef 8009 	mrs	r0, PSP
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <pxCurrentTCBConst>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f01e 0f10 	tst.w	lr, #16
 8003260:	bf08      	it	eq
 8003262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326a:	6010      	str	r0, [r2, #0]
 800326c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003274:	f380 8811 	msr	BASEPRI, r0
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f7ff fcb2 	bl	8002be8 <vTaskSwitchContext>
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f380 8811 	msr	BASEPRI, r0
 800328c:	bc09      	pop	{r0, r3}
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003296:	f01e 0f10 	tst.w	lr, #16
 800329a:	bf08      	it	eq
 800329c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032a0:	f380 8809 	msr	PSP, r0
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst>:
 80032b0:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
        __asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
    }
 80032d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80032d2:	f001 ff53 	bl	800517c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032d6:	f7ff fbcb 	bl	8002a70 <xTaskIncrementTick>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80032e0:	f001 ffaa 	bl	8005238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <SysTick_Handler+0x50>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e001      	b.n	80032f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80032ee:	f001 ff87 	bl	8005200 <SEGGER_SYSVIEW_RecordExitISR>
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f383 8811 	msr	BASEPRI, r3
    }
 80032fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <vPortSetupTimerInterrupt+0x38>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vPortSetupTimerInterrupt+0x3c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <vPortSetupTimerInterrupt+0x40>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <vPortSetupTimerInterrupt+0x44>)
 800332a:	3b01      	subs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	20000000 	.word	0x20000000
 800334c:	10624dd3 	.word	0x10624dd3
 8003350:	e000e014 	.word	0xe000e014

08003354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003364 <vPortEnableVFP+0x10>
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800335e:	6001      	str	r1, [r0, #0]
 8003360:	4770      	bx	lr
 8003362:	0000      	.short	0x0000
 8003364:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop

0800336c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003372:	f3ef 8305 	mrs	r3, IPSR
 8003376:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d914      	bls.n	80033a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <vPortValidateInterruptPriority+0x70>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <vPortValidateInterruptPriority+0x74>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	7afa      	ldrb	r2, [r7, #11]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20a      	bcs.n	80033a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <vPortValidateInterruptPriority+0x78>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <vPortValidateInterruptPriority+0x7c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d90a      	bls.n	80033ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	603b      	str	r3, [r7, #0]
    }
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <vPortValidateInterruptPriority+0x60>
    }
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e3f0 	.word	0xe000e3f0
 80033e0:	20000184 	.word	0x20000184
 80033e4:	e000ed0c 	.word	0xe000ed0c
 80033e8:	20000188 	.word	0x20000188

080033ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80033f8:	f7ff f9a6 	bl	8002748 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033fc:	4b65      	ldr	r3, [pc, #404]	; (8003594 <pvPortMalloc+0x1a8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003404:	f000 f934 	bl	8003670 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <pvPortMalloc+0x1ac>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 80a7 	bne.w	8003564 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d02d      	beq.n	8003478 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800341c:	2208      	movs	r2, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d227      	bcs.n	8003478 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003428:	2208      	movs	r2, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d021      	beq.n	800347e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f023 0307 	bic.w	r3, r3, #7
 8003440:	3308      	adds	r3, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d214      	bcs.n	8003472 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	3308      	adds	r3, #8
 8003450:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <pvPortMalloc+0x92>
        __asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	617b      	str	r3, [r7, #20]
    }
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003476:	e002      	b.n	800347e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e000      	b.n	8003480 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800347e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d06e      	beq.n	8003564 <pvPortMalloc+0x178>
 8003486:	4b45      	ldr	r3, [pc, #276]	; (800359c <pvPortMalloc+0x1b0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d869      	bhi.n	8003564 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003490:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <pvPortMalloc+0x1b4>)
 8003492:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003494:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <pvPortMalloc+0x1b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800349a:	e004      	b.n	80034a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d903      	bls.n	80034b8 <pvPortMalloc+0xcc>
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f1      	bne.n	800349c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <pvPortMalloc+0x1a8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	429a      	cmp	r2, r3
 80034c0:	d050      	beq.n	8003564 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4413      	add	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	2308      	movs	r3, #8
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d91f      	bls.n	8003524 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <pvPortMalloc+0x120>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	613b      	str	r3, [r7, #16]
    }
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800351e:	69b8      	ldr	r0, [r7, #24]
 8003520:	f000 f908 	bl	8003734 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <pvPortMalloc+0x1b0>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	4a1b      	ldr	r2, [pc, #108]	; (800359c <pvPortMalloc+0x1b0>)
 8003530:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <pvPortMalloc+0x1b0>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <pvPortMalloc+0x1b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d203      	bcs.n	8003546 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <pvPortMalloc+0x1b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <pvPortMalloc+0x1b8>)
 8003544:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <pvPortMalloc+0x1ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	431a      	orrs	r2, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <pvPortMalloc+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <pvPortMalloc+0x1bc>)
 8003562:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003564:	f7ff f8fe 	bl	8002764 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <pvPortMalloc+0x19c>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60fb      	str	r3, [r7, #12]
    }
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <pvPortMalloc+0x19a>
    return pvReturn;
 8003588:	69fb      	ldr	r3, [r7, #28]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20019194 	.word	0x20019194
 8003598:	200191a8 	.word	0x200191a8
 800359c:	20019198 	.word	0x20019198
 80035a0:	2001918c 	.word	0x2001918c
 80035a4:	2001919c 	.word	0x2001919c
 80035a8:	200191a0 	.word	0x200191a0

080035ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04d      	beq.n	800365a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035be:	2308      	movs	r3, #8
 80035c0:	425b      	negs	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4413      	add	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <vPortFree+0xb8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <vPortFree+0x44>
        __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <vPortFree+0x62>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60bb      	str	r3, [r7, #8]
    }
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <vPortFree+0xb8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01e      	beq.n	800365a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11a      	bne.n	800365a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <vPortFree+0xb8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003634:	f7ff f888 	bl	8002748 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <vPortFree+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <vPortFree+0xbc>)
 8003644:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f000 f874 	bl	8003734 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <vPortFree+0xc0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a06      	ldr	r2, [pc, #24]	; (800366c <vPortFree+0xc0>)
 8003654:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003656:	f7ff f885 	bl	8002764 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200191a8 	.word	0x200191a8
 8003668:	20019198 	.word	0x20019198
 800366c:	200191a4 	.word	0x200191a4

08003670 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003676:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800367a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <prvHeapInit+0xac>)
 800367e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3307      	adds	r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <prvHeapInit+0xac>)
 80036a0:	4413      	add	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <prvHeapInit+0xb0>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <prvHeapInit+0xb0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80036bc:	2208      	movs	r2, #8
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <prvHeapInit+0xb4>)
 80036d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <prvHeapInit+0xb4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <prvHeapInit+0xb4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <prvHeapInit+0xb4>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <prvHeapInit+0xb8>)
 80036fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <prvHeapInit+0xbc>)
 8003706:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <prvHeapInit+0xc0>)
 800370a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800370e:	601a      	str	r2, [r3, #0]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	2000018c 	.word	0x2000018c
 8003720:	2001918c 	.word	0x2001918c
 8003724:	20019194 	.word	0x20019194
 8003728:	2001919c 	.word	0x2001919c
 800372c:	20019198 	.word	0x20019198
 8003730:	200191a8 	.word	0x200191a8

08003734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <prvInsertBlockIntoFreeList+0xac>)
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e002      	b.n	8003748 <prvInsertBlockIntoFreeList+0x14>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d8f7      	bhi.n	8003742 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d108      	bne.n	8003776 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	441a      	add	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	441a      	add	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d118      	bne.n	80037bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d00d      	beq.n	80037b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e008      	b.n	80037c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvInsertBlockIntoFreeList+0xb0>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e003      	b.n	80037c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d002      	beq.n	80037d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2001918c 	.word	0x2001918c
 80037e4:	20019194 	.word	0x20019194

080037e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <_cbSendSystemDesc+0x14>)
 80037ee:	f001 fc6f 	bl	80050d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037f2:	4803      	ldr	r0, [pc, #12]	; (8003800 <_cbSendSystemDesc+0x18>)
 80037f4:	f001 fc6c 	bl	80050d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	080057e4 	.word	0x080057e4
 8003800:	08005828 	.word	0x08005828

08003804 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SEGGER_SYSVIEW_Conf+0x20>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SEGGER_SYSVIEW_Conf+0x20>)
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SEGGER_SYSVIEW_Conf+0x24>)
 8003812:	4a06      	ldr	r2, [pc, #24]	; (800382c <SEGGER_SYSVIEW_Conf+0x28>)
 8003814:	f001 f8e0 	bl	80049d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003818:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800381c:	f001 f920 	bl	8004a60 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000000 	.word	0x20000000
 8003828:	080037e9 	.word	0x080037e9
 800382c:	080058c8 	.word	0x080058c8

08003830 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e033      	b.n	80038a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800383c:	491e      	ldr	r1, [pc, #120]	; (80038b8 <_cbSendTaskList+0x88>)
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	491a      	ldr	r1, [pc, #104]	; (80038b8 <_cbSendTaskList+0x88>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3304      	adds	r3, #4
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	4c16      	ldr	r4, [pc, #88]	; (80038b8 <_cbSendTaskList+0x88>)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4423      	add	r3, r4
 800386c:	3308      	adds	r3, #8
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	4d11      	ldr	r5, [pc, #68]	; (80038b8 <_cbSendTaskList+0x88>)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	442b      	add	r3, r5
 800387e:	330c      	adds	r3, #12
 8003880:	681d      	ldr	r5, [r3, #0]
 8003882:	4e0d      	ldr	r6, [pc, #52]	; (80038b8 <_cbSendTaskList+0x88>)
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4433      	add	r3, r6
 8003890:	3310      	adds	r3, #16
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	462b      	mov	r3, r5
 8003898:	4622      	mov	r2, r4
 800389a:	f000 f92d 	bl	8003af8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3301      	adds	r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <_cbSendTaskList+0x8c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3c6      	bcc.n	800383c <_cbSendTaskList+0xc>
  }
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	200191ac 	.word	0x200191ac
 80038bc:	2001924c 	.word	0x2001924c

080038c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038c8:	f7fe ffec 	bl	80028a4 <xTaskGetTickCountFromISR>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2200      	movs	r2, #0
 80038d0:	469a      	mov	sl, r3
 80038d2:	4693      	mov	fp, r2
 80038d4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	f04f 0a00 	mov.w	sl, #0
 80038e4:	f04f 0b00 	mov.w	fp, #0
 80038e8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80038ec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80038f0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80038f4:	4652      	mov	r2, sl
 80038f6:	465b      	mov	r3, fp
 80038f8:	1a14      	subs	r4, r2, r0
 80038fa:	eb63 0501 	sbc.w	r5, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	00ab      	lsls	r3, r5, #2
 8003908:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800390c:	00a2      	lsls	r2, r4, #2
 800390e:	4614      	mov	r4, r2
 8003910:	461d      	mov	r5, r3
 8003912:	eb14 0800 	adds.w	r8, r4, r0
 8003916:	eb45 0901 	adc.w	r9, r5, r1
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392e:	4690      	mov	r8, r2
 8003930:	4699      	mov	r9, r3
 8003932:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003936:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003948 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003956:	2205      	movs	r2, #5
 8003958:	492b      	ldr	r1, [pc, #172]	; (8003a08 <SYSVIEW_AddTask+0xc0>)
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f001 ff04 	bl	8005768 <memcmp>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04b      	beq.n	80039fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b07      	cmp	r3, #7
 800396c:	d903      	bls.n	8003976 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800396e:	4828      	ldr	r0, [pc, #160]	; (8003a10 <SYSVIEW_AddTask+0xc8>)
 8003970:	f001 fe4c 	bl	800560c <SEGGER_SYSVIEW_Warn>
    return;
 8003974:	e044      	b.n	8003a00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003976:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4926      	ldr	r1, [pc, #152]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4921      	ldr	r1, [pc, #132]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3304      	adds	r3, #4
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	491b      	ldr	r1, [pc, #108]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3308      	adds	r3, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4916      	ldr	r1, [pc, #88]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	330c      	adds	r3, #12
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4910      	ldr	r1, [pc, #64]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3310      	adds	r3, #16
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f87e 	bl	8003af8 <SYSVIEW_SendTaskInfo>
 80039fc:	e000      	b.n	8003a00 <SYSVIEW_AddTask+0xb8>
    return;
 80039fe:	bf00      	nop

}
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08005838 	.word	0x08005838
 8003a0c:	2001924c 	.word	0x2001924c
 8003a10:	08005840 	.word	0x08005840
 8003a14:	200191ac 	.word	0x200191ac

08003a18 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a26:	2205      	movs	r2, #5
 8003a28:	4930      	ldr	r1, [pc, #192]	; (8003aec <SYSVIEW_UpdateTask+0xd4>)
 8003a2a:	68b8      	ldr	r0, [r7, #8]
 8003a2c:	f001 fe9c 	bl	8005768 <memcmp>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d056      	beq.n	8003ae4 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e00d      	b.n	8003a58 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003a3c:	492c      	ldr	r1, [pc, #176]	; (8003af0 <SYSVIEW_UpdateTask+0xd8>)
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d008      	beq.n	8003a64 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <SYSVIEW_UpdateTask+0xdc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d3ec      	bcc.n	8003a3c <SYSVIEW_UpdateTask+0x24>
 8003a62:	e000      	b.n	8003a66 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003a64:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <SYSVIEW_UpdateTask+0xdc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d230      	bcs.n	8003ad2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003a70:	491f      	ldr	r1, [pc, #124]	; (8003af0 <SYSVIEW_UpdateTask+0xd8>)
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3304      	adds	r3, #4
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003a84:	491a      	ldr	r1, [pc, #104]	; (8003af0 <SYSVIEW_UpdateTask+0xd8>)
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3308      	adds	r3, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003a98:	4915      	ldr	r1, [pc, #84]	; (8003af0 <SYSVIEW_UpdateTask+0xd8>)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003aac:	4910      	ldr	r1, [pc, #64]	; (8003af0 <SYSVIEW_UpdateTask+0xd8>)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3310      	adds	r3, #16
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f814 	bl	8003af8 <SYSVIEW_SendTaskInfo>
 8003ad0:	e009      	b.n	8003ae6 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff ff33 	bl	8003948 <SYSVIEW_AddTask>
 8003ae2:	e000      	b.n	8003ae6 <SYSVIEW_UpdateTask+0xce>
    return;
 8003ae4:	bf00      	nop
  }
}
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	08005838 	.word	0x08005838
 8003af0:	200191ac 	.word	0x200191ac
 8003af4:	2001924c 	.word	0x2001924c

08003af8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	2214      	movs	r2, #20
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fe48 	bl	80057a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f9d7 	bl	8004ee0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b32:	bf00      	nop
 8003b34:	3728      	adds	r7, #40	; 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <__NVIC_EnableIRQ>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	; (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003bd2:	f001 fd77 	bl	80056c4 <SEGGER_SYSVIEW_IsStarted>
 8003bd6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003bde:	f001 f803 	bl	8004be8 <SEGGER_SYSVIEW_Start>
  }
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <_cbOnUARTRx+0x3c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d806      	bhi.n	8003c0c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <_cbOnUARTRx+0x3c>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <_cbOnUARTRx+0x3c>)
 8003c08:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003c0a:	e009      	b.n	8003c20 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003c0c:	f7ff ffde 	bl	8003bcc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <_cbOnUARTRx+0x3c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f000 fb9a 	bl	8004354 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003c20:	bf00      	nop
}
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000014 	.word	0x20000014

08003c2c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <_cbOnUARTTx+0x5c>)
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d80f      	bhi.n	8003c5c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <_cbOnUARTTx+0x5c>)
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <_cbOnUARTTx+0x60>)
 8003c44:	5c9a      	ldrb	r2, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <_cbOnUARTTx+0x5c>)
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <_cbOnUARTTx+0x5c>)
 8003c54:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c5a:	e00f      	b.n	8003c7c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <_cbOnUARTTx+0x5c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa19 	bl	800409c <SEGGER_RTT_ReadUpBufferNoLock>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da02      	bge.n	8003c7a <_cbOnUARTTx+0x4e>
    r = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e000      	b.n	8003c7c <_cbOnUARTTx+0x50>
  }
Done:
 8003c7a:	bf00      	nop
  return r;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000014 	.word	0x20000014
 8003c8c:	080058d0 	.word	0x080058d0

08003c90 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <SEGGER_UART_init+0x1c>)
 8003c9a:	4905      	ldr	r1, [pc, #20]	; (8003cb0 <SEGGER_UART_init+0x20>)
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f863 	bl	8003d68 <HIF_UART_Init>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	08003bed 	.word	0x08003bed
 8003cb0:	08003c2d 	.word	0x08003c2d

08003cb4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003cba:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <USART2_IRQHandler+0x80>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d011      	beq.n	8003cee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <USART2_IRQHandler+0x84>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 030b 	and.w	r3, r3, #11
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <USART2_IRQHandler+0x88>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <USART2_IRQHandler+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	79fa      	ldrb	r2, [r7, #7]
 8003cea:	4610      	mov	r0, r2
 8003cec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <USART2_IRQHandler+0x8c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <USART2_IRQHandler+0x8c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1dfa      	adds	r2, r7, #7
 8003d06:	4610      	mov	r0, r2
 8003d08:	4798      	blx	r3
 8003d0a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <USART2_IRQHandler+0x90>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <USART2_IRQHandler+0x90>)
 8003d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e006      	b.n	8003d2e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <USART2_IRQHandler+0x80>)
 8003d22:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003d24:	79fa      	ldrb	r2, [r7, #7]
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <USART2_IRQHandler+0x84>)
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e000      	b.n	8003d2e <USART2_IRQHandler+0x7a>
      return;
 8003d2c:	bf00      	nop
    }
  }
}
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40004404 	.word	0x40004404
 8003d3c:	20019250 	.word	0x20019250
 8003d40:	20019254 	.word	0x20019254
 8003d44:	4000440c 	.word	0x4000440c

08003d48 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	4000440c 	.word	0x4000440c

08003d68 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HIF_UART_Init+0xc8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HIF_UART_Init+0xc8>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HIF_UART_Init+0xcc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HIF_UART_Init+0xcc>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d8c:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <HIF_UART_Init+0xd0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d98:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003da0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003da2:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <HIF_UART_Init+0xd0>)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HIF_UART_Init+0xd4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003dbc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HIF_UART_Init+0xd4>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HIF_UART_Init+0xd8>)
 8003dc6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003dca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HIF_UART_Init+0xdc>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003dd2:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HIF_UART_Init+0xe0>)
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HIF_UART_Init+0xe4>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d302      	bcc.n	8003dfe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003df8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003dfc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <HIF_UART_Init+0xe8>)
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003e0e:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <HIF_UART_Init+0xec>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003e14:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <HIF_UART_Init+0xf0>)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003e1a:	2106      	movs	r1, #6
 8003e1c:	2026      	movs	r0, #38	; 0x26
 8003e1e:	f7ff feab 	bl	8003b78 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003e22:	2026      	movs	r0, #38	; 0x26
 8003e24:	f7ff fe8a 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023840 	.word	0x40023840
 8003e34:	40023830 	.word	0x40023830
 8003e38:	40020020 	.word	0x40020020
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	4000440c 	.word	0x4000440c
 8003e44:	40004410 	.word	0x40004410
 8003e48:	40004414 	.word	0x40004414
 8003e4c:	0501bd00 	.word	0x0501bd00
 8003e50:	40004408 	.word	0x40004408
 8003e54:	20019250 	.word	0x20019250
 8003e58:	20019254 	.word	0x20019254

08003e5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <_DoInit+0x98>)
 8003e64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2203      	movs	r2, #3
 8003e70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <_DoInit+0x9c>)
 8003e76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <_DoInit+0xa0>)
 8003e7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <_DoInit+0x9c>)
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <_DoInit+0xa4>)
 8003ea2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3307      	adds	r3, #7
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <_DoInit+0xa8>)
 8003ec2:	6810      	ldr	r0, [r2, #0]
 8003ec4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ec6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <_DoInit+0xac>)
 8003ece:	6810      	ldr	r0, [r2, #0]
 8003ed0:	6018      	str	r0, [r3, #0]
 8003ed2:	8891      	ldrh	r1, [r2, #4]
 8003ed4:	7992      	ldrb	r2, [r2, #6]
 8003ed6:	8099      	strh	r1, [r3, #4]
 8003ed8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003eda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ee4:	f3bf 8f5f 	dmb	sy
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	20019258 	.word	0x20019258
 8003ef8:	08005890 	.word	0x08005890
 8003efc:	20019300 	.word	0x20019300
 8003f00:	20019700 	.word	0x20019700
 8003f04:	0800589c 	.word	0x0800589c
 8003f08:	080058a0 	.word	0x080058a0

08003f0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d905      	bls.n	8003f3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e007      	b.n	8003f4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	69b9      	ldr	r1, [r7, #24]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	1acb      	subs	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bf28      	it	cs
 8003f5a:	4613      	movcs	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bf28      	it	cs
 8003f66:	4613      	movcs	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f001 fc05 	bl	8005788 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	4413      	add	r3, r2
 8003f84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	4413      	add	r3, r2
 8003f9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d101      	bne.n	8003fac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1b2      	bne.n	8003f22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d911      	bls.n	800400e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	6938      	ldr	r0, [r7, #16]
 8003ffa:	f001 fbc5 	bl	8005788 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ffe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800400c:	e01f      	b.n	800404e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	6938      	ldr	r0, [r7, #16]
 8004022:	f001 fbb1 	bl	8005788 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4619      	mov	r1, r3
 800403e:	6938      	ldr	r0, [r7, #16]
 8004040:	f001 fba2 	bl	8005788 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004044:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	60da      	str	r2, [r3, #12]
}
 800404e:	bf00      	nop
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d808      	bhi.n	8004084 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e004      	b.n	800408e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80040a8:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80040b6:	f7ff fed1 	bl	8003e5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d92b      	bls.n	8004140 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bf28      	it	cs
 80040fa:	4613      	movcs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	4413      	add	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	6939      	ldr	r1, [r7, #16]
 800410c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800410e:	f001 fb3b 	bl	8005788 <memcpy>
    NumBytesRead += NumBytesRem;
 8004112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4413      	add	r3, r2
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800412a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004138:	429a      	cmp	r2, r3
 800413a:	d101      	bne.n	8004140 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4293      	cmp	r3, r2
 800414e:	bf28      	it	cs
 8004150:	4613      	movcs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d019      	beq.n	800418e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	4413      	add	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	6939      	ldr	r1, [r7, #16]
 8004168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416a:	f001 fb0d 	bl	8005788 <memcpy>
    NumBytesRead += NumBytesRem;
 800416e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4413      	add	r3, r2
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800419c:	4618      	mov	r0, r3
 800419e:	3730      	adds	r7, #48	; 0x30
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20019258 	.word	0x20019258

080041a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80041c2:	f7ff fe4b 	bl	8003e5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3360      	adds	r3, #96	; 0x60
 80041d2:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80041d4:	4413      	add	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d92b      	bls.n	800424c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4293      	cmp	r3, r2
 8004204:	bf28      	it	cs
 8004206:	4613      	movcs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	4413      	add	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421a:	f001 fab5 	bl	8005788 <memcpy>
    NumBytesRead += NumBytesRem;
 800421e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4413      	add	r3, r2
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	429a      	cmp	r2, r3
 8004246:	d101      	bne.n	800424c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004248:	2300      	movs	r3, #0
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4293      	cmp	r3, r2
 800425a:	bf28      	it	cs
 800425c:	4613      	movcs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d019      	beq.n	800429a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	4413      	add	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004276:	f001 fa87 	bl	8005788 <memcpy>
    NumBytesRead += NumBytesRem;
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20019258 	.word	0x20019258

080042b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	3360      	adds	r3, #96	; 0x60
 80042d0:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80042d2:	4413      	add	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d029      	beq.n	8004332 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d82e      	bhi.n	8004340 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d013      	beq.n	8004312 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80042ea:	e029      	b.n	8004340 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042ec:	6978      	ldr	r0, [r7, #20]
 80042ee:	f7ff feb2 	bl	8004056 <_GetAvailWriteSpace>
 80042f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d202      	bcs.n	8004302 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004300:	e021      	b.n	8004346 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff fe5b 	bl	8003fc6 <_WriteNoCheck>
    break;
 8004310:	e019      	b.n	8004346 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7ff fe9f 	bl	8004056 <_GetAvailWriteSpace>
 8004318:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4293      	cmp	r3, r2
 8004320:	bf28      	it	cs
 8004322:	4613      	movcs	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	69b9      	ldr	r1, [r7, #24]
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f7ff fe4b 	bl	8003fc6 <_WriteNoCheck>
    break;
 8004330:	e009      	b.n	8004346 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f7ff fde8 	bl	8003f0c <_WriteBlocking>
 800433c:	61f8      	str	r0, [r7, #28]
    break;
 800433e:	e002      	b.n	8004346 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
    break;
 8004344:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004346:	69fb      	ldr	r3, [r7, #28]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20019258 	.word	0x20019258

08004354 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800436e:	f7ff fd75 	bl	8003e5c <_DoInit>
  SEGGER_RTT_LOCK();
 8004372:	f3ef 8311 	mrs	r3, BASEPRI
 8004376:	f04f 0120 	mov.w	r1, #32
 800437a:	f381 8811 	msr	BASEPRI, r1
 800437e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff ff95 	bl	80042b4 <SEGGER_RTT_WriteDownBufferNoLock>
 800438a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004392:	697b      	ldr	r3, [r7, #20]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20019258 	.word	0x20019258

080043a0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80043bc:	f7ff fd4e 	bl	8003e5c <_DoInit>
  SEGGER_RTT_LOCK();
 80043c0:	f3ef 8311 	mrs	r3, BASEPRI
 80043c4:	f04f 0120 	mov.w	r1, #32
 80043c8:	f381 8811 	msr	BASEPRI, r1
 80043cc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043ce:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043d0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3304      	adds	r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3301      	adds	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	dbeb      	blt.n	80043d6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80043fe:	e000      	b.n	8004402 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004400:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	429a      	cmp	r2, r3
 800440a:	da3f      	bge.n	800448c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800440c:	6939      	ldr	r1, [r7, #16]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004420:	6939      	ldr	r1, [r7, #16]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	3304      	adds	r3, #4
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004436:	6939      	ldr	r1, [r7, #16]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	440b      	add	r3, r1
 8004444:	3320      	adds	r3, #32
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800444a:	6939      	ldr	r1, [r7, #16]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	440b      	add	r3, r1
 8004458:	3328      	adds	r3, #40	; 0x28
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	3324      	adds	r3, #36	; 0x24
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004472:	6939      	ldr	r1, [r7, #16]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	332c      	adds	r3, #44	; 0x2c
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004486:	f3bf 8f5f 	dmb	sy
 800448a:	e002      	b.n	8004492 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004498:	69fb      	ldr	r3, [r7, #28]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20019258 	.word	0x20019258

080044a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80044c4:	f7ff fcca 	bl	8003e5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044c8:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80044ca:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d24d      	bcs.n	8004574 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80044d8:	f3ef 8311 	mrs	r3, BASEPRI
 80044dc:	f04f 0120 	mov.w	r1, #32
 80044e0:	f381 8811 	msr	BASEPRI, r1
 80044e4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d031      	beq.n	8004550 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3360      	adds	r3, #96	; 0x60
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3364      	adds	r3, #100	; 0x64
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	3368      	adds	r3, #104	; 0x68
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3370      	adds	r3, #112	; 0x70
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	336c      	adds	r3, #108	; 0x6c
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004550:	6979      	ldr	r1, [r7, #20]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	3374      	adds	r3, #116	; 0x74
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004564:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e002      	b.n	800457a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800457a:	69fb      	ldr	r3, [r7, #28]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20019258 	.word	0x20019258

08004588 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004598:	e002      	b.n	80045a0 <_EncodeStr+0x18>
    Len++;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f6      	bne.n	800459a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d901      	bls.n	80045b8 <_EncodeStr+0x30>
    Len = Limit;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2bfe      	cmp	r3, #254	; 0xfe
 80045bc:	d806      	bhi.n	80045cc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	60fa      	str	r2, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e011      	b.n	80045f0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60fa      	str	r2, [r7, #12]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	0a19      	lsrs	r1, r3, #8
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	60fa      	str	r2, [r7, #12]
 80045ec:	b2ca      	uxtb	r2, r1
 80045ee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045f4:	e00a      	b.n	800460c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	1c53      	adds	r3, r2, #1
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	60f9      	str	r1, [r7, #12]
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	701a      	strb	r2, [r3, #0]
    n++;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	3301      	adds	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d3f0      	bcc.n	80045f6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <_HandleIncomingPacket+0xe0>)
 8004644:	7e1b      	ldrb	r3, [r3, #24]
 8004646:	4618      	mov	r0, r3
 8004648:	1cfb      	adds	r3, r7, #3
 800464a:	2201      	movs	r2, #1
 800464c:	4619      	mov	r1, r3
 800464e:	f7ff fdab 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
 8004652:	4603      	mov	r3, r0
 8004654:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	dd54      	ble.n	8004706 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d032      	beq.n	80046c8 <_HandleIncomingPacket+0x8c>
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	dc42      	bgt.n	80046ec <_HandleIncomingPacket+0xb0>
 8004666:	2b07      	cmp	r3, #7
 8004668:	dc16      	bgt.n	8004698 <_HandleIncomingPacket+0x5c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	dd3e      	ble.n	80046ec <_HandleIncomingPacket+0xb0>
 800466e:	3b01      	subs	r3, #1
 8004670:	2b06      	cmp	r3, #6
 8004672:	d83b      	bhi.n	80046ec <_HandleIncomingPacket+0xb0>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <_HandleIncomingPacket+0x40>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	0800469f 	.word	0x0800469f
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ab 	.word	0x080046ab
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046c3 	.word	0x080046c3
 8004698:	2b7f      	cmp	r3, #127	; 0x7f
 800469a:	d036      	beq.n	800470a <_HandleIncomingPacket+0xce>
 800469c:	e026      	b.n	80046ec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800469e:	f000 faa3 	bl	8004be8 <SEGGER_SYSVIEW_Start>
      break;
 80046a2:	e037      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80046a4:	f000 fb5c 	bl	8004d60 <SEGGER_SYSVIEW_Stop>
      break;
 80046a8:	e034      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80046aa:	f000 fd35 	bl	8005118 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80046ae:	e031      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80046b0:	f000 fcfa 	bl	80050a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80046b4:	e02e      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80046b6:	f000 fb79 	bl	8004dac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80046ba:	e02b      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80046bc:	f000 ff68 	bl	8005590 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80046c0:	e028      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80046c2:	f000 ff47 	bl	8005554 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80046c6:	e025      	b.n	8004714 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <_HandleIncomingPacket+0xe0>)
 80046ca:	7e1b      	ldrb	r3, [r3, #24]
 80046cc:	4618      	mov	r0, r3
 80046ce:	1cfb      	adds	r3, r7, #3
 80046d0:	2201      	movs	r2, #1
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff fd68 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
 80046d8:	4603      	mov	r3, r0
 80046da:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dd15      	ble.n	800470e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 feb5 	bl	8005454 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80046ea:	e010      	b.n	800470e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da0e      	bge.n	8004712 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <_HandleIncomingPacket+0xe0>)
 80046f6:	7e1b      	ldrb	r3, [r3, #24]
 80046f8:	4618      	mov	r0, r3
 80046fa:	1cfb      	adds	r3, r7, #3
 80046fc:	2201      	movs	r2, #1
 80046fe:	4619      	mov	r1, r3
 8004700:	f7ff fd52 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004704:	e005      	b.n	8004712 <_HandleIncomingPacket+0xd6>
    }
  }
 8004706:	bf00      	nop
 8004708:	e004      	b.n	8004714 <_HandleIncomingPacket+0xd8>
      break;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <_HandleIncomingPacket+0xd8>
      break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <_HandleIncomingPacket+0xd8>
      break;
 8004712:	bf00      	nop
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	2001a718 	.word	0x2001a718

08004720 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	; 0x30
 8004724:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004726:	2301      	movs	r3, #1
 8004728:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004734:	4b32      	ldr	r3, [pc, #200]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	e00b      	b.n	8004754 <_TrySendOverflowPacket+0x34>
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b7f      	cmp	r3, #127	; 0x7f
 8004758:	d8f0      	bhi.n	800473c <_TrySendOverflowPacket+0x1c>
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <_TrySendOverflowPacket+0xe4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e00b      	b.n	800479c <_TrySendOverflowPacket+0x7c>
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6279      	str	r1, [r7, #36]	; 0x24
 800478e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	09db      	lsrs	r3, r3, #7
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2b7f      	cmp	r3, #127	; 0x7f
 80047a0:	d8f0      	bhi.n	8004784 <_TrySendOverflowPacket+0x64>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	627a      	str	r2, [r7, #36]	; 0x24
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	4618      	mov	r0, r3
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fb fd04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047c8:	4603      	mov	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80047cc:	f7ff fabc 	bl	8003d48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e004      	b.n	80047f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	4a03      	ldr	r2, [pc, #12]	; (8004800 <_TrySendOverflowPacket+0xe0>)
 80047f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80047f4:	693b      	ldr	r3, [r7, #16]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3730      	adds	r7, #48	; 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2001a718 	.word	0x2001a718
 8004804:	e0001004 	.word	0xe0001004

08004808 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004814:	4b6d      	ldr	r3, [pc, #436]	; (80049cc <_SendPacket+0x1c4>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d010      	beq.n	800483e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800481c:	4b6b      	ldr	r3, [pc, #428]	; (80049cc <_SendPacket+0x1c4>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a5 	beq.w	8004970 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004826:	4b69      	ldr	r3, [pc, #420]	; (80049cc <_SendPacket+0x1c4>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d109      	bne.n	8004842 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800482e:	f7ff ff77 	bl	8004720 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004832:	4b66      	ldr	r3, [pc, #408]	; (80049cc <_SendPacket+0x1c4>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	f040 809c 	bne.w	8004974 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800483c:	e001      	b.n	8004842 <_SendPacket+0x3a>
    goto Send;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <_SendPacket+0x3c>
Send:
 8004842:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b1f      	cmp	r3, #31
 8004848:	d809      	bhi.n	800485e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800484a:	4b60      	ldr	r3, [pc, #384]	; (80049cc <_SendPacket+0x1c4>)
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 808d 	bne.w	8004978 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b17      	cmp	r3, #23
 8004862:	d807      	bhi.n	8004874 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e03d      	b.n	80048f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b7f      	cmp	r3, #127	; 0x7f
 8004880:	d912      	bls.n	80048a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	09da      	lsrs	r2, r3, #7
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	3a01      	subs	r2, #1
 800489a:	60fa      	str	r2, [r7, #12]
 800489c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e006      	b.n	80048b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ba:	d912      	bls.n	80048e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	09da      	lsrs	r2, r3, #7
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	3a01      	subs	r2, #1
 80048d4:	60fa      	str	r2, [r7, #12]
 80048d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e006      	b.n	80048f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048f0:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <_SendPacket+0x1c8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80048f6:	4b35      	ldr	r3, [pc, #212]	; (80049cc <_SendPacket+0x1c4>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	e00b      	b.n	8004922 <_SendPacket+0x11a>
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	1c59      	adds	r1, r3, #1
 8004912:	6279      	str	r1, [r7, #36]	; 0x24
 8004914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	09db      	lsrs	r3, r3, #7
 8004920:	623b      	str	r3, [r7, #32]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2b7f      	cmp	r3, #127	; 0x7f
 8004926:	d8f0      	bhi.n	800490a <_SendPacket+0x102>
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	627a      	str	r2, [r7, #36]	; 0x24
 800492e:	6a3a      	ldr	r2, [r7, #32]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004938:	4b24      	ldr	r3, [pc, #144]	; (80049cc <_SendPacket+0x1c4>)
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	4618      	mov	r0, r3
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	461a      	mov	r2, r3
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	f7fb fc42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800494c:	4603      	mov	r3, r0
 800494e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004950:	f7ff f9fa 	bl	8003d48 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <_SendPacket+0x1c4>)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	60d3      	str	r3, [r2, #12]
 8004960:	e00b      	b.n	800497a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <_SendPacket+0x1c4>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <_SendPacket+0x1c4>)
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e004      	b.n	800497a <_SendPacket+0x172>
    goto SendDone;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <_SendPacket+0x172>
      goto SendDone;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <_SendPacket+0x172>
      goto SendDone;
 8004978:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <_SendPacket+0x1c4>)
 800497c:	7e1b      	ldrb	r3, [r3, #24]
 800497e:	4619      	mov	r1, r3
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <_SendPacket+0x1cc>)
 8004982:	460b      	mov	r3, r1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	336c      	adds	r3, #108	; 0x6c
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <_SendPacket+0x1c4>)
 8004992:	7e1b      	ldrb	r3, [r3, #24]
 8004994:	4618      	mov	r0, r3
 8004996:	490f      	ldr	r1, [pc, #60]	; (80049d4 <_SendPacket+0x1cc>)
 8004998:	4603      	mov	r3, r0
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4403      	add	r3, r0
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	3370      	adds	r3, #112	; 0x70
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d00b      	beq.n	80049c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <_SendPacket+0x1c4>)
 80049ac:	789b      	ldrb	r3, [r3, #2]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <_SendPacket+0x1c4>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80049b8:	f7ff fe40 	bl	800463c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <_SendPacket+0x1c4>)
 80049be:	2200      	movs	r2, #0
 80049c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80049c2:	bf00      	nop
 80049c4:	3728      	adds	r7, #40	; 0x28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	2001a718 	.word	0x2001a718
 80049d0:	e0001004 	.word	0xe0001004
 80049d4:	20019258 	.word	0x20019258

080049d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049e6:	2300      	movs	r3, #0
 80049e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049ec:	4917      	ldr	r1, [pc, #92]	; (8004a4c <SEGGER_SYSVIEW_Init+0x74>)
 80049ee:	4818      	ldr	r0, [pc, #96]	; (8004a50 <SEGGER_SYSVIEW_Init+0x78>)
 80049f0:	f7ff fcd6 	bl	80043a0 <SEGGER_RTT_AllocUpBuffer>
 80049f4:	4603      	mov	r3, r0
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 80049fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 80049fe:	785a      	ldrb	r2, [r3, #1]
 8004a00:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a02:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a06:	7e1b      	ldrb	r3, [r3, #24]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2308      	movs	r3, #8
 8004a10:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <SEGGER_SYSVIEW_Init+0x80>)
 8004a12:	490f      	ldr	r1, [pc, #60]	; (8004a50 <SEGGER_SYSVIEW_Init+0x78>)
 8004a14:	f7ff fd48 	bl	80044a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <SEGGER_SYSVIEW_Init+0x84>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a24:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a38:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20019710 	.word	0x20019710
 8004a50:	080058a8 	.word	0x080058a8
 8004a54:	2001a718 	.word	0x2001a718
 8004a58:	2001a710 	.word	0x2001a710
 8004a5c:	e0001004 	.word	0xe0001004

08004a60 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6113      	str	r3, [r2, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2001a718 	.word	0x2001a718

08004a80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a88:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8c:	f04f 0120 	mov.w	r1, #32
 8004a90:	f381 8811 	msr	BASEPRI, r1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	4808      	ldr	r0, [pc, #32]	; (8004ab8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a98:	f7ff fdc3 	bl	8004622 <_PreparePacket>
 8004a9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f7ff feb0 	bl	8004808 <_SendPacket>
  RECORD_END();
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f383 8811 	msr	BASEPRI, r3
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2001a748 	.word	0x2001a748

08004abc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aca:	f04f 0120 	mov.w	r1, #32
 8004ace:	f381 8811 	msr	BASEPRI, r1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	4816      	ldr	r0, [pc, #88]	; (8004b30 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ad6:	f7ff fda4 	bl	8004622 <_PreparePacket>
 8004ada:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e00b      	b.n	8004b02 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	61f9      	str	r1, [r7, #28]
 8004af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	09db      	lsrs	r3, r3, #7
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b7f      	cmp	r3, #127	; 0x7f
 8004b06:	d8f0      	bhi.n	8004aea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	61fa      	str	r2, [r7, #28]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	6938      	ldr	r0, [r7, #16]
 8004b1e:	f7ff fe73 	bl	8004808 <_SendPacket>
  RECORD_END();
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f383 8811 	msr	BASEPRI, r3
}
 8004b28:	bf00      	nop
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	2001a748 	.word	0x2001a748

08004b34 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b40:	f3ef 8311 	mrs	r3, BASEPRI
 8004b44:	f04f 0120 	mov.w	r1, #32
 8004b48:	f381 8811 	msr	BASEPRI, r1
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	4825      	ldr	r0, [pc, #148]	; (8004be4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b50:	f7ff fd67 	bl	8004622 <_PreparePacket>
 8004b54:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	e00b      	b.n	8004b7c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	09db      	lsrs	r3, r3, #7
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b80:	d8f0      	bhi.n	8004b64 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	623b      	str	r3, [r7, #32]
 8004b9a:	e00b      	b.n	8004bb4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	1c59      	adds	r1, r3, #1
 8004ba4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	09db      	lsrs	r3, r3, #7
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb8:	d8f0      	bhi.n	8004b9c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	69b8      	ldr	r0, [r7, #24]
 8004bd0:	f7ff fe1a 	bl	8004808 <_SendPacket>
  RECORD_END();
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f383 8811 	msr	BASEPRI, r3
}
 8004bda:	bf00      	nop
 8004bdc:	3730      	adds	r7, #48	; 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2001a748 	.word	0x2001a748

08004be8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004bee:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf8:	f04f 0120 	mov.w	r1, #32
 8004bfc:	f381 8811 	msr	BASEPRI, r1
 8004c00:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004c02:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	220a      	movs	r2, #10
 8004c08:	4953      	ldr	r1, [pc, #332]	; (8004d58 <SEGGER_SYSVIEW_Start+0x170>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fae0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004c16:	f7ff f897 	bl	8003d48 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004c1a:	200a      	movs	r0, #10
 8004c1c:	f7ff ff30 	bl	8004a80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c20:	f3ef 8311 	mrs	r3, BASEPRI
 8004c24:	f04f 0120 	mov.w	r1, #32
 8004c28:	f381 8811 	msr	BASEPRI, r1
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	484b      	ldr	r0, [pc, #300]	; (8004d5c <SEGGER_SYSVIEW_Start+0x174>)
 8004c30:	f7ff fcf7 	bl	8004622 <_PreparePacket>
 8004c34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c44:	e00b      	b.n	8004c5e <SEGGER_SYSVIEW_Start+0x76>
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	1c59      	adds	r1, r3, #1
 8004c4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	09db      	lsrs	r3, r3, #7
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	2b7f      	cmp	r3, #127	; 0x7f
 8004c62:	d8f0      	bhi.n	8004c46 <SEGGER_SYSVIEW_Start+0x5e>
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	e00b      	b.n	8004c98 <SEGGER_SYSVIEW_Start+0xb0>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	6279      	str	r1, [r7, #36]	; 0x24
 8004c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9c:	d8f0      	bhi.n	8004c80 <SEGGER_SYSVIEW_Start+0x98>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e00b      	b.n	8004cd2 <SEGGER_SYSVIEW_Start+0xea>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	61f9      	str	r1, [r7, #28]
 8004cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd6:	d8f0      	bhi.n	8004cba <SEGGER_SYSVIEW_Start+0xd2>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	61fa      	str	r2, [r7, #28]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e00b      	b.n	8004d0a <SEGGER_SYSVIEW_Start+0x122>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	6179      	str	r1, [r7, #20]
 8004cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	09db      	lsrs	r3, r3, #7
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0e:	d8f0      	bhi.n	8004cf2 <SEGGER_SYSVIEW_Start+0x10a>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	617a      	str	r2, [r7, #20]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d20:	2218      	movs	r2, #24
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fd6f 	bl	8004808 <_SendPacket>
      RECORD_END();
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004d3e:	f000 f9eb 	bl	8005118 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004d42:	f000 f9b1 	bl	80050a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004d46:	f000 fc23 	bl	8005590 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004d4a:	bf00      	nop
 8004d4c:	3730      	adds	r7, #48	; 0x30
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2001a718 	.word	0x2001a718
 8004d58:	080058d4 	.word	0x080058d4
 8004d5c:	2001a748 	.word	0x2001a748

08004d60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d66:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6a:	f04f 0120 	mov.w	r1, #32
 8004d6e:	f381 8811 	msr	BASEPRI, r1
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	480b      	ldr	r0, [pc, #44]	; (8004da4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004d76:	f7ff fc54 	bl	8004622 <_PreparePacket>
 8004d7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004d84:	220b      	movs	r2, #11
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	6838      	ldr	r0, [r7, #0]
 8004d8a:	f7ff fd3d 	bl	8004808 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f383 8811 	msr	BASEPRI, r3
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2001a748 	.word	0x2001a748
 8004da8:	2001a718 	.word	0x2001a718

08004dac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004db2:	f3ef 8311 	mrs	r3, BASEPRI
 8004db6:	f04f 0120 	mov.w	r1, #32
 8004dba:	f381 8811 	msr	BASEPRI, r1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	4845      	ldr	r0, [pc, #276]	; (8004ed8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004dc2:	f7ff fc2e 	bl	8004622 <_PreparePacket>
 8004dc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd0:	4b42      	ldr	r3, [pc, #264]	; (8004edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	e00b      	b.n	8004df0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b7f      	cmp	r3, #127	; 0x7f
 8004df4:	d8f0      	bhi.n	8004dd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	e00b      	b.n	8004e2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1c59      	adds	r1, r3, #1
 8004e1a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	09db      	lsrs	r3, r3, #7
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2e:	d8f0      	bhi.n	8004e12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	627a      	str	r2, [r7, #36]	; 0x24
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e00b      	b.n	8004e64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	61f9      	str	r1, [r7, #28]
 8004e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	09db      	lsrs	r3, r3, #7
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b7f      	cmp	r3, #127	; 0x7f
 8004e68:	d8f0      	bhi.n	8004e4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	61fa      	str	r2, [r7, #28]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	e00b      	b.n	8004e9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	6179      	str	r1, [r7, #20]
 8004e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	09db      	lsrs	r3, r3, #7
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea0:	d8f0      	bhi.n	8004e84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	617a      	str	r2, [r7, #20]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004eb2:	2218      	movs	r2, #24
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68b8      	ldr	r0, [r7, #8]
 8004eb8:	f7ff fca6 	bl	8004808 <_SendPacket>
  RECORD_END();
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	4798      	blx	r3
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	3730      	adds	r7, #48	; 0x30
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	2001a748 	.word	0x2001a748
 8004edc:	2001a718 	.word	0x2001a718

08004ee0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b092      	sub	sp, #72	; 0x48
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eec:	f04f 0120 	mov.w	r1, #32
 8004ef0:	f381 8811 	msr	BASEPRI, r1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	486a      	ldr	r0, [pc, #424]	; (80050a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ef8:	f7ff fb93 	bl	8004622 <_PreparePacket>
 8004efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	647b      	str	r3, [r7, #68]	; 0x44
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	643b      	str	r3, [r7, #64]	; 0x40
 8004f12:	e00b      	b.n	8004f2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	1c59      	adds	r1, r3, #1
 8004f1c:	6479      	str	r1, [r7, #68]	; 0x44
 8004f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f28:	09db      	lsrs	r3, r3, #7
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f30:	d8f0      	bhi.n	8004f14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	647a      	str	r2, [r7, #68]	; 0x44
 8004f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4c:	e00b      	b.n	8004f66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	09db      	lsrs	r3, r3, #7
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6a:	d8f0      	bhi.n	8004f4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	4619      	mov	r1, r3
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff faff 	bl	8004588 <_EncodeStr>
 8004f8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004f8c:	2209      	movs	r2, #9
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	6938      	ldr	r0, [r7, #16]
 8004f92:	f7ff fc39 	bl	8004808 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	e00b      	b.n	8004fc4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	6379      	str	r1, [r7, #52]	; 0x34
 8004fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	09db      	lsrs	r3, r3, #7
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc8:	d8f0      	bhi.n	8004fac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe4:	e00b      	b.n	8004ffe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b7f      	cmp	r3, #127	; 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800500a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	e00b      	b.n	8005038 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	6279      	str	r1, [r7, #36]	; 0x24
 800502a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b7f      	cmp	r3, #127	; 0x7f
 800503c:	d8f0      	bhi.n	8005020 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	627a      	str	r2, [r7, #36]	; 0x24
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e00b      	b.n	8005070 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	61f9      	str	r1, [r7, #28]
 8005062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	09db      	lsrs	r3, r3, #7
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b7f      	cmp	r3, #127	; 0x7f
 8005074:	d8f0      	bhi.n	8005058 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	61fa      	str	r2, [r7, #28]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005086:	2215      	movs	r2, #21
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f7ff fbbc 	bl	8004808 <_SendPacket>
  RECORD_END();
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f383 8811 	msr	BASEPRI, r3
}
 8005096:	bf00      	nop
 8005098:	3748      	adds	r7, #72	; 0x48
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2001a748 	.word	0x2001a748
 80050a4:	2001a718 	.word	0x2001a718

080050a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4798      	blx	r3
  }
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2001a718 	.word	0x2001a718

080050d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050d8:	f3ef 8311 	mrs	r3, BASEPRI
 80050dc:	f04f 0120 	mov.w	r1, #32
 80050e0:	f381 8811 	msr	BASEPRI, r1
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	480b      	ldr	r0, [pc, #44]	; (8005114 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80050e8:	f7ff fa9b 	bl	8004622 <_PreparePacket>
 80050ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6938      	ldr	r0, [r7, #16]
 80050f4:	f7ff fa48 	bl	8004588 <_EncodeStr>
 80050f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80050fa:	220e      	movs	r2, #14
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	6938      	ldr	r0, [r7, #16]
 8005100:	f7ff fb82 	bl	8004808 <_SendPacket>
  RECORD_END();
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f383 8811 	msr	BASEPRI, r3
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2001a748 	.word	0x2001a748

08005118 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01a      	beq.n	800515c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4798      	blx	r3
 8005138:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800513c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800513e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	000a      	movs	r2, r1
 800514c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800514e:	4613      	mov	r3, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4621      	mov	r1, r4
 8005154:	200d      	movs	r0, #13
 8005156:	f7ff fced 	bl	8004b34 <SEGGER_SYSVIEW_RecordU32x2>
 800515a:	e006      	b.n	800516a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	200c      	movs	r0, #12
 8005164:	f7ff fcaa 	bl	8004abc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}
 8005172:	bf00      	nop
 8005174:	2001a718 	.word	0x2001a718
 8005178:	e0001004 	.word	0xe0001004

0800517c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	4819      	ldr	r0, [pc, #100]	; (80051f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005192:	f7ff fa46 	bl	8004622 <_PreparePacket>
 8005196:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800519c:	4b17      	ldr	r3, [pc, #92]	; (80051fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e00b      	b.n	80051c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	6179      	str	r1, [r7, #20]
 80051ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	09db      	lsrs	r3, r3, #7
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b7f      	cmp	r3, #127	; 0x7f
 80051cc:	d8f0      	bhi.n	80051b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	617a      	str	r2, [r7, #20]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80051de:	2202      	movs	r2, #2
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7ff fb10 	bl	8004808 <_SendPacket>
  RECORD_END();
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2001a748 	.word	0x2001a748
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005206:	f3ef 8311 	mrs	r3, BASEPRI
 800520a:	f04f 0120 	mov.w	r1, #32
 800520e:	f381 8811 	msr	BASEPRI, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	4807      	ldr	r0, [pc, #28]	; (8005234 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005216:	f7ff fa04 	bl	8004622 <_PreparePacket>
 800521a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800521c:	2203      	movs	r2, #3
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6838      	ldr	r0, [r7, #0]
 8005222:	f7ff faf1 	bl	8004808 <_SendPacket>
  RECORD_END();
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f383 8811 	msr	BASEPRI, r3
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	2001a748 	.word	0x2001a748

08005238 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800523e:	f3ef 8311 	mrs	r3, BASEPRI
 8005242:	f04f 0120 	mov.w	r1, #32
 8005246:	f381 8811 	msr	BASEPRI, r1
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	4807      	ldr	r0, [pc, #28]	; (800526c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800524e:	f7ff f9e8 	bl	8004622 <_PreparePacket>
 8005252:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005254:	2212      	movs	r2, #18
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f7ff fad5 	bl	8004808 <_SendPacket>
  RECORD_END();
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f383 8811 	msr	BASEPRI, r3
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	2001a748 	.word	0x2001a748

08005270 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005276:	f3ef 8311 	mrs	r3, BASEPRI
 800527a:	f04f 0120 	mov.w	r1, #32
 800527e:	f381 8811 	msr	BASEPRI, r1
 8005282:	607b      	str	r3, [r7, #4]
 8005284:	4807      	ldr	r0, [pc, #28]	; (80052a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005286:	f7ff f9cc 	bl	8004622 <_PreparePacket>
 800528a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800528c:	2211      	movs	r2, #17
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	6838      	ldr	r0, [r7, #0]
 8005292:	f7ff fab9 	bl	8004808 <_SendPacket>
  RECORD_END();
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f383 8811 	msr	BASEPRI, r3
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	2001a748 	.word	0x2001a748

080052a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052b0:	f3ef 8311 	mrs	r3, BASEPRI
 80052b4:	f04f 0120 	mov.w	r1, #32
 80052b8:	f381 8811 	msr	BASEPRI, r1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	4819      	ldr	r0, [pc, #100]	; (8005324 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80052c0:	f7ff f9af 	bl	8004622 <_PreparePacket>
 80052c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052ca:	4b17      	ldr	r3, [pc, #92]	; (8005328 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e00b      	b.n	80052f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	61f9      	str	r1, [r7, #28]
 80052e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	09db      	lsrs	r3, r3, #7
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b7f      	cmp	r3, #127	; 0x7f
 80052fa:	d8f0      	bhi.n	80052de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	61fa      	str	r2, [r7, #28]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800530c:	2208      	movs	r2, #8
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	6938      	ldr	r0, [r7, #16]
 8005312:	f7ff fa79 	bl	8004808 <_SendPacket>
  RECORD_END();
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f383 8811 	msr	BASEPRI, r3
}
 800531c:	bf00      	nop
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2001a748 	.word	0x2001a748
 8005328:	2001a718 	.word	0x2001a718

0800532c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005334:	f3ef 8311 	mrs	r3, BASEPRI
 8005338:	f04f 0120 	mov.w	r1, #32
 800533c:	f381 8811 	msr	BASEPRI, r1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	4819      	ldr	r0, [pc, #100]	; (80053a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005344:	f7ff f96d 	bl	8004622 <_PreparePacket>
 8005348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e00b      	b.n	800537a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	61f9      	str	r1, [r7, #28]
 800536c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	09db      	lsrs	r3, r3, #7
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b7f      	cmp	r3, #127	; 0x7f
 800537e:	d8f0      	bhi.n	8005362 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	61fa      	str	r2, [r7, #28]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005390:	2204      	movs	r2, #4
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	f7ff fa37 	bl	8004808 <_SendPacket>
  RECORD_END();
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f383 8811 	msr	BASEPRI, r3
}
 80053a0:	bf00      	nop
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	2001a748 	.word	0x2001a748
 80053ac:	2001a718 	.word	0x2001a718

080053b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053b8:	f3ef 8311 	mrs	r3, BASEPRI
 80053bc:	f04f 0120 	mov.w	r1, #32
 80053c0:	f381 8811 	msr	BASEPRI, r1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	4819      	ldr	r0, [pc, #100]	; (800542c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80053c8:	f7ff f92b 	bl	8004622 <_PreparePacket>
 80053cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e00b      	b.n	80053fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	61f9      	str	r1, [r7, #28]
 80053f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	09db      	lsrs	r3, r3, #7
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b7f      	cmp	r3, #127	; 0x7f
 8005402:	d8f0      	bhi.n	80053e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	61fa      	str	r2, [r7, #28]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005414:	2206      	movs	r2, #6
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	6938      	ldr	r0, [r7, #16]
 800541a:	f7ff f9f5 	bl	8004808 <_SendPacket>
  RECORD_END();
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f383 8811 	msr	BASEPRI, r3
}
 8005424:	bf00      	nop
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	2001a748 	.word	0x2001a748
 8005430:	2001a718 	.word	0x2001a718

08005434 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	1ad3      	subs	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	2001a718 	.word	0x2001a718

08005454 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d06d      	beq.n	8005542 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800546c:	2300      	movs	r3, #0
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005470:	e008      	b.n	8005484 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	3301      	adds	r3, #1
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005488:	429a      	cmp	r2, r3
 800548a:	d3f2      	bcc.n	8005472 <SEGGER_SYSVIEW_SendModule+0x1e>
 800548c:	e000      	b.n	8005490 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800548e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d055      	beq.n	8005542 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005496:	f3ef 8311 	mrs	r3, BASEPRI
 800549a:	f04f 0120 	mov.w	r1, #32
 800549e:	f381 8811 	msr	BASEPRI, r1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	482a      	ldr	r0, [pc, #168]	; (8005550 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80054a6:	f7ff f8bc 	bl	8004622 <_PreparePacket>
 80054aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	e00b      	b.n	80054d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	1c59      	adds	r1, r3, #1
 80054c2:	6279      	str	r1, [r7, #36]	; 0x24
 80054c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	09db      	lsrs	r3, r3, #7
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b7f      	cmp	r3, #127	; 0x7f
 80054d6:	d8f0      	bhi.n	80054ba <SEGGER_SYSVIEW_SendModule+0x66>
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	627a      	str	r2, [r7, #36]	; 0x24
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	61fb      	str	r3, [r7, #28]
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e00b      	b.n	800550c <SEGGER_SYSVIEW_SendModule+0xb8>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	61f9      	str	r1, [r7, #28]
 80054fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	09db      	lsrs	r3, r3, #7
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b7f      	cmp	r3, #127	; 0x7f
 8005510:	d8f0      	bhi.n	80054f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	61fa      	str	r2, [r7, #28]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	4619      	mov	r1, r3
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff f82c 	bl	8004588 <_EncodeStr>
 8005530:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005532:	2216      	movs	r2, #22
 8005534:	68f9      	ldr	r1, [r7, #12]
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7ff f966 	bl	8004808 <_SendPacket>
      RECORD_END();
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005542:	bf00      	nop
 8005544:	3730      	adds	r7, #48	; 0x30
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	2001a740 	.word	0x2001a740
 8005550:	2001a748 	.word	0x2001a748

08005554 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00f      	beq.n	8005582 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005562:	4b0a      	ldr	r3, [pc, #40]	; (800558c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f2      	bne.n	8005568 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2001a740 	.word	0x2001a740

08005590 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005596:	f3ef 8311 	mrs	r3, BASEPRI
 800559a:	f04f 0120 	mov.w	r1, #32
 800559e:	f381 8811 	msr	BASEPRI, r1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4817      	ldr	r0, [pc, #92]	; (8005604 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80055a6:	f7ff f83c 	bl	8004622 <_PreparePacket>
 80055aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e00b      	b.n	80055d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	6179      	str	r1, [r7, #20]
 80055c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	09db      	lsrs	r3, r3, #7
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b7f      	cmp	r3, #127	; 0x7f
 80055d8:	d8f0      	bhi.n	80055bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	617a      	str	r2, [r7, #20]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80055ea:	221b      	movs	r2, #27
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f7ff f90a 	bl	8004808 <_SendPacket>
  RECORD_END();
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f383 8811 	msr	BASEPRI, r3
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	2001a748 	.word	0x2001a748
 8005608:	2001a744 	.word	0x2001a744

0800560c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005614:	f3ef 8311 	mrs	r3, BASEPRI
 8005618:	f04f 0120 	mov.w	r1, #32
 800561c:	f381 8811 	msr	BASEPRI, r1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	4827      	ldr	r0, [pc, #156]	; (80056c0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005624:	f7fe fffd 	bl	8004622 <_PreparePacket>
 8005628:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f7fe ffaa 	bl	8004588 <_EncodeStr>
 8005634:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	2301      	movs	r3, #1
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	e00b      	b.n	8005658 <SEGGER_SYSVIEW_Warn+0x4c>
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1c59      	adds	r1, r3, #1
 8005648:	6279      	str	r1, [r7, #36]	; 0x24
 800564a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	09db      	lsrs	r3, r3, #7
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b7f      	cmp	r3, #127	; 0x7f
 800565c:	d8f0      	bhi.n	8005640 <SEGGER_SYSVIEW_Warn+0x34>
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	627a      	str	r2, [r7, #36]	; 0x24
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e00b      	b.n	8005690 <SEGGER_SYSVIEW_Warn+0x84>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	1c59      	adds	r1, r3, #1
 8005680:	61f9      	str	r1, [r7, #28]
 8005682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	09db      	lsrs	r3, r3, #7
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b7f      	cmp	r3, #127	; 0x7f
 8005694:	d8f0      	bhi.n	8005678 <SEGGER_SYSVIEW_Warn+0x6c>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	61fa      	str	r2, [r7, #28]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056a6:	221a      	movs	r2, #26
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	6938      	ldr	r0, [r7, #16]
 80056ac:	f7ff f8ac 	bl	8004808 <_SendPacket>
  RECORD_END();
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f383 8811 	msr	BASEPRI, r3
}
 80056b6:	bf00      	nop
 80056b8:	3728      	adds	r7, #40	; 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2001a748 	.word	0x2001a748

080056c4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056ca:	7e1b      	ldrb	r3, [r3, #24]
 80056cc:	4619      	mov	r1, r3
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056d0:	460b      	mov	r3, r1
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	440b      	add	r3, r1
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	336c      	adds	r3, #108	; 0x6c
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056e0:	7e1b      	ldrb	r3, [r3, #24]
 80056e2:	4618      	mov	r0, r3
 80056e4:	490d      	ldr	r1, [pc, #52]	; (800571c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056e6:	4603      	mov	r3, r0
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4403      	add	r3, r0
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3370      	adds	r3, #112	; 0x70
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d00b      	beq.n	8005710 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056fa:	789b      	ldrb	r3, [r3, #2]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005702:	2201      	movs	r2, #1
 8005704:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005706:	f7fe ff99 	bl	800463c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800570a:	4b03      	ldr	r3, [pc, #12]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800570c:	2200      	movs	r2, #0
 800570e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005710:	4b01      	ldr	r3, [pc, #4]	; (8005718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005712:	781b      	ldrb	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	2001a718 	.word	0x2001a718
 800571c:	20019258 	.word	0x20019258

08005720 <__libc_init_array>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4d0d      	ldr	r5, [pc, #52]	; (8005758 <__libc_init_array+0x38>)
 8005724:	4c0d      	ldr	r4, [pc, #52]	; (800575c <__libc_init_array+0x3c>)
 8005726:	1b64      	subs	r4, r4, r5
 8005728:	10a4      	asrs	r4, r4, #2
 800572a:	2600      	movs	r6, #0
 800572c:	42a6      	cmp	r6, r4
 800572e:	d109      	bne.n	8005744 <__libc_init_array+0x24>
 8005730:	4d0b      	ldr	r5, [pc, #44]	; (8005760 <__libc_init_array+0x40>)
 8005732:	4c0c      	ldr	r4, [pc, #48]	; (8005764 <__libc_init_array+0x44>)
 8005734:	f000 f83e 	bl	80057b4 <_init>
 8005738:	1b64      	subs	r4, r4, r5
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	2600      	movs	r6, #0
 800573e:	42a6      	cmp	r6, r4
 8005740:	d105      	bne.n	800574e <__libc_init_array+0x2e>
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f855 3b04 	ldr.w	r3, [r5], #4
 8005748:	4798      	blx	r3
 800574a:	3601      	adds	r6, #1
 800574c:	e7ee      	b.n	800572c <__libc_init_array+0xc>
 800574e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005752:	4798      	blx	r3
 8005754:	3601      	adds	r6, #1
 8005756:	e7f2      	b.n	800573e <__libc_init_array+0x1e>
 8005758:	080058e8 	.word	0x080058e8
 800575c:	080058e8 	.word	0x080058e8
 8005760:	080058e8 	.word	0x080058e8
 8005764:	080058ec 	.word	0x080058ec

08005768 <memcmp>:
 8005768:	b510      	push	{r4, lr}
 800576a:	3901      	subs	r1, #1
 800576c:	4402      	add	r2, r0
 800576e:	4290      	cmp	r0, r2
 8005770:	d101      	bne.n	8005776 <memcmp+0xe>
 8005772:	2000      	movs	r0, #0
 8005774:	e005      	b.n	8005782 <memcmp+0x1a>
 8005776:	7803      	ldrb	r3, [r0, #0]
 8005778:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800577c:	42a3      	cmp	r3, r4
 800577e:	d001      	beq.n	8005784 <memcmp+0x1c>
 8005780:	1b18      	subs	r0, r3, r4
 8005782:	bd10      	pop	{r4, pc}
 8005784:	3001      	adds	r0, #1
 8005786:	e7f2      	b.n	800576e <memcmp+0x6>

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579e:	4291      	cmp	r1, r2
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <memset>:
 80057a4:	4402      	add	r2, r0
 80057a6:	4603      	mov	r3, r0
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d100      	bne.n	80057ae <memset+0xa>
 80057ac:	4770      	bx	lr
 80057ae:	f803 1b01 	strb.w	r1, [r3], #1
 80057b2:	e7f9      	b.n	80057a8 <memset+0x4>

080057b4 <_init>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr

080057c0 <_fini>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	bf00      	nop
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr
